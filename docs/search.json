[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Stat 850: Computing Tools for Statistics",
    "section": "",
    "text": "Course Materials\nDates shown are due dates (for homework, projects) and dates by which initial comments/annotations should be made (reading).\nMost classes will not contain slide presentations, but when there are slides to share, they will be provided here.\n\n\n   \n     \n     \n       Order By\n       Default\n         \n          Date - Oldest\n        \n         \n          Date - Newest\n        \n         \n          Title\n        \n     \n  \n    \n      \n      \n    \n\n\n\n\n\n\nDate\n\n\n\n\nTitle\n\n\n\n\n\n\nOct 6, 2023\n\n\n\n\n\nProject Guidelines\n\n\n\n\nSep 8, 2023\n\n\n\n\n\nHomework 3: Fizzbuzz\n\n\n\n\nSep 1, 2023\n\n\n\n\n\nHomework 2: Finding Your Way in R and Python\n\n\n\n\nSep 1, 2023\n\n\n\n\n\nGood Enough Practices in Scientific Computing\n\n\n\n\nAug 29, 2023\n\n\n\n\n\nFinding your way in R and Python\n\n\n\n\nAug 28, 2023\n\n\n\n\n\nDecoding Your Confusion\n\n\n\n\nAug 25, 2023\n\n\n\n\n\nHomework 1: Git and Github\n\n\n\n\nAug 24, 2023\n\n\n\n\n\nStat 850: Git and Github\n\n\n\n\nAug 22, 2023\n\n\n\n\n\nStat 850 Introduction\n\n\n\n\nAug 21, 2023\n\n\n\n\n\nSetup and Syllabus Annotation\n\n\n\n\n\n\nNo matching items"
  },
  {
    "objectID": "homework/01.html",
    "href": "homework/01.html",
    "title": "Homework 1: Git and Github",
    "section": "",
    "text": "Note: This assignment must be submitted in github classroom."
  },
  {
    "objectID": "homework/01.html#course-overview-and-learning-outcomes",
    "href": "homework/01.html#course-overview-and-learning-outcomes",
    "title": "Homework 1: Git and Github",
    "section": "ü§ì Course overview and learning outcomes",
    "text": "ü§ì Course overview and learning outcomes\nThe goal of this course is to give you a brief introduction to GitHub. We‚Äôll also provide you with materials for further learning and a few ideas to get you started on our platform. üöÄ"
  },
  {
    "objectID": "homework/01.html#git-and-github",
    "href": "homework/01.html#git-and-github",
    "title": "Homework 1: Git and Github",
    "section": "Git and GitHub",
    "text": "Git and GitHub\nGit is a distributed Version Control System (VCS), which means it is a useful tool for easily tracking changes to your code, collaborating, and sharing. With Git you can track the changes you make to your project so you always have a record of what you‚Äôve worked on and can easily revert back to an older version if need be. It also makes working with others easier‚Äîgroups of people can work together on the same project and merge their changes into one final source!\nGitHub is a way to use the same power of Git all online with an easy-to-use interface. It‚Äôs used across the software world and beyond to collaborate and maintain the history of projects.\nGitHub is home to some of the most advanced technologies in the world. Whether you‚Äôre visualizing data or building a new game, there‚Äôs a whole community and set of tools on GitHub that can get you to the next step. This course starts with the basics of GitHub, but we‚Äôll dig into the rest later."
  },
  {
    "objectID": "homework/01.html#understanding-the-github-flow",
    "href": "homework/01.html#understanding-the-github-flow",
    "title": "Homework 1: Git and Github",
    "section": "Understanding the GitHub flow",
    "text": "Understanding the GitHub flow\nThe GitHub flow is a lightweight workflow that allows you to experiment and collaborate on your projects easily, without the risk of losing your previous work.\n\nRepositories\nA repository is where your project work happens‚Äìthink of it as your project folder. It contains all of your project‚Äôs files and revision history. You can work within a repository alone or invite others to collaborate with you on those files.\n\n\nCloning\nWhen a repository is created with GitHub, it‚Äôs stored remotely in the ‚òÅÔ∏è. You can clone a repository to create a local copy on your computer and then use Git to sync the two. This makes it easier to fix issues, add or remove files, and push larger commits. You can also use the editing tool of your choice as opposed to the GitHub UI. Cloning a repository also pulls down all the repository data that GitHub has at that point in time, including all versions of every file and folder for the project! This can be helpful if you experiment with your project and then realize you liked a previous version more. To learn more about cloning, read ‚ÄúCloning a Repository‚Äù.\n\n\nCommitting and pushing\nCommitting and pushing are how you can add the changes you made on your local machine to the remote repository in GitHub. That way your instructor and/or teammates can see your latest work when you‚Äôre ready to share it. You can make a commit when you have made changes to your project that you want to ‚Äúcheckpoint.‚Äù You can also add a helpful commit message to remind yourself or your teammates what work you did (e.g.¬†‚ÄúAdded a README with information about our project‚Äù).\nOnce you have a commit or multiple commits that you‚Äôre ready to add to your repository, you can use the push command to add those changes to your remote repository. Committing and pushing may feel new at first, but we promise you‚Äôll get used to it üôÇ"
  },
  {
    "objectID": "homework/01.html#github-terms-to-know",
    "href": "homework/01.html#github-terms-to-know",
    "title": "Homework 1: Git and Github",
    "section": "üíª GitHub terms to know",
    "text": "üíª GitHub terms to know\n\nRepositories\nWe mentioned repositories already, they are where your project work happens, but let‚Äôs talk a bit more about the details of them! As you work more on GitHub you will have many repositories which may feel confusing at first. Fortunately, your ‚ÄúGitHub dashboard‚Äù helps to easily navigate to your repositories and see useful information about them. Make sure you‚Äôre logged in to see it!\nRepositories also contain READMEs. You can add a README file to your repository to tell other people why your project is useful, what they can do with your project, and how they can use it. We are using this README to communicate how to learn Git and GitHub with you. üòÑ To learn more about repositories read ‚ÄúCreating, Cloning, and Archiving Repositories and ‚ÄúAbout README‚Äôs‚Äù.\n\n\nBranches\nYou can use branches on GitHub to isolate work that you do not want merged into your final project just yet. Branches allow you to develop features, fix bugs, or safely experiment with new ideas in a contained area of your repository. Typically, you might create a new branch from the default branch of your repository‚Äîmain. This makes a new working copy of your repository for you to experiment with. Once your new changes have been reviewed by a teammate, or you are satisfied with them, you can merge your changes into the default branch of your repository. To learn more about branching, read ‚ÄúAbout Branches‚Äù.\nNote: In this class, you will not be required to use branches.\n\n\nForks\nA fork is another way to copy a repository, but is usually used when you want to contribute to someone else‚Äôs project. Forking a repository allows you to freely experiment with changes without affecting the original project and is very popular when contributing to open source software projects! To learn more about forking, read ‚ÄúFork a repo‚Äù\nNote: In this class, you will not be required to use forks.\n\n\nPull requests\nWhen working with branches, you can use a pull request to tell others about the changes you want to make and ask for their feedback. Once a pull request is opened, you can discuss and review the potential changes with collaborators and add more changes if need be. You can add specific people as reviewers of your pull request which shows you want their feedback on your changes! Once a pull request is ready-to-go, it can be merged into your main branch. To learn more about pull requests, read ‚ÄúAbout Pull Requests‚Äù.\nNote: In this course, you will not be required to use pull requests.\n\n\nIssues\nIssues are a way to track enhancements, tasks, or bugs for your work on GitHub. Issues are a great way to keep track of all the tasks you want to work on for your project and let others know what you plan to work on. You can also use issues to tell a favorite open source project about a bug you found or a feature you think would be great to add!\nFor larger projects, you can keep track of many issues on a project board. GitHub Projects help you organize and prioritize your work and you can read more about them in this ‚ÄúAbout Project boards document. You likely won‚Äôt need a project board for your assignments, but once you move on to even bigger projects, they‚Äôre a great way to organize your team‚Äôs work! You can also link together pull requests and issues to show that a fix is in progress and to automatically close the issue when someone merges the pull request. To learn more about issues and linking them to your pull requests, read ‚ÄúAbout Issues‚Äù.\n\n\nYour user profile\nYour profile page tells people the story of your work through the repositories you‚Äôre interested in, the contributions you‚Äôve made, and the conversations you‚Äôve had. You can also give the world a unique view into who you are with your profile README. You can use your profile to let future employers know all about you! To learn more about your user profile and adding and updating your profile README, read ‚ÄúManaging Your Profile README‚Äù.\n\n\nUsing markdown on GitHub\nYou might have noticed already, but you can add some fun styling to your issues, pull requests, and files. ‚ÄúMarkdown‚Äù is an easy way to style your issues, pull requests, and files with some simple syntax. This can be helpful to organize your information and make it easier for others to read. You can also drop in gifs and images to help convey your point! To learn more about using GitHub‚Äôs flavor of markdown, read ‚ÄúBasic Writing and Formatting Syntax‚Äù.\n\n\nEngaging with the GitHub community\nThe GitHub community is vast. There are many types of people who use GitHub in their day to day‚Äîstudents like you, professional developers, hobbyists working on open source projects, and explorers who are just jumping into the world of software development on their own. There are many ways you can interact with the larger GitHub community, but here are three places where you can start.\n\nStarring repositories\nIf you find a repository interesting or you want to keep track of it, star it! When you star a repository it‚Äôs also used as a signal to surface better recommendations on github.com/explore. If you‚Äôd like to get back to your starred repositories you can do so via your user profile. To learn more about starring repositories, read ‚ÄúSaving Repositories with Stars‚Äù.\n\n\nFollowing users\nYou can follow people on GitHub to receive notifications about their activity and discover projects in their communities. When you follow a user, their public GitHub activity will show up on your dashboard so you can see all the cool things they are working on. To learn more about following users, read ‚ÄúFollowing People‚Äù.\n\n\nBrowsing GitHub Explore\nGitHub Explore is a great place to do just that ‚Ä¶ explore :smile: You can find new projects, events, and developers to interact with.\nYou can check out the GitHub Explore website at github.com/explore. The more you intereact with GitHub the more tailored your Explore view will be."
  },
  {
    "objectID": "homework/01.html#next-steps",
    "href": "homework/01.html#next-steps",
    "title": "Homework 1: Git and Github",
    "section": "üìù Next steps",
    "text": "üìù Next steps\n\nClone this repository to your local machine\nOn your local machine, create a new markdown file in this repository named ‚ÄòAbout_Me.md‚Äô. Provide a short biography/introduction for yourself and use markdown formatting\n\nMarkdown Basics provides an overview of different formatting options in markdown.\nYou must use at least the following formatting elements: header, subheader, bold, italic, bulleted list, and an image.\n\nCommit your changes to your new file locally and push them back to your github repository. Check on Github to make sure the new file appears.\nTo get full credit for your assignment, you will need to have worked with your git repository locally. I will be able to see if you have used the github editor to make your changes instead :)."
  },
  {
    "objectID": "homework/01.html#resources",
    "href": "homework/01.html#resources",
    "title": "Homework 1: Git and Github",
    "section": "üìö Resources",
    "text": "üìö Resources\n\nA short video explaining what GitHub is\nGit and GitHub learning resources\nUnderstanding the GitHub flow\nHow to use GitHub branches\nInteractive Git training materials\nGitHub‚Äôs Learning Lab\nEducation community forum\nGitHub community forum"
  },
  {
    "objectID": "homework/01.html#optional-extra-steps",
    "href": "homework/01.html#optional-extra-steps",
    "title": "Homework 1: Git and Github",
    "section": "Optional extra steps",
    "text": "Optional extra steps\n\nOpen a pull request and let your teacher know that you‚Äôve finished this course.\n\nCreate your profile README. Let the world know a little bit more about you! What are you interested in learning? What are you working on? What‚Äôs your favorite hobby? Learn more about creating your profile README in the document, ‚ÄúManaging Your Profile README‚Äù.\nGo to your user dashboard and create a new repository. Experiment with the features within that repository to familiarize yourself with them.\nLet us know what you liked or didn‚Äôt like about the content of this course. What would you like to see more of? What would be interesting or helpful to your learning journey?"
  },
  {
    "objectID": "homework/02.html",
    "href": "homework/02.html",
    "title": "Homework 2: Finding Your Way in R and Python",
    "section": "",
    "text": "Note: This assignment must be submitted in github classroom.\nInstructions: Once you have finished this assignment, render the document (Ctrl/Cmd-Shift-K or the Render button). Commit the qmd file and any other files you have changed to the repository and push your changes.\nIn Canvas, submit a link to your github repository containing the updated files.\nNote: Submitting your link in Canvas lets me know that you are ready for me to grade your homework. You can commit half-finished or not-working homework to GitHub, and it is good practice to commit frequently (at least at the end of each work session)."
  },
  {
    "objectID": "homework/02.html#pythagorean-theorem-in-r",
    "href": "homework/02.html#pythagorean-theorem-in-r",
    "title": "Homework 2: Finding Your Way in R and Python",
    "section": "Pythagorean Theorem in R",
    "text": "Pythagorean Theorem in R\n\\[a^2 + b^2 = c^2\\]\nUse the chunk below to define variables \\(a\\), \\(b\\), and \\(c\\), where you define the values of \\(a\\) and \\(b\\), and \\(c\\) is determined mathematically. You may need to find the square root function in R to make this work.\n\n# Your pythagorean theorem code goes here"
  },
  {
    "objectID": "homework/02.html#quadratic-formula-in-python",
    "href": "homework/02.html#quadratic-formula-in-python",
    "title": "Homework 2: Finding Your Way in R and Python",
    "section": "Quadratic Formula in Python",
    "text": "Quadratic Formula in Python\n\\[x = \\frac{-b \\pm \\sqrt{b^2 - 4ac}}{2a}\\]\nUse the chunk below to define variables \\(a\\), \\(b\\), and \\(c\\), and then define \\(x1\\) and \\(x2\\), the possible values for \\(x\\). You may find it helpful to define a few additional variables, such as the value of the discriminant \\(\\sqrt{b^2 - 4ac}\\), to make it easier to calculate the results.\n\n# Your quadratic formula code goes here"
  },
  {
    "objectID": "homework/03.html",
    "href": "homework/03.html",
    "title": "Homework 3: Fizzbuzz",
    "section": "",
    "text": "Note: This assignment must be submitted in github classroom.\nInstructions:\n\nYou can answer the questions below in either R or Python. I will give you 50% extra credit if you provide answers in both languages. Otherwise, please feel free to delete the code chunks corresponding to the language you don‚Äôt wish to work in.\nOnce you have finished this assignment, render the document (Ctrl/Cmd-Shift-K or the Render button).\nCommit the qmd file and any other files you have changed to the repository and push your changes.\nIn Canvas, submit a link to your github repository containing the updated files.\n\n\nIntroduction to Fizzbuzz\nThe ‚ÄúFizzBuzz Test‚Äù is a famous programming interview question.\n\nWrite a program that prints the numbers from 1 to 30. But for multiples of three print ‚ÄúFizz‚Äù instead of the number and for the multiples of five print ‚ÄúBuzz‚Äù. For numbers which are multiples of both three and five print ‚ÄúFizzBuzz‚Äù\n\nStart by filling in the following table for the numbers 1:30 manually, to get a feel for the task.\n\nFizzbuzz for 1:30\n\n\nInput\nOutput\n\n\n\n\n1\n\n\n\n2\n\n\n\n3\n\n\n\n4\n\n\n\n5\n\n\n\n6\n\n\n\n7\n\n\n\n8\n\n\n\n9\n\n\n\n10\n\n\n\n11\n\n\n\n12\n\n\n\n13\n\n\n\n14\n\n\n\n15\n\n\n\n16\n\n\n\n17\n\n\n\n18\n\n\n\n19\n\n\n\n20\n\n\n\n21\n\n\n\n22\n\n\n\n23\n\n\n\n24\n\n\n\n25\n\n\n\n26\n\n\n\n27\n\n\n\n28\n\n\n\n29\n\n\n\n30\n\n\n\n\nOn paper or using a tool such as excalidraw.com, create a program flow map for the sequence of if-statements you need to evaluate for fizzbuzz. Add the picture to the folder containing this file, and name the picture flowchart.png. Add the picture to Git and commit/push your changes.\n\n\n\nProgram Flow map for FizzBuzz\n\n\nIn the chunk below, write code which will solve this problem for a single value x. You should be able to change the value of x at the top of the chunk and still get the correct answer.\n\nx &lt;- 3\n\n# FizzBuzz code goes here\n\n\nx = 3\n\n# FizzBuzz code goes here\n\nModify the code above so that the result is stored in a value y.\n\nx &lt;- 3\ny &lt;- NA\n# FizzBuzz code goes here\n\n\n\nprint(paste(\"For x = \", x, \" my code produces \", y, sep = \"\"))\n\n[1] \"For x = 3 my code produces NA\"\n\n\n\nimport numpy as np\nx = 3\ny = np.nan\n# FizzBuzz code goes here\n\n\n\nprint(\"For x = \"+ str(x)+ \" my code produces \"+ str(y))\n\nFor x = 3 my code produces nan\n\n\n\n\nA vector of FizzBuzz\nThe code in the previous problem only solves FizzBuzz for a single value of x. Extend your code using a loop so that it will work for all values in a vector xx, storing values in a corresponding vector yy.\nYou can copy/paste code from previous chunks to make this chunk easier.\n\nxx &lt;- 1:30\nyy &lt;- rep(NA, times = 30)\n\n# FizzBuzz code goes here\n\n\n# Printing the results in a data frame\nres &lt;- cbind(x = xx, result = yy)\nres\n\n       x result\n [1,]  1     NA\n [2,]  2     NA\n [3,]  3     NA\n [4,]  4     NA\n [5,]  5     NA\n [6,]  6     NA\n [7,]  7     NA\n [8,]  8     NA\n [9,]  9     NA\n[10,] 10     NA\n[11,] 11     NA\n[12,] 12     NA\n[13,] 13     NA\n[14,] 14     NA\n[15,] 15     NA\n[16,] 16     NA\n[17,] 17     NA\n[18,] 18     NA\n[19,] 19     NA\n[20,] 20     NA\n[21,] 21     NA\n[22,] 22     NA\n[23,] 23     NA\n[24,] 24     NA\n[25,] 25     NA\n[26,] 26     NA\n[27,] 27     NA\n[28,] 28     NA\n[29,] 29     NA\n[30,] 30     NA\n\n\n\nimport pandas as pd\nxx = np.array(range(30)) + 1\nyy = [np.nan]*30\n\n# FizzBuzz code goes here\n\n\n# Printing the results in a data frame\nres = pd.DataFrame({\"x\": xx, \"result\": yy})\nres\n\n     x  result\n0    1     NaN\n1    2     NaN\n2    3     NaN\n3    4     NaN\n4    5     NaN\n5    6     NaN\n6    7     NaN\n7    8     NaN\n8    9     NaN\n9   10     NaN\n10  11     NaN\n11  12     NaN\n12  13     NaN\n13  14     NaN\n14  15     NaN\n15  16     NaN\n16  17     NaN\n17  18     NaN\n18  19     NaN\n19  20     NaN\n20  21     NaN\n21  22     NaN\n22  23     NaN\n23  24     NaN\n24  25     NaN\n25  26     NaN\n26  27     NaN\n27  28     NaN\n28  29     NaN\n29  30     NaN\n\n\n\n\nFunctions and FizzBuzz\nIn the previous question, you extended your fizzbuzz code to iterate through a vector xx and produce a result yy. Can you generalize this, writing a function fizzbuzz that takes a variable x and returns a corresponding fizzbuzzified variable? Your function should be able to handle x that is a vector or a scalar value, and should store your solution in yy.\n\nxx &lt;- sample(1:100, 10) # get a random xx\nyy &lt;- rep(NA, 10)\n\nfizzbuzz &lt;- function(x) {\n  # Your code goes here\n}\n\nyy &lt;- fizzbuzz(x = xx)\n\n# Printing the results in a data frame\nres &lt;- cbind(x = xx, result = yy)\nres\n\n       x\n [1,] 45\n [2,] 83\n [3,]  7\n [4,]  1\n [5,] 56\n [6,] 27\n [7,] 42\n [8,] 70\n [9,] 96\n[10,] 69\n\n\n\nimport pandas as pd\nfrom random import choices\nxx = np.array(choices(range(100), k = 10)) + 1\n\n\ndef fizzbuzz(x):\n  y = [np.nan]*len(x) # this just defines something to return\n  # Your code goes here\n  return y\n\nyy = fizzbuzz(x = xx)\n\n# Printing the results in a data frame\nres = pd.DataFrame({\"x\": xx, \"result\": yy})\nres\n\n    x  result\n0  46     NaN\n1  48     NaN\n2  72     NaN\n3  15     NaN\n4  31     NaN\n5  14     NaN\n6   7     NaN\n7  89     NaN\n8  55     NaN\n9  97     NaN\n\n\n\n\nDefensive Programming\nYou cannot always assume that the person using your functions knows what they‚Äôre doing. Add a check to the function you wrote in the last question so that it will handle non-numeric input by issuing an error message.\nIn R, you can use the function stopifnot() to halt function execution if there is an error; this will give you a basic error message.\n\nstopifnot(2 &gt; 3)\n\nError: 2 &gt; 3 is not TRUE\n\n\nIn Python, you can use a try: statement with a except: clause. This functions like an if-else statement, where if no error occurs, the except statement is never executed.\n\ntry: \n  int(\"hello\")\nexcept ValueError: \n  print(\"Error: could not turn value into an integer\")\n\nError: could not turn value into an integer\n\n\nSee more examples of this in the Input Validation section of the textbook.\n\nxx &lt;- sample(1:100, 10) # get a random xx\nyy &lt;- rep(NA, 10)\n\nfizzbuzz &lt;- function(x) {\n  # Your code goes here\n}\n\nyy &lt;- fizzbuzz(x = xx)\n\n# Printing the results in a data frame\nres &lt;- cbind(x = xx, result = yy)\nres\n\n       x\n [1,] 23\n [2,] 17\n [3,] 90\n [4,] 64\n [5,] 63\n [6,] 85\n [7,] 87\n [8,] 73\n [9,]  9\n[10,] 54\n\n\n\nimport pandas as pd\nfrom random import choices\nxx = np.array(choices(range(100), k = 10)) + 1\n\n\ndef fizzbuzz(x):\n  y = [np.nan]*len(x) # this just defines something to return\n  # Your code goes here\n  return y\n\nyy = fizzbuzz(x = xx)\n\n# Printing the results in a data frame\nres = pd.DataFrame({\"x\": xx, \"result\": yy})\nres\n\n    x  result\n0  94     NaN\n1  94     NaN\n2  55     NaN\n3  84     NaN\n4   1     NaN\n5  20     NaN\n6  43     NaN\n7  56     NaN\n8  82     NaN\n9  94     NaN"
  },
  {
    "objectID": "homework/hearts.html",
    "href": "homework/hearts.html",
    "title": "Homework 11: Simulation",
    "section": "",
    "text": "In this task, you will create a simulation of Hearts, a card game which is played with 52 cards.\nYou may also work with a different game if you get approval from me before you start. You may want to avoid games which require a large amount of strategy, skill, and bluffing, such as poker.\nThis homework file is set up to demonstrate how this would be done with the game of hearts.\nYou don‚Äôt need to necessarily simulate the full game mechanism, but you do need to implement enough of the game mechanism that you can identify an interesting probability question and answer the question using a simulation.\n\n\n\n\n\n\n\n\nNote\n\n\n\nGuidelines:\n\nYour question should be something that is not easily answerable with obviously constructed probability calculations.\nSome options include: - Compute the probability of going bust given that you have N cards in your hand. (You can ignore the rules about splitting your hand if you get two cards of the same denomination) - Compute the probability of going bust given that your original two cards total 9, 10, or 11 (doubling down) - Compare the probability of going bust with N cards in your hand if one of the cards you were originally dealt was an Ace (which can count as 1 or 11) vs.¬†if you know that you do not have an Ace. - Evaluate two competing strategies for Blackjack to see which one has a higher success probability. - Compare strategies for Blackjack with strategies for a similar card game (31), in which the player only goes bust when the cards total more than 31.\n\nYou are not limited to the options above, but your question must be complex enough that it would require a simulation of the game‚Äôs mechanics beyond the initial shuffle.\n\n\nBefore I explain my question, a quick story:\nWhen my parents taught us hearts (I was about 11, my sister would have been 9), the first time we played they taught us simplified rules:\n\ntry to get the fewest hearts\nthe person with the most hearts gets the highest score (low is good)\ntry to avoid the queen of spades, because that‚Äôs 13 points.\n\nThey didn‚Äôt mention the fact that if you got all the hearts and the queen of spades, you ‚Äúshot the moon‚Äù and scored 0, and everyone else got 26 points. During that first game, I was trying as hard as I could, and I kept getting hearts! By the end of the round, I was trying very hard not to cry, only to find out that I‚Äôd shot the moon and everyone else got all of the points - I was in the lead! It was a very confusing game.\nFundamentally, my question is: What is the probability that a player using relatively little (no) strategy accidentally ‚Äúshoots the moon‚Äù in a game of hearts?\n\n\n\n\n\n\n\n\n\nCaution\n\n\n\nThink very carefully about how you want to set up your simulation. It is almost always easier to describe the position of all of the cards in the deck using a single data frame than it is to maintain separate data frames of multiple cards for each player and for the discard pile and undealt cards.\n\n\nFirst, you must set up a data frame describing all possible values of your playing items. A standard deck of 52 playing cards might be described using a data frame which has columns for suit and value, and you may want to make value a factor variable (your call on that one). If your game requires that players hold cards in their hand, you may also want to have a column indicating location (deck, discard, player_x).\n\n\n\nPseudocode: Set up objects\n\nCreate a tibble with 4 suits and 13 values labeled \n    Ace, 2:10, J, Q, K\nAdd point values\nAdd card ID numbers\n(Eventually) add location column - defer to a later step\nRemove any cards from the deck not necessary for game play\n\n\n\n\ncreate_deck &lt;- function() {\n  # Set up cards\n  suits &lt;- c(\"hearts\", \"diamonds\", \"spades\", \"clubs\")\n  \n  values &lt;- factor(1:13, labels = c(2:10, \"Jack\", \"Queen\", \"King\", \"Ace\"))\n  deck &lt;- crossing(suit = suits, value = values)\n\n  # Set up points\n  # This will change depending on which game you want to simulate\n  # I have demonstrated this using hearts \n  deck %&gt;%\n    mutate(points = (suit == \"hearts\") +\n             13*(suit == \"spades\" & value == \"Queen\")) %&gt;%\n    # add a card ID\n    mutate(id = 1:n())\n}\n\ncreate_deck()\n\n# A tibble: 52 √ó 4\n   suit  value points    id\n   &lt;chr&gt; &lt;fct&gt;  &lt;dbl&gt; &lt;int&gt;\n 1 clubs 2          0     1\n 2 clubs 3          0     2\n 3 clubs 4          0     3\n 4 clubs 5          0     4\n 5 clubs 6          0     5\n 6 clubs 7          0     6\n 7 clubs 8          0     7\n 8 clubs 9          0     8\n 9 clubs 10         0     9\n10 clubs Jack       0    10\n# ‚Ñπ 42 more rows\n\n\nI‚Äôve created a standard deck of cards, and assigned each card the point value it has when scoring a game of hearts.\nIn the Bicycle rules, there are specific cards which are removed if there are 3 or 5 players (to make sure there are an even number of cards for each player). I‚Äôm deviating slightly from those rules so that the 2 of clubs is always available (this makes my life easier), but the fundamentals are the same.\n\ndeck_fix &lt;- function(deck = create_deck(), n_players = 4) {\n\n  # Remove cards from deck to make the game playable by 3 or 5 players\n  if (n_players == 4) {\n    # do nothing special\n  } else if (n_players == 3) {\n    deck &lt;- deck %&gt;%\n      filter(!(suit == \"diamonds\" & value == \"2\"))\n  } else if (n_players == 5) {\n    deck &lt;- deck %&gt;%\n      filter(!(suit %in% c(\"diamonds\", \"spades\") & value == \"2\"))\n  } else {\n    stop(\"Hearts is playable by between 3 and 5 players\")\n  }\n\n  deck\n}\n\ncreate_deck() %&gt;%\n  deck_fix(n_players = 3) %&gt;%\n  arrange(value, suit)\n\n# A tibble: 51 √ó 4\n   suit     value points    id\n   &lt;chr&gt;    &lt;fct&gt;  &lt;dbl&gt; &lt;int&gt;\n 1 clubs    2          0     1\n 2 hearts   2          1    27\n 3 spades   2          0    40\n 4 clubs    3          0     2\n 5 diamonds 3          0    15\n 6 hearts   3          1    28\n 7 spades   3          0    41\n 8 clubs    4          0     3\n 9 diamonds 4          0    16\n10 hearts   4          1    29\n# ‚Ñπ 41 more rows\n\n\n\n\n\n\n\n\n\n\n\n\nCaution\n\n\n\nNote that this pseudocode should be written focused on how you will record the game‚Äôs progression in a computer simulation. It‚Äôs relatively easy to write pseudo‚Äùcode‚Äù to describe the instructions for playing the game, but it‚Äôs entirely a different thing to write pseudocode for how to simulate gameplay computationally.\nSee hearts.qmd for an example of the level of detail I‚Äôm looking for here.\n\n\n\nFull game: \n1. Deal Cards\n2. Play the first trick\n    1. The player with the 2 of clubs starts\n    2. Each player must select a card (see function below)\n3. Play 12 more tricks (mostly, this is a repeat of step 2, but the first player selects a random card instead of the 2 of clubs)\n    1. Each player must select a card\n    2. The trick must be evaluated to determine which player keeps the cards\n4. Determine the game score by counting up the value of the hearts and queen of spades cards in each hand. Lowest score wins.\n\nCard selection: \n1. If the player has any cards in suit, they must select one of those cards\n2. If a card in suit isn't available, the player may select an out of suit card. Hearts cannot be played until the suit is \"broken\" or there is no other option.\n    1. Determine set of cards available to select from (see Available card function)\n    2. Randomly select a card from available options\n    \nAvailable cards: \n    1. Check if hearts have been broken \n        - if not, check if other cards are available\n            - if other cards are available, remove all hearts from the \"options\"\n        - return available cards data frame\n\n\n\n\n\n\n\n\n\n\ndeal_cards &lt;- function(deck, players = 1:4) {\n  deck %&gt;%\n    # Fix the deck\n    deck_fix(n_players = length(players)) %&gt;%\n    # shuffle the rows\n    slice_sample(n = nrow(deck)) %&gt;%\n    # Assign cards to players one-by-one\n    mutate(player = rep(players, length.out = n())) %&gt;%\n    # Sort deck by player, suit, and value\n    arrange(player, suit, value)\n}\n\ncreate_deck() %&gt;%\n  deal_cards(players = c(\"Amy\", \"Joe\", \"Sarah\", \"Bill\")) %&gt;%\n  group_by(player) %&gt;%\n  count()\n\n# A tibble: 4 √ó 2\n# Groups:   player [4]\n  player     n\n  &lt;chr&gt;  &lt;int&gt;\n1 Amy       13\n2 Bill      13\n3 Joe       13\n4 Sarah     13\n\n\n\n\n\nNext, we need to handle how a player would select a card. We‚Äôre going to ignore any sort of logic that would depend on cards played by previous players in the same trick (or previous tricks).\nI‚Äôm simulating my siblings and I playing this game when I was at most 11 (and I was the oldest), so it‚Äôs a 100% safe assumption that our logical skills were ‚Ä¶ sub optimal.\nIn Hearts, like in many other trick-based games, you have certain rules that must be followed, like matching suits.\n\n# Check whether there's a card in the selected suit\npick_card_in_suit &lt;- function(cards, sel_suit = NA) {\n  # if sel_suit is NA, this will return nothing\n  valid &lt;- filter(cards, suit == sel_suit) \n  \n  if (nrow(valid) &gt; 0) {\n    slice_sample(valid, n = 1)\n  } else {\n    valid\n  }\n}\n\nIn addition, hearts requires that if no point cards have been played yet, you must select a card which is not a point card (so something other than a heart or the queen of spades) if you have the option to do so.\nWe handle this using the hearts_available parameter, which describes whether point cards have been played. If hearts aren‚Äôt available, and there are other suits in the set of cards, we will pick a non-heart card.\n\n# Check whether there's a card in another suit\npick_card_out_suit &lt;- function(cards, hearts_avail = F) {\n  if (is.na(hearts_avail)) stop(\"hearts_avail cannot be NA\")\n  card_options &lt;- cards\n\n  nonhearts &lt;- any(cards$suit != \"hearts\")\n\n  # If hearts aren't available and there are other suits,\n  # filter out the hearts\n  # Note that this still allows the Queen of Spades to \n  # be played at any time (which then makes hearts available)\n  if (nonhearts & !hearts_avail) {\n    card_options &lt;- cards %&gt;% filter(suit != \"hearts\")\n  }\n\n  # print(card_options)\n  slice_sample(card_options, n = 1)\n}\n\n(This logic caused 90% of the trouble I had with this game simulation)\nNow that we have that, we can write a function that will take a set of cards, and pick a card for a given player in the selected suit (if provided).\n\npick_card &lt;- function(deck,\n                      this_player = NA,\n                      sel_suit = NA,\n                      hearts_avail = F) {\n  if (!is.na(this_player)) {\n    options &lt;- filter(deck, player %in% this_player)\n  } else {\n    options &lt;- deck\n  }\n\n  play &lt;- bind_rows(\n    # First, try to pick something in suit\n    pick_card_in_suit(options, sel_suit = sel_suit),\n    # Then if that fails pick something out of suit\n    pick_card_out_suit(options, hearts_avail = hearts_avail)\n  )\n\n  # Take the first row - in-suit if it's available, out-of-suit otherwise\n  play[1,]\n}\n\n\n\n\nThe first trick is a bit different, logic wise. The person with the 2 of clubs leads (in other tricks, it‚Äôs the person who took the previous trick).\nTo make this function a bit easier to use, I‚Äôve created a couple of helper functions that can be re-used in any trick:\n\n# Evaluate a played trick, adding columns for trick_order, in_suit, player_win, and trick number\neval_trick &lt;- function(cards, spec_suit, trick_num = NA) {\n  # Note that trick order is likely to be wrong for the first trick,\n  # but this isn't critical - it just helps keep track of things.\n  cards %&gt;%\n    mutate(trick_order = 1:n()) %&gt;%\n    mutate(in_suit = suit == spec_suit) %&gt;%\n    arrange(desc(in_suit), desc(value)) %&gt;%\n    mutate(player_win = .$player[1]) %&gt;%\n    arrange(trick_order) %&gt;%\n    mutate(trick = trick_num)\n}\n\n# Remove cards from deck that have been played and bind on as a played trick\nfix_deck &lt;- function(dealt, trick) {\n  dealt %&gt;%\n    anti_join(trick, by = c(\"suit\", \"value\", \"player\", \"id\")) %&gt;%\n    bind_rows(trick)\n}\n\nThis leads to the code for the first trick:\n\nfirst_trick &lt;- function(dealt) {\n  # Which player has 2 of clubs?\n  first_card &lt;- dealt %&gt;%\n    filter(suit == \"clubs\" & value == \"2\")\n\n  remaining_players &lt;- unique(dealt$player) %&gt;%\n    setdiff(first_card$player)\n\n  play &lt;- first_card\n  for (i in remaining_players) {\n    play &lt;- dealt %&gt;%\n      filter(player == i) %&gt;%\n      pick_card(sel_suit = \"clubs\") %&gt;%\n      bind_rows(play)\n  }\n  play &lt;- play %&gt;%\n    eval_trick(spec_suit = \"clubs\",\n               trick_num = 1)\n\n  if (!all(dealt$player %in% play$player)) {\n    stop(\"Not all players picked cards?\")\n  }\n\n  fix_deck(dealt, play)\n}\n\n\n\n\nThe same basic logic applies in any trick - the first card is picked, and then all other players throw in a card. We do need a hearts_playable function that will evaluate our deck to see if hearts is an option; once we have that, we can write a general trick-playing function.\n\nhearts_playable &lt;- function(df) {\n  sum(df$points, na.rm = T) &gt; 0\n}\n\nNotice that we‚Äôre calling the first_trick function within the more general play_trick function - this makes it much easier to remember the syntax.\n\nplay_trick &lt;- function(dealt) {\n  if (!\"trick\" %in% names(dealt)) {\n    return(first_trick(dealt))\n  }\n\n  # get empty df\n  play &lt;- filter(dealt, id &lt; 0)\n\n  # get trick number\n  trick_num &lt;- (1 + dealt$trick) %&gt;% max(na.rm = T)\n\n  # get player to lead\n  avail &lt;- filter(dealt, is.na(trick))\n  last_player &lt;- filter(dealt, trick == max(trick, na.rm = T)) %&gt;%\n    pluck(\"player_win\") %&gt;%\n    unique()\n\n  # get already played cards and see if hearts can be played\n  already_played &lt;- anti_join(dealt, avail, by = c(\"suit\", \"value\"))\n  can_play_hearts &lt;- bind_rows(already_played, play) %&gt;%\n    hearts_playable()\n\n  # pick first card\n  play &lt;- pick_card(avail,\n                    this_player = last_player,\n                    sel_suit = NA,\n                    hearts_avail = can_play_hearts)\n\n  # pick remaining cards\n  remaining_players &lt;- unique(dealt$player) %&gt;%\n    setdiff(last_player)\n  for (i in remaining_players) {\n    can_play_hearts &lt;- bind_rows(already_played, play) %&gt;%\n      hearts_playable()\n    play &lt;- bind_rows(\n      play,\n      pick_card(avail, this_player = i,\n                sel_suit = play$suit[1],\n                hearts_avail = can_play_hearts)\n    )\n  }\n\n  # evaluate the trick\n  play &lt;- play %&gt;%\n    eval_trick(spec_suit = play$suit[1], trick_num)\n\n  # remove trick from deck and add it back in as a played trick\n  fix_deck(dealt, play)\n}\n\ncreate_deck() %&gt;%\ndeal_cards(players = c(\"Amy\", \"Joe\", \"Sarah\", \"Bill\")) %&gt;%\nplay_trick() %&gt;%\nplay_trick() %&gt;%\nfilter(!is.na(trick)) # first 2 tricks in a game\n\n# A tibble: 8 √ó 9\n  suit     value points    id player trick_order in_suit player_win trick\n  &lt;chr&gt;    &lt;fct&gt;  &lt;dbl&gt; &lt;int&gt; &lt;chr&gt;        &lt;int&gt; &lt;lgl&gt;   &lt;chr&gt;      &lt;dbl&gt;\n1 clubs    10         0     9 Sarah            1 TRUE    Sarah          1\n2 clubs    3          0     2 Bill             2 TRUE    Sarah          1\n3 clubs    4          0     3 Amy              3 TRUE    Sarah          1\n4 clubs    2          0     1 Joe              4 TRUE    Sarah          1\n5 diamonds 3          0    15 Sarah            1 TRUE    Amy            2\n6 diamonds 8          0    20 Amy              2 TRUE    Amy            2\n7 spades   Jack       0    49 Bill             3 FALSE   Amy            2\n8 diamonds 6          0    18 Joe              4 TRUE    Amy            2\n\n\n\n\n\nNow, we can play a full game of hearts by repeatedly calling the play_trick function. All of the cards stay in the same data frame, and we keep track of who won each trick and who played each card - this allows us to calculate the score for each player at the end.\n\nhearts &lt;- function(players) {\n  deck &lt;- create_deck() %&gt;%\n    deal_cards(players)\n\n  number_of_rounds &lt;- nrow(deck)/length(players)\n\n  for (i in 1:number_of_rounds) {\n    # print(i)\n    deck &lt;- play_trick(deck)\n    # print(filter(deck, trick == i))\n  }\n\n  return(deck)\n}\n\nhearts(c(\"Amy\", \"Beth\", \"Cara\", \"Dawn\"))\n\n# A tibble: 52 √ó 9\n   suit   value points    id player trick_order in_suit player_win trick\n   &lt;chr&gt;  &lt;fct&gt;  &lt;dbl&gt; &lt;int&gt; &lt;chr&gt;        &lt;int&gt; &lt;lgl&gt;   &lt;chr&gt;      &lt;dbl&gt;\n 1 clubs  5          0     4 Dawn             1 TRUE    Cara           1\n 2 clubs  6          0     5 Cara             2 TRUE    Cara           1\n 3 clubs  4          0     3 Amy              3 TRUE    Cara           1\n 4 clubs  2          0     1 Beth             4 TRUE    Cara           1\n 5 spades Jack       0    49 Cara             1 TRUE    Beth           2\n 6 spades 5          0    43 Amy              2 TRUE    Beth           2\n 7 spades Ace        0    52 Beth             3 TRUE    Beth           2\n 8 spades Queen     13    50 Dawn             4 TRUE    Beth           2\n 9 spades 3          0    41 Beth             1 TRUE    Cara           3\n10 spades 7          0    45 Amy              2 TRUE    Cara           3\n# ‚Ñπ 42 more rows\n\n\n\n\n\nIt‚Äôs pretty easy given our setup to calculate each player‚Äôs score:\n\ncalc_score &lt;- function(data) {\n  game &lt;- data %&gt;%\n    group_by(player) %&gt;%\n    summarize(score = sum(points), .groups = \"drop\")\n  \n  # Handle the \"shoot the moon\" scenario \n  # where one player has all the points\n  if (any(game$score == 26)) {\n    game &lt;- game %&gt;%\n      mutate(score = 26 - score)\n  }\n  game\n}\n\n\nhearts(c(\"Amy\", \"Beth\", \"Cara\", \"Dawn\")) %&gt;%\n  calc_score()\n\n# A tibble: 4 √ó 2\n  player score\n  &lt;chr&gt;  &lt;dbl&gt;\n1 Amy        5\n2 Beth      14\n3 Cara       4\n4 Dawn       3\n\n\n\n\n\nIn a shoot the moon scenario, the total game points will be (n-1) times normal, where \\(n\\) is the number of players. This function returns a logical indicator of whether or not the total number of points generated is more than 26 (indicating that someone shot the moon)\n\nshoot_the_moon &lt;- function(data) {\n  sum(data$score) &gt; 26\n}\n\n\n\n\n\n\n\n\n# I'm saving the results of this so that I only \n# have to run it once...\n\n# This uses parallel processing to take advantage of the \n# fact that I wrote this on a server with 16 cores and \n# a lot of memory.\n# May as well use the power if you have the option!\nlibrary(parallel)\nset.seed(34029)\n#... then parallel replicate...\ngames &lt;- mclapply(1:10000, FUN = function(i) { hearts(c(\"Susan\", \"Caroline\", \"Mom\", \"Dad\")) }, mc.preschedule = F, mc.set.seed = T, mc.cores = 16, mc.cleanup = T)\n\nsave(games, file = \"games.Rdata\")\n\n\nload(\"games.Rdata\")\nres &lt;- tibble(\n  full_game = games, \n  score = purrr::map(full_game, calc_score),\n  stm = purrr::map_lgl(score, shoot_the_moon)\n)\n\nFrom this assessment, one player shoots the moon in approximately 0.00% of games played using the naive strategy. My parents were probably pretty reasonably assuming that they could explain that part of the strategy later, once we‚Äôd grasped the fundamentals of the game.\nThere are a couple of other options to consider - my simulation may not exactly model reality because of the assumption that all players were acting randomly:\n\n(The most likely) I‚Äôve simulated 4 players randomly playing hearts, but in the game that motivated the question, my parents actually knew what they were doing. If two players were strategizing, and two players were playing randomly, it might be more likely for someone to end up with all of the high point cards because two of the players were good enough to avoid them; the remaining point cards were randomly distributed. This seems like a more likely scenario to me.\n(Less likely) By trying to strategize (and failing) I unintentionally shot the moon - that is, I‚Äôve simulated randomness, but that‚Äôs not necessarily accurate - my strategy could have been worse than random guessing, making this simulation somewhat useless.\n\nI wish I had time to add in some strategy component, but I think at this point that would be excessive. While the simulation is a useful benchmark, it doesn‚Äôt completely describe the whole situation ‚Äì which is pretty typical!\nNote that we can compute other interesting quantities from our simulated set of games, such as the total proportion of points on the board once there \\(x\\) tricks played.\n\npoints_trick_cumulative &lt;- function(game) {\n  game %&gt;%\n    group_by(trick) %&gt;%\n    summarize(points = sum(points))\n}\n\nlibrary(parallel)\npoints_cumulative &lt;- res %&gt;%\n  select(full_game) %&gt;%\n  mutate(tmp = mclapply(full_game, points_trick_cumulative, mc.cores = 16)) \n\npoints_cumulative %&gt;%\n  mutate(id = 1:n()) %&gt;%\n  unnest(tmp) %&gt;%\n  group_by(id) %&gt;%\n  mutate(points_played = cumsum(points),\n         point_pct = points_played/sum(points)) %&gt;%\n  ggplot(aes(x = factor(trick), y = points_played)) + \n  geom_violin(scale = \"width\") + \n  xlab(\"Trick\") + ylab(\"Points played\") + \n  geom_smooth(aes(x = trick), method = \"gam\", se = F)\n\n`geom_smooth()` using formula = 'y ~ s(x, bs = \"cs\")'\n\n\n\n\n\nIn most games, the Queen of Spades is played first, resulting in a 13-point jump. Then, the remaining hearts are played. By the end of the game, there are usually only a few hearts remaining, leading to very interesting looking violin plots."
  },
  {
    "objectID": "homework/hearts.html#is-it-in-the-cards",
    "href": "homework/hearts.html#is-it-in-the-cards",
    "title": "Homework 11: Simulation",
    "section": "",
    "text": "In this task, you will create a simulation of Hearts, a card game which is played with 52 cards.\nYou may also work with a different game if you get approval from me before you start. You may want to avoid games which require a large amount of strategy, skill, and bluffing, such as poker.\nThis homework file is set up to demonstrate how this would be done with the game of hearts.\nYou don‚Äôt need to necessarily simulate the full game mechanism, but you do need to implement enough of the game mechanism that you can identify an interesting probability question and answer the question using a simulation.\n\n\n\n\n\n\n\n\nNote\n\n\n\nGuidelines:\n\nYour question should be something that is not easily answerable with obviously constructed probability calculations.\nSome options include: - Compute the probability of going bust given that you have N cards in your hand. (You can ignore the rules about splitting your hand if you get two cards of the same denomination) - Compute the probability of going bust given that your original two cards total 9, 10, or 11 (doubling down) - Compare the probability of going bust with N cards in your hand if one of the cards you were originally dealt was an Ace (which can count as 1 or 11) vs.¬†if you know that you do not have an Ace. - Evaluate two competing strategies for Blackjack to see which one has a higher success probability. - Compare strategies for Blackjack with strategies for a similar card game (31), in which the player only goes bust when the cards total more than 31.\n\nYou are not limited to the options above, but your question must be complex enough that it would require a simulation of the game‚Äôs mechanics beyond the initial shuffle.\n\n\nBefore I explain my question, a quick story:\nWhen my parents taught us hearts (I was about 11, my sister would have been 9), the first time we played they taught us simplified rules:\n\ntry to get the fewest hearts\nthe person with the most hearts gets the highest score (low is good)\ntry to avoid the queen of spades, because that‚Äôs 13 points.\n\nThey didn‚Äôt mention the fact that if you got all the hearts and the queen of spades, you ‚Äúshot the moon‚Äù and scored 0, and everyone else got 26 points. During that first game, I was trying as hard as I could, and I kept getting hearts! By the end of the round, I was trying very hard not to cry, only to find out that I‚Äôd shot the moon and everyone else got all of the points - I was in the lead! It was a very confusing game.\nFundamentally, my question is: What is the probability that a player using relatively little (no) strategy accidentally ‚Äúshoots the moon‚Äù in a game of hearts?\n\n\n\n\n\n\n\n\n\nCaution\n\n\n\nThink very carefully about how you want to set up your simulation. It is almost always easier to describe the position of all of the cards in the deck using a single data frame than it is to maintain separate data frames of multiple cards for each player and for the discard pile and undealt cards.\n\n\nFirst, you must set up a data frame describing all possible values of your playing items. A standard deck of 52 playing cards might be described using a data frame which has columns for suit and value, and you may want to make value a factor variable (your call on that one). If your game requires that players hold cards in their hand, you may also want to have a column indicating location (deck, discard, player_x).\n\n\n\nPseudocode: Set up objects\n\nCreate a tibble with 4 suits and 13 values labeled \n    Ace, 2:10, J, Q, K\nAdd point values\nAdd card ID numbers\n(Eventually) add location column - defer to a later step\nRemove any cards from the deck not necessary for game play\n\n\n\n\ncreate_deck &lt;- function() {\n  # Set up cards\n  suits &lt;- c(\"hearts\", \"diamonds\", \"spades\", \"clubs\")\n  \n  values &lt;- factor(1:13, labels = c(2:10, \"Jack\", \"Queen\", \"King\", \"Ace\"))\n  deck &lt;- crossing(suit = suits, value = values)\n\n  # Set up points\n  # This will change depending on which game you want to simulate\n  # I have demonstrated this using hearts \n  deck %&gt;%\n    mutate(points = (suit == \"hearts\") +\n             13*(suit == \"spades\" & value == \"Queen\")) %&gt;%\n    # add a card ID\n    mutate(id = 1:n())\n}\n\ncreate_deck()\n\n# A tibble: 52 √ó 4\n   suit  value points    id\n   &lt;chr&gt; &lt;fct&gt;  &lt;dbl&gt; &lt;int&gt;\n 1 clubs 2          0     1\n 2 clubs 3          0     2\n 3 clubs 4          0     3\n 4 clubs 5          0     4\n 5 clubs 6          0     5\n 6 clubs 7          0     6\n 7 clubs 8          0     7\n 8 clubs 9          0     8\n 9 clubs 10         0     9\n10 clubs Jack       0    10\n# ‚Ñπ 42 more rows\n\n\nI‚Äôve created a standard deck of cards, and assigned each card the point value it has when scoring a game of hearts.\nIn the Bicycle rules, there are specific cards which are removed if there are 3 or 5 players (to make sure there are an even number of cards for each player). I‚Äôm deviating slightly from those rules so that the 2 of clubs is always available (this makes my life easier), but the fundamentals are the same.\n\ndeck_fix &lt;- function(deck = create_deck(), n_players = 4) {\n\n  # Remove cards from deck to make the game playable by 3 or 5 players\n  if (n_players == 4) {\n    # do nothing special\n  } else if (n_players == 3) {\n    deck &lt;- deck %&gt;%\n      filter(!(suit == \"diamonds\" & value == \"2\"))\n  } else if (n_players == 5) {\n    deck &lt;- deck %&gt;%\n      filter(!(suit %in% c(\"diamonds\", \"spades\") & value == \"2\"))\n  } else {\n    stop(\"Hearts is playable by between 3 and 5 players\")\n  }\n\n  deck\n}\n\ncreate_deck() %&gt;%\n  deck_fix(n_players = 3) %&gt;%\n  arrange(value, suit)\n\n# A tibble: 51 √ó 4\n   suit     value points    id\n   &lt;chr&gt;    &lt;fct&gt;  &lt;dbl&gt; &lt;int&gt;\n 1 clubs    2          0     1\n 2 hearts   2          1    27\n 3 spades   2          0    40\n 4 clubs    3          0     2\n 5 diamonds 3          0    15\n 6 hearts   3          1    28\n 7 spades   3          0    41\n 8 clubs    4          0     3\n 9 diamonds 4          0    16\n10 hearts   4          1    29\n# ‚Ñπ 41 more rows\n\n\n\n\n\n\n\n\n\n\n\n\nCaution\n\n\n\nNote that this pseudocode should be written focused on how you will record the game‚Äôs progression in a computer simulation. It‚Äôs relatively easy to write pseudo‚Äùcode‚Äù to describe the instructions for playing the game, but it‚Äôs entirely a different thing to write pseudocode for how to simulate gameplay computationally.\nSee hearts.qmd for an example of the level of detail I‚Äôm looking for here.\n\n\n\nFull game: \n1. Deal Cards\n2. Play the first trick\n    1. The player with the 2 of clubs starts\n    2. Each player must select a card (see function below)\n3. Play 12 more tricks (mostly, this is a repeat of step 2, but the first player selects a random card instead of the 2 of clubs)\n    1. Each player must select a card\n    2. The trick must be evaluated to determine which player keeps the cards\n4. Determine the game score by counting up the value of the hearts and queen of spades cards in each hand. Lowest score wins.\n\nCard selection: \n1. If the player has any cards in suit, they must select one of those cards\n2. If a card in suit isn't available, the player may select an out of suit card. Hearts cannot be played until the suit is \"broken\" or there is no other option.\n    1. Determine set of cards available to select from (see Available card function)\n    2. Randomly select a card from available options\n    \nAvailable cards: \n    1. Check if hearts have been broken \n        - if not, check if other cards are available\n            - if other cards are available, remove all hearts from the \"options\"\n        - return available cards data frame\n\n\n\n\n\n\n\n\n\n\ndeal_cards &lt;- function(deck, players = 1:4) {\n  deck %&gt;%\n    # Fix the deck\n    deck_fix(n_players = length(players)) %&gt;%\n    # shuffle the rows\n    slice_sample(n = nrow(deck)) %&gt;%\n    # Assign cards to players one-by-one\n    mutate(player = rep(players, length.out = n())) %&gt;%\n    # Sort deck by player, suit, and value\n    arrange(player, suit, value)\n}\n\ncreate_deck() %&gt;%\n  deal_cards(players = c(\"Amy\", \"Joe\", \"Sarah\", \"Bill\")) %&gt;%\n  group_by(player) %&gt;%\n  count()\n\n# A tibble: 4 √ó 2\n# Groups:   player [4]\n  player     n\n  &lt;chr&gt;  &lt;int&gt;\n1 Amy       13\n2 Bill      13\n3 Joe       13\n4 Sarah     13\n\n\n\n\n\nNext, we need to handle how a player would select a card. We‚Äôre going to ignore any sort of logic that would depend on cards played by previous players in the same trick (or previous tricks).\nI‚Äôm simulating my siblings and I playing this game when I was at most 11 (and I was the oldest), so it‚Äôs a 100% safe assumption that our logical skills were ‚Ä¶ sub optimal.\nIn Hearts, like in many other trick-based games, you have certain rules that must be followed, like matching suits.\n\n# Check whether there's a card in the selected suit\npick_card_in_suit &lt;- function(cards, sel_suit = NA) {\n  # if sel_suit is NA, this will return nothing\n  valid &lt;- filter(cards, suit == sel_suit) \n  \n  if (nrow(valid) &gt; 0) {\n    slice_sample(valid, n = 1)\n  } else {\n    valid\n  }\n}\n\nIn addition, hearts requires that if no point cards have been played yet, you must select a card which is not a point card (so something other than a heart or the queen of spades) if you have the option to do so.\nWe handle this using the hearts_available parameter, which describes whether point cards have been played. If hearts aren‚Äôt available, and there are other suits in the set of cards, we will pick a non-heart card.\n\n# Check whether there's a card in another suit\npick_card_out_suit &lt;- function(cards, hearts_avail = F) {\n  if (is.na(hearts_avail)) stop(\"hearts_avail cannot be NA\")\n  card_options &lt;- cards\n\n  nonhearts &lt;- any(cards$suit != \"hearts\")\n\n  # If hearts aren't available and there are other suits,\n  # filter out the hearts\n  # Note that this still allows the Queen of Spades to \n  # be played at any time (which then makes hearts available)\n  if (nonhearts & !hearts_avail) {\n    card_options &lt;- cards %&gt;% filter(suit != \"hearts\")\n  }\n\n  # print(card_options)\n  slice_sample(card_options, n = 1)\n}\n\n(This logic caused 90% of the trouble I had with this game simulation)\nNow that we have that, we can write a function that will take a set of cards, and pick a card for a given player in the selected suit (if provided).\n\npick_card &lt;- function(deck,\n                      this_player = NA,\n                      sel_suit = NA,\n                      hearts_avail = F) {\n  if (!is.na(this_player)) {\n    options &lt;- filter(deck, player %in% this_player)\n  } else {\n    options &lt;- deck\n  }\n\n  play &lt;- bind_rows(\n    # First, try to pick something in suit\n    pick_card_in_suit(options, sel_suit = sel_suit),\n    # Then if that fails pick something out of suit\n    pick_card_out_suit(options, hearts_avail = hearts_avail)\n  )\n\n  # Take the first row - in-suit if it's available, out-of-suit otherwise\n  play[1,]\n}\n\n\n\n\nThe first trick is a bit different, logic wise. The person with the 2 of clubs leads (in other tricks, it‚Äôs the person who took the previous trick).\nTo make this function a bit easier to use, I‚Äôve created a couple of helper functions that can be re-used in any trick:\n\n# Evaluate a played trick, adding columns for trick_order, in_suit, player_win, and trick number\neval_trick &lt;- function(cards, spec_suit, trick_num = NA) {\n  # Note that trick order is likely to be wrong for the first trick,\n  # but this isn't critical - it just helps keep track of things.\n  cards %&gt;%\n    mutate(trick_order = 1:n()) %&gt;%\n    mutate(in_suit = suit == spec_suit) %&gt;%\n    arrange(desc(in_suit), desc(value)) %&gt;%\n    mutate(player_win = .$player[1]) %&gt;%\n    arrange(trick_order) %&gt;%\n    mutate(trick = trick_num)\n}\n\n# Remove cards from deck that have been played and bind on as a played trick\nfix_deck &lt;- function(dealt, trick) {\n  dealt %&gt;%\n    anti_join(trick, by = c(\"suit\", \"value\", \"player\", \"id\")) %&gt;%\n    bind_rows(trick)\n}\n\nThis leads to the code for the first trick:\n\nfirst_trick &lt;- function(dealt) {\n  # Which player has 2 of clubs?\n  first_card &lt;- dealt %&gt;%\n    filter(suit == \"clubs\" & value == \"2\")\n\n  remaining_players &lt;- unique(dealt$player) %&gt;%\n    setdiff(first_card$player)\n\n  play &lt;- first_card\n  for (i in remaining_players) {\n    play &lt;- dealt %&gt;%\n      filter(player == i) %&gt;%\n      pick_card(sel_suit = \"clubs\") %&gt;%\n      bind_rows(play)\n  }\n  play &lt;- play %&gt;%\n    eval_trick(spec_suit = \"clubs\",\n               trick_num = 1)\n\n  if (!all(dealt$player %in% play$player)) {\n    stop(\"Not all players picked cards?\")\n  }\n\n  fix_deck(dealt, play)\n}\n\n\n\n\nThe same basic logic applies in any trick - the first card is picked, and then all other players throw in a card. We do need a hearts_playable function that will evaluate our deck to see if hearts is an option; once we have that, we can write a general trick-playing function.\n\nhearts_playable &lt;- function(df) {\n  sum(df$points, na.rm = T) &gt; 0\n}\n\nNotice that we‚Äôre calling the first_trick function within the more general play_trick function - this makes it much easier to remember the syntax.\n\nplay_trick &lt;- function(dealt) {\n  if (!\"trick\" %in% names(dealt)) {\n    return(first_trick(dealt))\n  }\n\n  # get empty df\n  play &lt;- filter(dealt, id &lt; 0)\n\n  # get trick number\n  trick_num &lt;- (1 + dealt$trick) %&gt;% max(na.rm = T)\n\n  # get player to lead\n  avail &lt;- filter(dealt, is.na(trick))\n  last_player &lt;- filter(dealt, trick == max(trick, na.rm = T)) %&gt;%\n    pluck(\"player_win\") %&gt;%\n    unique()\n\n  # get already played cards and see if hearts can be played\n  already_played &lt;- anti_join(dealt, avail, by = c(\"suit\", \"value\"))\n  can_play_hearts &lt;- bind_rows(already_played, play) %&gt;%\n    hearts_playable()\n\n  # pick first card\n  play &lt;- pick_card(avail,\n                    this_player = last_player,\n                    sel_suit = NA,\n                    hearts_avail = can_play_hearts)\n\n  # pick remaining cards\n  remaining_players &lt;- unique(dealt$player) %&gt;%\n    setdiff(last_player)\n  for (i in remaining_players) {\n    can_play_hearts &lt;- bind_rows(already_played, play) %&gt;%\n      hearts_playable()\n    play &lt;- bind_rows(\n      play,\n      pick_card(avail, this_player = i,\n                sel_suit = play$suit[1],\n                hearts_avail = can_play_hearts)\n    )\n  }\n\n  # evaluate the trick\n  play &lt;- play %&gt;%\n    eval_trick(spec_suit = play$suit[1], trick_num)\n\n  # remove trick from deck and add it back in as a played trick\n  fix_deck(dealt, play)\n}\n\ncreate_deck() %&gt;%\ndeal_cards(players = c(\"Amy\", \"Joe\", \"Sarah\", \"Bill\")) %&gt;%\nplay_trick() %&gt;%\nplay_trick() %&gt;%\nfilter(!is.na(trick)) # first 2 tricks in a game\n\n# A tibble: 8 √ó 9\n  suit     value points    id player trick_order in_suit player_win trick\n  &lt;chr&gt;    &lt;fct&gt;  &lt;dbl&gt; &lt;int&gt; &lt;chr&gt;        &lt;int&gt; &lt;lgl&gt;   &lt;chr&gt;      &lt;dbl&gt;\n1 clubs    10         0     9 Sarah            1 TRUE    Sarah          1\n2 clubs    3          0     2 Bill             2 TRUE    Sarah          1\n3 clubs    4          0     3 Amy              3 TRUE    Sarah          1\n4 clubs    2          0     1 Joe              4 TRUE    Sarah          1\n5 diamonds 3          0    15 Sarah            1 TRUE    Amy            2\n6 diamonds 8          0    20 Amy              2 TRUE    Amy            2\n7 spades   Jack       0    49 Bill             3 FALSE   Amy            2\n8 diamonds 6          0    18 Joe              4 TRUE    Amy            2\n\n\n\n\n\nNow, we can play a full game of hearts by repeatedly calling the play_trick function. All of the cards stay in the same data frame, and we keep track of who won each trick and who played each card - this allows us to calculate the score for each player at the end.\n\nhearts &lt;- function(players) {\n  deck &lt;- create_deck() %&gt;%\n    deal_cards(players)\n\n  number_of_rounds &lt;- nrow(deck)/length(players)\n\n  for (i in 1:number_of_rounds) {\n    # print(i)\n    deck &lt;- play_trick(deck)\n    # print(filter(deck, trick == i))\n  }\n\n  return(deck)\n}\n\nhearts(c(\"Amy\", \"Beth\", \"Cara\", \"Dawn\"))\n\n# A tibble: 52 √ó 9\n   suit   value points    id player trick_order in_suit player_win trick\n   &lt;chr&gt;  &lt;fct&gt;  &lt;dbl&gt; &lt;int&gt; &lt;chr&gt;        &lt;int&gt; &lt;lgl&gt;   &lt;chr&gt;      &lt;dbl&gt;\n 1 clubs  5          0     4 Dawn             1 TRUE    Cara           1\n 2 clubs  6          0     5 Cara             2 TRUE    Cara           1\n 3 clubs  4          0     3 Amy              3 TRUE    Cara           1\n 4 clubs  2          0     1 Beth             4 TRUE    Cara           1\n 5 spades Jack       0    49 Cara             1 TRUE    Beth           2\n 6 spades 5          0    43 Amy              2 TRUE    Beth           2\n 7 spades Ace        0    52 Beth             3 TRUE    Beth           2\n 8 spades Queen     13    50 Dawn             4 TRUE    Beth           2\n 9 spades 3          0    41 Beth             1 TRUE    Cara           3\n10 spades 7          0    45 Amy              2 TRUE    Cara           3\n# ‚Ñπ 42 more rows\n\n\n\n\n\nIt‚Äôs pretty easy given our setup to calculate each player‚Äôs score:\n\ncalc_score &lt;- function(data) {\n  game &lt;- data %&gt;%\n    group_by(player) %&gt;%\n    summarize(score = sum(points), .groups = \"drop\")\n  \n  # Handle the \"shoot the moon\" scenario \n  # where one player has all the points\n  if (any(game$score == 26)) {\n    game &lt;- game %&gt;%\n      mutate(score = 26 - score)\n  }\n  game\n}\n\n\nhearts(c(\"Amy\", \"Beth\", \"Cara\", \"Dawn\")) %&gt;%\n  calc_score()\n\n# A tibble: 4 √ó 2\n  player score\n  &lt;chr&gt;  &lt;dbl&gt;\n1 Amy        5\n2 Beth      14\n3 Cara       4\n4 Dawn       3\n\n\n\n\n\nIn a shoot the moon scenario, the total game points will be (n-1) times normal, where \\(n\\) is the number of players. This function returns a logical indicator of whether or not the total number of points generated is more than 26 (indicating that someone shot the moon)\n\nshoot_the_moon &lt;- function(data) {\n  sum(data$score) &gt; 26\n}\n\n\n\n\n\n\n\n\n# I'm saving the results of this so that I only \n# have to run it once...\n\n# This uses parallel processing to take advantage of the \n# fact that I wrote this on a server with 16 cores and \n# a lot of memory.\n# May as well use the power if you have the option!\nlibrary(parallel)\nset.seed(34029)\n#... then parallel replicate...\ngames &lt;- mclapply(1:10000, FUN = function(i) { hearts(c(\"Susan\", \"Caroline\", \"Mom\", \"Dad\")) }, mc.preschedule = F, mc.set.seed = T, mc.cores = 16, mc.cleanup = T)\n\nsave(games, file = \"games.Rdata\")\n\n\nload(\"games.Rdata\")\nres &lt;- tibble(\n  full_game = games, \n  score = purrr::map(full_game, calc_score),\n  stm = purrr::map_lgl(score, shoot_the_moon)\n)\n\nFrom this assessment, one player shoots the moon in approximately 0.00% of games played using the naive strategy. My parents were probably pretty reasonably assuming that they could explain that part of the strategy later, once we‚Äôd grasped the fundamentals of the game.\nThere are a couple of other options to consider - my simulation may not exactly model reality because of the assumption that all players were acting randomly:\n\n(The most likely) I‚Äôve simulated 4 players randomly playing hearts, but in the game that motivated the question, my parents actually knew what they were doing. If two players were strategizing, and two players were playing randomly, it might be more likely for someone to end up with all of the high point cards because two of the players were good enough to avoid them; the remaining point cards were randomly distributed. This seems like a more likely scenario to me.\n(Less likely) By trying to strategize (and failing) I unintentionally shot the moon - that is, I‚Äôve simulated randomness, but that‚Äôs not necessarily accurate - my strategy could have been worse than random guessing, making this simulation somewhat useless.\n\nI wish I had time to add in some strategy component, but I think at this point that would be excessive. While the simulation is a useful benchmark, it doesn‚Äôt completely describe the whole situation ‚Äì which is pretty typical!\nNote that we can compute other interesting quantities from our simulated set of games, such as the total proportion of points on the board once there \\(x\\) tricks played.\n\npoints_trick_cumulative &lt;- function(game) {\n  game %&gt;%\n    group_by(trick) %&gt;%\n    summarize(points = sum(points))\n}\n\nlibrary(parallel)\npoints_cumulative &lt;- res %&gt;%\n  select(full_game) %&gt;%\n  mutate(tmp = mclapply(full_game, points_trick_cumulative, mc.cores = 16)) \n\npoints_cumulative %&gt;%\n  mutate(id = 1:n()) %&gt;%\n  unnest(tmp) %&gt;%\n  group_by(id) %&gt;%\n  mutate(points_played = cumsum(points),\n         point_pct = points_played/sum(points)) %&gt;%\n  ggplot(aes(x = factor(trick), y = points_played)) + \n  geom_violin(scale = \"width\") + \n  xlab(\"Trick\") + ylab(\"Points played\") + \n  geom_smooth(aes(x = trick), method = \"gam\", se = F)\n\n`geom_smooth()` using formula = 'y ~ s(x, bs = \"cs\")'\n\n\n\n\n\nIn most games, the Queen of Spades is played first, resulting in a 13-point jump. Then, the remaining hearts are played. By the end of the game, there are usually only a few hearts remaining, leading to very interesting looking violin plots."
  },
  {
    "objectID": "slides/01a-intro.html#goals-for-today",
    "href": "slides/01a-intro.html#goals-for-today",
    "title": "Stat 850 Introduction",
    "section": "Goals for Today",
    "text": "Goals for Today\n\nSyllabus Q&A\nInstall software:\n\nR\nPython\nquarto\nRStudio\ngit\n\nStretch goal: set up Git"
  },
  {
    "objectID": "slides/01a-intro.html#preview-thursday",
    "href": "slides/01a-intro.html#preview-thursday",
    "title": "Stat 850 Introduction",
    "section": "Preview: Thursday",
    "text": "Preview: Thursday\n\nSet up Git\nHow to submit homework with Github Classroom\nGit concepts: Push/Pull"
  },
  {
    "objectID": "slides/01a-intro.html#reminders",
    "href": "slides/01a-intro.html#reminders",
    "title": "Stat 850 Introduction",
    "section": "Reminders",
    "text": "Reminders\n\nRegister for hypothes.is\nAnnotate the syllabus for this week‚Äôs reading assignment\n\ndue Friday at 8pm\n\nHomework due Friday at 8pm"
  },
  {
    "objectID": "slides/01b-intro.html#goals-for-today",
    "href": "slides/01b-intro.html#goals-for-today",
    "title": "Stat 850: Git and Github",
    "section": "Goals for Today",
    "text": "Goals for Today\n\nSet up Git\nHow to submit homework with Github Classroom\nGit concepts: Push/Pull"
  },
  {
    "objectID": "slides/01b-intro.html#preview-next-week",
    "href": "slides/01b-intro.html#preview-next-week",
    "title": "Stat 850: Git and Github",
    "section": "Preview: Next Week",
    "text": "Preview: Next Week\n\nFinding your way in R and Python\n\nNavigating RStudio\nExecution modes: script, console, interactive\nPython vs.¬†R code\n\nIntroduction to Programming"
  },
  {
    "objectID": "slides/01b-intro.html#reminders",
    "href": "slides/01b-intro.html#reminders",
    "title": "Stat 850: Git and Github",
    "section": "Reminders",
    "text": "Reminders\n\nRegister for hypothes.is\nAnnotate the syllabus for this week‚Äôs reading assignment\n\ndue Friday at 8pm\n\nHomework due Friday at 8pm\nRead the assigned chapters in the textbook (7, 8) for class next week!"
  },
  {
    "objectID": "slides/02a-Finding-Your-Way.html#todays-goals",
    "href": "slides/02a-Finding-Your-Way.html#todays-goals",
    "title": "Finding your way in R and Python",
    "section": "Today‚Äôs Goals:",
    "text": "Today‚Äôs Goals:\n\nKnow the 3 different ways to execute code from within RStudio\n\nTerminal (Command Line)\nSource Script (RStudio Button)\nInteractive Mode (line by line)\n\nDifferentiate between the Console and the Terminal\nDifferentiate between R and Python in the Console"
  },
  {
    "objectID": "slides/02a-Finding-Your-Way.html#rstudio-projects",
    "href": "slides/02a-Finding-Your-Way.html#rstudio-projects",
    "title": "Finding your way in R and Python",
    "section": "RStudio Projects",
    "text": "RStudio Projects\nRStudio projects are a way to keep your work organized.\nLet‚Äôs create one for this week‚Äôs class work.\n\nCreating an RStudio Project"
  },
  {
    "objectID": "slides/02a-Finding-Your-Way.html#ways-to-execute-code",
    "href": "slides/02a-Finding-Your-Way.html#ways-to-execute-code",
    "title": "Finding your way in R and Python",
    "section": "Ways to Execute Code",
    "text": "Ways to Execute Code\nDownload madlibs.py and place it in your newly created project."
  },
  {
    "objectID": "slides/02a-Finding-Your-Way.html#command-line",
    "href": "slides/02a-Finding-Your-Way.html#command-line",
    "title": "Finding your way in R and Python",
    "section": "Command Line",
    "text": "Command Line\n\nRunning madlibs.py at the command line"
  },
  {
    "objectID": "slides/02a-Finding-Your-Way.html#source-script",
    "href": "slides/02a-Finding-Your-Way.html#source-script",
    "title": "Finding your way in R and Python",
    "section": "Source Script",
    "text": "Source Script\n\nRunning madlibs.py using Source Script in RStudio"
  },
  {
    "objectID": "slides/02a-Finding-Your-Way.html#next-class",
    "href": "slides/02a-Finding-Your-Way.html#next-class",
    "title": "Finding your way in R and Python",
    "section": "Next Class",
    "text": "Next Class\n\nBasic Data Types\nCreating Variables\nUsing R/Python as a calculator\nIntro to Debugging"
  },
  {
    "objectID": "reading/01-SignUp-Syllabus.html",
    "href": "reading/01-SignUp-Syllabus.html",
    "title": "Setup and Syllabus Annotation",
    "section": "",
    "text": "In this class, we will have weekly readings that are intended to broaden your horizons, introduce you to new ideas related to computing and reproducibility, and highlight important ethical considerations that we won‚Äôt discuss directly in class but that have implications for computing.\nI haven‚Äôt yet found a great tool for ‚Äúsocial annotation‚Äù, but the idea is to allow you to read an article, make snarky (or insightful) comments, and see how your classmates react, ideally starting discussions and enriching everyone‚Äôs experiences.\nThis semester I‚Äôve decided to try Hypothes.is. I haven‚Äôt used this before, so we‚Äôll see how it goes."
  },
  {
    "objectID": "reading/01-SignUp-Syllabus.html#setup",
    "href": "reading/01-SignUp-Syllabus.html#setup",
    "title": "Setup and Syllabus Annotation",
    "section": "Setup",
    "text": "Setup\n\nCreate a free Hypothes.is account using your UNL email address\nJoin the Class Group\nInstall the browser addon in Chrome/Edge or the bookmarklet in your browser of choice."
  },
  {
    "objectID": "reading/01-SignUp-Syllabus.html#annotate-the-syllabus",
    "href": "reading/01-SignUp-Syllabus.html#annotate-the-syllabus",
    "title": "Setup and Syllabus Annotation",
    "section": "Annotate the Syllabus",
    "text": "Annotate the Syllabus\nOpen the syllabus in your browser.\n\nActivate hypothes.is using the addon or the bookmarklet.\nLog in (if necessary)\nMake sure you are posting your annotations to the 2023-Stat850 group.\nHighlight some text and make a comment. Ask a question about something you don‚Äôt understand, or complain about something you find unfair - I‚Äôm totally fine with that, I can take it.\nRead through the remainder of the syllabus and comment/highlight important points, things that need clarification, etc.\nRespond to your classmates‚Äô comments before Friday at 8pm."
  },
  {
    "objectID": "reading/01-SignUp-Syllabus.html#evaluation",
    "href": "reading/01-SignUp-Syllabus.html#evaluation",
    "title": "Setup and Syllabus Annotation",
    "section": "Evaluation",
    "text": "Evaluation\nI will grade this assignment (and future assignments) by looking at your annotations in the 2023-Stat850 group. If you annotate articles and post the comments to ‚ÄúPublic‚Äù instead of our group, I have no way to give you credit for the assignment.\nYou will get credit both for your own annotations and for responses to classmates‚Äô comments/questions. These responses should be organic, not formulaic - I expect you to engage with interesting thoughts/comments, but you are not required to make a specific number of comments each week. I will instead track your overall engagement over the course of the semester."
  },
  {
    "objectID": "reading/02-Decoding-Confusion.html",
    "href": "reading/02-Decoding-Confusion.html",
    "title": "Decoding Your Confusion",
    "section": "",
    "text": "This week‚Äôs reading assignment is from The Programmer‚Äôs Brain: What Every Programmer Needs to Know About Cognition by Felienne Hermans.\nLink to chapter\nRemember to use hypothes.is for annotation and to make sure you‚Äôre posting your annotations in the course group!\nNote that the examples in this book are given in unfamiliar programming languages. That‚Äôs ok - read the code as best as you can, but part of the content of this chapter is that reading code can be hard!"
  },
  {
    "objectID": "reading/03-Good-Enough-Computing.html",
    "href": "reading/03-Good-Enough-Computing.html",
    "title": "Good Enough Practices in Scientific Computing",
    "section": "",
    "text": "Read: - Good Enough Practices in Scientific Computing\nThink about/comment on:\n\nWhat basic computing skills were you taught? Which ones were you not taught?\nWhich workflows do you think will be useful to you? Which ones do you plan to ignore for now? Why?"
  },
  {
    "objectID": "project/guidelines.html",
    "href": "project/guidelines.html",
    "title": "Project Guidelines",
    "section": "",
    "text": "Your final project consists of a written report and a presentation (uploaded to YouTube), to be turned in instead of a final exam. In this project, you will select a topic, acquire data from one or more sources, and present any interesting findings you might come across as you explore your data."
  },
  {
    "objectID": "project/guidelines.html#general-rules",
    "href": "project/guidelines.html#general-rules",
    "title": "Project Guidelines",
    "section": "General rules",
    "text": "General rules\n\nYou may work in teams of up to 3 people, but each member of the team should contribute approximately evenly (I will measure this using your git contributions)\nYour work should be reproducible from start to finish. Do not modify the data by hand! I should be able to take the original data and your repository and go through your analysis from start to finish on my own machine.\nYou should not have to do any complicated statistical modeling for this project. If you want to fit a model, you need to be able to explain it to the rest of the class - but other members of the class may have had different statistics classes than you‚Äôve had. In general, this project should focus on exploratory data analysis; any model results should be explained using graphs, not statistical tests.\nYour project should use what you have learned (and what you will learn) about data visualization, data wrangling, programming, functions, interactive graphics, and dynamic documents. Your ultimate goal is to demonstrate the class objectives and your ability to conduct reproducible analyses and produce professional products using markdown and R/Python code."
  },
  {
    "objectID": "project/guidelines.html#datasets",
    "href": "project/guidelines.html#datasets",
    "title": "Project Guidelines",
    "section": "Datasets",
    "text": "Datasets\nYour dataset(s)\n\nshould be fun and interesting to you.\nPast classes have worked on data covering witch trials, Super Mario competitive times, personal music databases, and many other topics. You can choose something serious, or something decidedly not serious and be successful with the analysis. The best predictor of success is that the data you‚Äôre working with is something you find interesting and want to explore.\nshould be on a topic of general interest - something you could discuss with your parents or grandparents\nIf you use a technical dataset, you need to write your report with the more general audience in mind, which means you will need to explain any jargon you use, and provide diagrams of e.g.¬†plant anatomy, etc. to get the reader up to speed. If you work with sports data, you should provide an explanation like this as well, because I have no background knowledge about sports at all.\nmust have at least 1000 records (rows) and at least 5 variables\nmust include at least one meaningful categorical variable and one meaningful numeric variable (these can be derived, if you are e.g.¬†working with text or image data)\nmust not be published in a textbook or have a published analysis unless\n\nyou get prior permission and\nyour analysis is very different from what has previously been published\n\nmust be something that you can make available to the entire class (so e.g.¬†proprietary datasets from work or other sources aren‚Äôt acceptable)\nmust be traceable to the original source of the data. You MAY NOT use data uploaded to Kaggle - go back to the data source. If you need help assembling your data, come talk to me about it and I may be able to help.\n\nHere are some potential sources of interesting and/or fun data that explain how the data was acquired/sourced and (usually) have adequate data documentation:\n\nData is Plural archive\nTidyTuesday Archive\nData.gov The US government data archive"
  },
  {
    "objectID": "project/guidelines.html#version-control",
    "href": "project/guidelines.html#version-control",
    "title": "Project Guidelines",
    "section": "Version Control",
    "text": "Version Control\nYou should use GitHub to track your project throughout its life cycle. Some tips:\n\nPull before you start working, and after each commit.\nWorking in teams on github means that you have to allow for merge conflicts and become skilled at resolving them. This is part of my goal for making you work in groups - forcing you to develop these skills. See https://www.youtube.com/watch?v=97m0N4zIvOs for a demonstration of how to work with merge conflicts in rstudio.\nI do not expect you to work on branches for this project, unless you really want to - with 3 people and a defined scope, you should be able to work out of the main branch with few problems.\nCommit your changes in small, task-oriented batches. Try to work on small tasks and commit as soon as you finish the task. This will reduce merge conflicts.\nMinimize merge conflicts:\nPut each sentence on a different line in your document - this makes it much easier for git to resolve the changes, as git works line-by-line. I make all of my graduate students do this with their papers, and it makes things much easier to work around.\nREAD THE ERROR MESSAGE FROM GIT.\nSeriously, this will help you figure out about 90% of the things that go wrong. Git actually has good error messages that help you know what to do next.\nOnly commit the essential files necessary to compile your project report to github. This will reduce merge conflicts and save you a ton of time in the long run.\n\nDon‚Äôt commit pictures generated by R/python, .tex files generated as an intermediate stage, or even html/pdf files that are the final product until the very end. I have set this repository up in such a way that each of the quarto files renders to the _output folder, and git ignores everything in this folder, in the hopes that this will be enough to help you out.\nDo commit any R/python source files you need to e.g.¬†define a shiny application or do some data processing. Organize these in a code folder, and create a header in each code file that describes what the file does and how it relates to other code files in the project.\nDon‚Äôt commit any files you didn‚Äôt personally create. Be selective in what you add to git. Use the .gitignore file to keep git from tracking files that shouldn‚Äôt be added to the repository.\n\n\nI will track your contributions to the project using the python git-fame package, which you can install with the command pip install git-fame.\nI will typically use some variant of the following command to track your group contributions:\ngit fame . --incl=\".(q|R)md\"\nThis only counts modifications to the markdown files, which ensures that whoever adds a dataset to the repository doesn‚Äôt get credit for doing a ton of work by just uploading a file. This also ensures that people committing intermediate files don‚Äôt get credit for making the repository a mess."
  },
  {
    "objectID": "project/guidelines.html#project-report",
    "href": "project/guidelines.html#project-report",
    "title": "Project Guidelines",
    "section": "Project Report",
    "text": "Project Report\nYour project report should:\n\nbe approximately \\(450\\times(2n + 1)\\) words, where \\(n\\) is the number of people in your group. The extra length is to allow you space to describe your dataset, methods, and conclusions; everyone will need to do that regardless of group size.\nIf you want to know what the wordcount of your report is, you can run the following command in your terminal (in the project directory, assuming you‚Äôve cloned it from github classroom):\n\npandoc --lua-filter wordcount.lua report.qmd\n\nbe grammatically correct. Please feel free to make use of the writing center for editing, so that your report has appropriate grammar and structure.\nbe factually correct, and should reference outside sources appropriately (see below)\nhave a references section, using markdown‚Äôs references functionality. You should not manually compile your bibliography - it should be created automatically using a bib file.\nreference the software packages you‚Äôve used in your analysis/report and cite them appropriately. Software is a scholarly work, and deserves to be cited. The citation() R command can help you assemble appropriate references for software packages.\ncontain an introduction and a conclusion, written in paragraphs. The ‚Äúmeat‚Äù of the report should tell a story.\nuse figures. Figures must have appropriate captions, and each figure should be referenced within the body of the paper using markdown reference syntax.\nuse the report.qmd template file provided in the project repository to assemble your report. It contains demonstrations of all of the requirements above."
  },
  {
    "objectID": "project/guidelines.html#presentation",
    "href": "project/guidelines.html#presentation",
    "title": "Project Guidelines",
    "section": "Presentation",
    "text": "Presentation\nYour project presentation should:\n\ninclude a visual aid (slides or a poster) that highlight(s) the findings you have presented in your report. The visual aid must be created using LaTeX or markdown.\ninclude participation from each member of your group\nbe approximately \\(4\\times(n+1)\\) minutes long.\nbe uploaded to YouTube (you can set the link such that people with the link can view the presentation but where it is not searchable) or YuJa (but YouTube is easier for your classmates to work with). You will submit the link to the presentation on Canvas.\n\nYou will be expected to peer-evaluate two other groups presentations and/or reports, using the rubric."
  }
]