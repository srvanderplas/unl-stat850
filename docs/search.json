[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Stat 850: Computing Tools for Statistics",
    "section": "",
    "text": "Course Materials\nDates shown are due dates (for homework, projects) and dates by which initial comments/annotations should be made (reading).\nMost classes will not contain slide presentations, but when there are slides to share, they will be provided here.\n\n\n   \n     \n     \n       Order By\n       Default\n         \n          Date - Oldest\n        \n         \n          Date - Newest\n        \n         \n          Title\n        \n     \n  \n    \n      \n      \n    \n\n\n\n\n\n\nDate\n\n\n\n\nTitle\n\n\n\n\n\n\nDec 8, 2023\n\n\n\n\n\nSample Report\n\n\n\n\nDec 1, 2023\n\n\n\n\n\nData Sketches\n\n\n\n\nNov 20, 2023\n\n\n\n\n\nHomework 11: Simulation\n\n\n\n\nNov 17, 2023\n\n\n\n\n\nEthics in Algorithms\n\n\n\n\nNov 10, 2023\n\n\n\n\n\nHomework 12: Shiny\n\n\n\n\nNov 3, 2023\n\n\n\n\n\nSimulation\n\n\n\n\nOct 30, 2023\n\n\n\n\n\nSample Proposal\n\n\n\n\nOct 27, 2023\n\n\n\n\n\nHomework 10: Professional Communication\n\n\n\n\nOct 27, 2023\n\n\n\n\n\nReproducibility\n\n\n\n\nOct 24, 2023\n\n\n\n\n\nLaTeX and Markdown\n\n\n\n\nOct 20, 2023\n\n\n\n\n\nWeek 9 Debugging Excercises\n\n\n\n\nOct 20, 2023\n\n\n\n\n\nErrors and Development\n\n\n\n\nOct 17, 2023\n\n\n\n\n\nUgly Charts- 2023 Results\n\n\n\n\nOct 17, 2023\n\n\n\n\n\nDebugging Excercises\n\n\n\n\nOct 13, 2023\n\n\n\n\n\nHomework 8: Graphics\n\n\n\n\nOct 13, 2023\n\n\n\n\n\nData Visualization\n\n\n\n\nOct 6, 2023\n\n\n\n\n\nHomework 7: Murder in SQL City\n\n\n\n\nOct 6, 2023\n\n\n\n\n\nData Context\n\n\n\n\nOct 6, 2023\n\n\n\n\n\nProject Guidelines\n\n\n\n\nSep 29, 2023\n\n\n\n\n\nHomework 6: Strings and Data Wrangling\n\n\n\n\nSep 29, 2023\n\n\n\n\n\nTidy Programming\n\n\n\n\nSep 22, 2023\n\n\n\n\n\nHomework 5: Exploratory Data Analysis with Cookies\n\n\n\n\nSep 22, 2023\n\n\n\n\n\nExploratory Data Analysis\n\n\n\n\nSep 15, 2023\n\n\n\n\n\nHomework 4: Data Programming\n\n\n\n\nSep 15, 2023\n\n\n\n\n\nTidy Tuesday Screencast: Doctor Who\n\n\n\n\nSep 10, 2023\n\n\n\n\n\nHomework 3 Discoveries\n\n\n\n\nSep 8, 2023\n\n\n\n\n\nHomework 3: Fizzbuzz\n\n\n\n\nSep 6, 2023\n\n\n\n\n\nGood Enough Practices in Scientific Computing\n\n\n\n\nSep 1, 2023\n\n\n\n\n\nHomework 2: Finding Your Way in R and Python\n\n\n\n\nSep 1, 2023\n\n\n\n\n\nDecoding Your Confusion\n\n\n\n\nAug 29, 2023\n\n\n\n\n\nFinding your way in R and Python\n\n\n\n\nAug 25, 2023\n\n\n\n\n\nHomework 1: Git and Github\n\n\n\n\nAug 25, 2023\n\n\n\n\n\nSetup and Syllabus Annotation\n\n\n\n\nAug 24, 2023\n\n\n\n\n\nStat 850: Git and Github\n\n\n\n\nAug 22, 2023\n\n\n\n\n\nStat 850 Introduction\n\n\n\n\n\n\nNo matching items"
  },
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "About Stat 850",
    "section": "",
    "text": "Course Description\nIntroductions to statistical computing packages and document preparation software. Topics include: graphical techniques, data management, Monte Carlo simulation, dynamic document preparation, presentation software.\n\n\nCourse Goals\n\nLearn how to use R and/or Python for data analysis, data processing, and data visualization.\nBecome familiar with the process, techniques, and goals of exploratory data analysis.\nCreate, assess, and debug code effectively.\n\nUse online resources to find software to perform a task, comparing approaches taken by competing programs.\nRead error messages, find related problems in online forums, and isolate the conditions necessary to generate the error.\nGenerate minimum working examples or reproducible examples of errors in order to ask for help effectively.\n\nCommunicate statistical results using reproducible, dynamic tools. Understand the importance of reproducibility in scientific computation.\n\n\n\nCourse Objectives\n(what you should be able to do at the end of this course)\n\nClean and format the data appropriately for the intended analysis or visualization method. (Goals: 1)\nExplore a data set using numerical and visual summaries, developing questions which can be answered using statistics. (Goals: 1, 2)\nEvaluate methods or software to assess relevance to a problem. Compare similar options to determine which are more appropriate for a given application (Goals: 1, 3)\nTest and debug software, using the following sequence: (Goals: 3, 4)\n\nReproduce the error in a new environment,\nCreate a minimal reproducible example,\nResearch the error message and evaluate online resources for relevance,\nAsk for help, describing the error or problem appropriately.\n\nDocument the data, methods, and results of an analysis using reproducible methods. (Goals: 1, 2, 4)\n\n\n\nTextbook\nIn keeping with the principles of this course, any course materials I develop will be made available on GitHub, in the (continuously evolving) course textbook. The book is laid out with the same structure as the course. In order to avoid duplicating content available elsewhere, where it is appropriate, I will link to relevant material available on other sites. This makes the course easier to maintain, but it also ensures you get the most relevant and up to date instructions.\nIn addition, you may find it useful to reference some of the following resources that I have consulted while assembling the textbook. Most are available online for free, though some require an institutional email address.\n\nR for Data Science\nAdvanced R\nPython for Everybody\nPython for Data Analysis *\nPython Data Science Handbook *\n\n* Available online for free if you register with your UNL email address."
  },
  {
    "objectID": "homework/01.html",
    "href": "homework/01.html",
    "title": "Homework 1: Git and Github",
    "section": "",
    "text": "Note: This assignment must be submitted in github classroom."
  },
  {
    "objectID": "homework/01.html#course-overview-and-learning-outcomes",
    "href": "homework/01.html#course-overview-and-learning-outcomes",
    "title": "Homework 1: Git and Github",
    "section": "ü§ì Course overview and learning outcomes",
    "text": "ü§ì Course overview and learning outcomes\nThe goal of this course is to give you a brief introduction to GitHub. We‚Äôll also provide you with materials for further learning and a few ideas to get you started on our platform. üöÄ"
  },
  {
    "objectID": "homework/01.html#git-and-github",
    "href": "homework/01.html#git-and-github",
    "title": "Homework 1: Git and Github",
    "section": "Git and GitHub",
    "text": "Git and GitHub\nGit is a distributed Version Control System (VCS), which means it is a useful tool for easily tracking changes to your code, collaborating, and sharing. With Git you can track the changes you make to your project so you always have a record of what you‚Äôve worked on and can easily revert back to an older version if need be. It also makes working with others easier‚Äîgroups of people can work together on the same project and merge their changes into one final source!\nGitHub is a way to use the same power of Git all online with an easy-to-use interface. It‚Äôs used across the software world and beyond to collaborate and maintain the history of projects.\nGitHub is home to some of the most advanced technologies in the world. Whether you‚Äôre visualizing data or building a new game, there‚Äôs a whole community and set of tools on GitHub that can get you to the next step. This course starts with the basics of GitHub, but we‚Äôll dig into the rest later."
  },
  {
    "objectID": "homework/01.html#understanding-the-github-flow",
    "href": "homework/01.html#understanding-the-github-flow",
    "title": "Homework 1: Git and Github",
    "section": "Understanding the GitHub flow",
    "text": "Understanding the GitHub flow\nThe GitHub flow is a lightweight workflow that allows you to experiment and collaborate on your projects easily, without the risk of losing your previous work.\n\nRepositories\nA repository is where your project work happens‚Äìthink of it as your project folder. It contains all of your project‚Äôs files and revision history. You can work within a repository alone or invite others to collaborate with you on those files.\n\n\nCloning\nWhen a repository is created with GitHub, it‚Äôs stored remotely in the ‚òÅÔ∏è. You can clone a repository to create a local copy on your computer and then use Git to sync the two. This makes it easier to fix issues, add or remove files, and push larger commits. You can also use the editing tool of your choice as opposed to the GitHub UI. Cloning a repository also pulls down all the repository data that GitHub has at that point in time, including all versions of every file and folder for the project! This can be helpful if you experiment with your project and then realize you liked a previous version more. To learn more about cloning, read ‚ÄúCloning a Repository‚Äù.\n\n\nCommitting and pushing\nCommitting and pushing are how you can add the changes you made on your local machine to the remote repository in GitHub. That way your instructor and/or teammates can see your latest work when you‚Äôre ready to share it. You can make a commit when you have made changes to your project that you want to ‚Äúcheckpoint.‚Äù You can also add a helpful commit message to remind yourself or your teammates what work you did (e.g.¬†‚ÄúAdded a README with information about our project‚Äù).\nOnce you have a commit or multiple commits that you‚Äôre ready to add to your repository, you can use the push command to add those changes to your remote repository. Committing and pushing may feel new at first, but we promise you‚Äôll get used to it üôÇ"
  },
  {
    "objectID": "homework/01.html#github-terms-to-know",
    "href": "homework/01.html#github-terms-to-know",
    "title": "Homework 1: Git and Github",
    "section": "üíª GitHub terms to know",
    "text": "üíª GitHub terms to know\n\nRepositories\nWe mentioned repositories already, they are where your project work happens, but let‚Äôs talk a bit more about the details of them! As you work more on GitHub you will have many repositories which may feel confusing at first. Fortunately, your ‚ÄúGitHub dashboard‚Äù helps to easily navigate to your repositories and see useful information about them. Make sure you‚Äôre logged in to see it!\nRepositories also contain READMEs. You can add a README file to your repository to tell other people why your project is useful, what they can do with your project, and how they can use it. We are using this README to communicate how to learn Git and GitHub with you. üòÑ To learn more about repositories read ‚ÄúCreating, Cloning, and Archiving Repositories and ‚ÄúAbout README‚Äôs‚Äù.\n\n\nBranches\nYou can use branches on GitHub to isolate work that you do not want merged into your final project just yet. Branches allow you to develop features, fix bugs, or safely experiment with new ideas in a contained area of your repository. Typically, you might create a new branch from the default branch of your repository‚Äîmain. This makes a new working copy of your repository for you to experiment with. Once your new changes have been reviewed by a teammate, or you are satisfied with them, you can merge your changes into the default branch of your repository. To learn more about branching, read ‚ÄúAbout Branches‚Äù.\nNote: In this class, you will not be required to use branches.\n\n\nForks\nA fork is another way to copy a repository, but is usually used when you want to contribute to someone else‚Äôs project. Forking a repository allows you to freely experiment with changes without affecting the original project and is very popular when contributing to open source software projects! To learn more about forking, read ‚ÄúFork a repo‚Äù\nNote: In this class, you will not be required to use forks.\n\n\nPull requests\nWhen working with branches, you can use a pull request to tell others about the changes you want to make and ask for their feedback. Once a pull request is opened, you can discuss and review the potential changes with collaborators and add more changes if need be. You can add specific people as reviewers of your pull request which shows you want their feedback on your changes! Once a pull request is ready-to-go, it can be merged into your main branch. To learn more about pull requests, read ‚ÄúAbout Pull Requests‚Äù.\nNote: In this course, you will not be required to use pull requests.\n\n\nIssues\nIssues are a way to track enhancements, tasks, or bugs for your work on GitHub. Issues are a great way to keep track of all the tasks you want to work on for your project and let others know what you plan to work on. You can also use issues to tell a favorite open source project about a bug you found or a feature you think would be great to add!\nFor larger projects, you can keep track of many issues on a project board. GitHub Projects help you organize and prioritize your work and you can read more about them in this ‚ÄúAbout Project boards document. You likely won‚Äôt need a project board for your assignments, but once you move on to even bigger projects, they‚Äôre a great way to organize your team‚Äôs work! You can also link together pull requests and issues to show that a fix is in progress and to automatically close the issue when someone merges the pull request. To learn more about issues and linking them to your pull requests, read ‚ÄúAbout Issues‚Äù.\n\n\nYour user profile\nYour profile page tells people the story of your work through the repositories you‚Äôre interested in, the contributions you‚Äôve made, and the conversations you‚Äôve had. You can also give the world a unique view into who you are with your profile README. You can use your profile to let future employers know all about you! To learn more about your user profile and adding and updating your profile README, read ‚ÄúManaging Your Profile README‚Äù.\n\n\nUsing markdown on GitHub\nYou might have noticed already, but you can add some fun styling to your issues, pull requests, and files. ‚ÄúMarkdown‚Äù is an easy way to style your issues, pull requests, and files with some simple syntax. This can be helpful to organize your information and make it easier for others to read. You can also drop in gifs and images to help convey your point! To learn more about using GitHub‚Äôs flavor of markdown, read ‚ÄúBasic Writing and Formatting Syntax‚Äù.\n\n\nEngaging with the GitHub community\nThe GitHub community is vast. There are many types of people who use GitHub in their day to day‚Äîstudents like you, professional developers, hobbyists working on open source projects, and explorers who are just jumping into the world of software development on their own. There are many ways you can interact with the larger GitHub community, but here are three places where you can start.\n\nStarring repositories\nIf you find a repository interesting or you want to keep track of it, star it! When you star a repository it‚Äôs also used as a signal to surface better recommendations on github.com/explore. If you‚Äôd like to get back to your starred repositories you can do so via your user profile. To learn more about starring repositories, read ‚ÄúSaving Repositories with Stars‚Äù.\n\n\nFollowing users\nYou can follow people on GitHub to receive notifications about their activity and discover projects in their communities. When you follow a user, their public GitHub activity will show up on your dashboard so you can see all the cool things they are working on. To learn more about following users, read ‚ÄúFollowing People‚Äù.\n\n\nBrowsing GitHub Explore\nGitHub Explore is a great place to do just that ‚Ä¶ explore :smile: You can find new projects, events, and developers to interact with.\nYou can check out the GitHub Explore website at github.com/explore. The more you intereact with GitHub the more tailored your Explore view will be."
  },
  {
    "objectID": "homework/01.html#next-steps",
    "href": "homework/01.html#next-steps",
    "title": "Homework 1: Git and Github",
    "section": "üìù Next steps",
    "text": "üìù Next steps\n\nClone this repository to your local machine\nOn your local machine, create a new markdown file in this repository named ‚ÄòAbout_Me.md‚Äô. Provide a short biography/introduction for yourself and use markdown formatting\n\nMarkdown Basics provides an overview of different formatting options in markdown.\nYou must use at least the following formatting elements: header, subheader, bold, italic, bulleted list, and an image.\n\nCommit your changes to your new file locally and push them back to your github repository. Check on Github to make sure the new file appears.\nTo get full credit for your assignment, you will need to have worked with your git repository locally. I will be able to see if you have used the github editor to make your changes instead :)."
  },
  {
    "objectID": "homework/01.html#resources",
    "href": "homework/01.html#resources",
    "title": "Homework 1: Git and Github",
    "section": "üìö Resources",
    "text": "üìö Resources\n\nA short video explaining what GitHub is\nGit and GitHub learning resources\nUnderstanding the GitHub flow\nHow to use GitHub branches\nInteractive Git training materials\nGitHub‚Äôs Learning Lab\nEducation community forum\nGitHub community forum"
  },
  {
    "objectID": "homework/01.html#optional-extra-steps",
    "href": "homework/01.html#optional-extra-steps",
    "title": "Homework 1: Git and Github",
    "section": "Optional extra steps",
    "text": "Optional extra steps\n\nOpen a pull request and let your teacher know that you‚Äôve finished this course.\n\nCreate your profile README. Let the world know a little bit more about you! What are you interested in learning? What are you working on? What‚Äôs your favorite hobby? Learn more about creating your profile README in the document, ‚ÄúManaging Your Profile README‚Äù.\nGo to your user dashboard and create a new repository. Experiment with the features within that repository to familiarize yourself with them.\nLet us know what you liked or didn‚Äôt like about the content of this course. What would you like to see more of? What would be interesting or helpful to your learning journey?"
  },
  {
    "objectID": "homework/02.html",
    "href": "homework/02.html",
    "title": "Homework 2: Finding Your Way in R and Python",
    "section": "",
    "text": "Note: This assignment must be submitted in github classroom.\nInstructions: Once you have finished this assignment, render the document (Ctrl/Cmd-Shift-K or the Render button). Commit the qmd file and any other files you have changed to the repository and push your changes.\nIn Canvas, submit a link to your github repository containing the updated files.\nNote: Submitting your link in Canvas lets me know that you are ready for me to grade your homework. You can commit half-finished or not-working homework to GitHub, and it is good practice to commit frequently (at least at the end of each work session)."
  },
  {
    "objectID": "homework/02.html#pythagorean-theorem-in-r",
    "href": "homework/02.html#pythagorean-theorem-in-r",
    "title": "Homework 2: Finding Your Way in R and Python",
    "section": "Pythagorean Theorem in R",
    "text": "Pythagorean Theorem in R\n\\[a^2 + b^2 = c^2\\]\nUse the chunk below to define variables \\(a\\), \\(b\\), and \\(c\\), where you define the values of \\(a\\) and \\(b\\), and \\(c\\) is determined mathematically. You may need to find the square root function in R to make this work.\n\n# Your pythagorean theorem code goes here"
  },
  {
    "objectID": "homework/02.html#quadratic-formula-in-python",
    "href": "homework/02.html#quadratic-formula-in-python",
    "title": "Homework 2: Finding Your Way in R and Python",
    "section": "Quadratic Formula in Python",
    "text": "Quadratic Formula in Python\n\\[x = \\frac{-b \\pm \\sqrt{b^2 - 4ac}}{2a}\\]\nUse the chunk below to define variables \\(a\\), \\(b\\), and \\(c\\), and then define \\(x1\\) and \\(x2\\), the possible values for \\(x\\). You may find it helpful to define a few additional variables, such as the value of the discriminant \\(\\sqrt{b^2 - 4ac}\\), to make it easier to calculate the results.\n\n# Your quadratic formula code goes here"
  },
  {
    "objectID": "homework/03-after.html",
    "href": "homework/03-after.html",
    "title": "Homework 3 Discoveries",
    "section": "",
    "text": "I almost always learn something new from your homework assignments. It seemed like a good time to start writing some of this down, so that I can share the wealth.\nI‚Äôve also included a few common mistakes that multiple people made (mostly in indexing).\nLet‚Äôs start by loading a few packages in python:\nimport pandas as pd\nimport numpy as np\nfrom random import choices"
  },
  {
    "objectID": "homework/03-after.html#python---raise-typeerror",
    "href": "homework/03-after.html#python---raise-typeerror",
    "title": "Homework 3 Discoveries",
    "section": "Python - raise TypeError()",
    "text": "Python - raise TypeError()\nAt first, I had some trouble understanding why some python code just didn‚Äôt work:\n\nimport pandas as pd\nimport numpy as np\nfrom random import choices\n\ndef fizzbuzz(x):\n  \n  y = [np.nan]*len(x) # this just defines something to return\n  \n  for i in range(len(x)):\n    # Check that the entry is numeric\n    if not (isinstance(x[i], int) or isinstance(x[i], float)):\n      raise TypeError(\"Input must be an integer\")\n    \n    elif x[i]%3==0 and x[i]%5==0:\n      y[i] = \"FizzBuzz\"\n    \n    elif x[i]%3==0:\n      y[i] = \"Fizz\"\n  \n    elif x[i]%5==0:\n      y[i] = \"Buzz\"\n  \n    else:\n      y[i] = x[i]\n      \n  return y\n\nfizzbuzz(np.array([1, 3]))\n\nInput must be an integer\n\nfizzbuzz(np.array([1, 'a']))\n\nInput must be an integer\n\n\nIsn‚Äôt np.array([1,2]) either an integer or a float?\n\nx = np.array([1,2])\ntype(x[0])\n\n&lt;class 'numpy.int64'&gt;\n\n\nEvidently not - it‚Äôs a special numpy variable type, np.int64. Let‚Äôs incorporate that into our function:\n\nimport pandas as pd\nimport numpy as np\nfrom random import choices\n\ndef fizzbuzz(x):\n  \n  y = [np.nan]*len(x) # this just defines something to return\n  \n  for i in range(len(x)):\n    # Check that the entry is numeric\n    if not (isinstance(x[i], int) or isinstance(x[i], float) or isinstance(x[i], np.int64)):\n      raise TypeError(\"Input must be an integer\")\n    elif x[i]%3==0 and x[i]%5==0:\n      y[i] = \"FizzBuzz\"\n    \n    elif x[i]%3==0:\n      y[i] = \"Fizz\"\n  \n    elif x[i]%5==0:\n      y[i] = \"Buzz\"\n  \n    else:\n      y[i] = x[i]\n      \n  return y\n\nfizzbuzz(np.array([1, 3]))\n\n[1, 'Fizz']\n\nfizzbuzz(np.array([1, 'a']))\n\nInput must be an integer\n\n\nNow, we should be able to assume that in a vector, everything has the same type. So in theory we should be able to improve this function still. Let‚Äôs check out the documentation for basic types in numpy:\n\nTo determine the type of an array, look at the dtype attribute:\n\nz.dtype\ndtype('uint8')\n\ndtype objects also contain information about the type, such as its bit-width and its byte-order. The data type can also be used indirectly to query properties of the type, such as whether it is an integer:\n\nd = np.dtype(int)\nd \ndtype('int32')\nnp.issubdtype(d, np.integer)\nTrue\nnp.issubdtype(d, np.floating)\nFalse\nI learned a couple of things from this documentation - first, we can test data types using the np.isdtype function, and second, we can use np.issubdtype to test for variations on those types, like int64, int32, and int.\nOk, so let‚Äôs see if we can apply this information to our problem and test the whole array x outside of the loop:\n\ndef fizzbuzz(x):\n  \n  # Check that the parameter is numeric\n  if not(np.issubdtype(x.dtype, np.integer) or np.issubdtype(x.dtype, np.floating)):\n    raise TypeError(\"Input must be a number\")\n    \n  y = [np.nan]*len(x) # this just defines something to return\n  \n  for i in range(len(x)):\n    if x[i]%3==0 and x[i]%5==0:\n      y[i] = \"FizzBuzz\"\n    \n    elif x[i]%3==0:\n      y[i] = \"Fizz\"\n  \n    elif x[i]%5==0:\n      y[i] = \"Buzz\"\n  \n    else:\n      y[i] = x[i]\n      \n  return y\n\nfizzbuzz(np.array([1, 3]))\n\n[1, 'Fizz']\n\nfizzbuzz(np.array([1, 'a']))\n\nInput must be a number\n\nfizzbuzz(np.array([1, 2.43]))\n\n[1.0, 2.43]"
  },
  {
    "objectID": "homework/03-after.html#python---tryexcept",
    "href": "homework/03-after.html#python---tryexcept",
    "title": "Homework 3 Discoveries",
    "section": "Python - try/except",
    "text": "Python - try/except\nHere is some beautiful code that worked exactly the way I intended:\n\ndef fizzbuzz(x):\n  y = [np.nan]*len(x) \n  try:\n  \n    for i in range(len(x)):\n        if x[i] % 3 == 0 and x[i] % 5 == 0:\n            y[i] = \"FizzBuzz\"\n        elif x[i] % 3 == 0:\n            y[i] = \"Fizz\"\n        elif x[i] % 5 == 0:\n            y[i] = \"Buzz\"\n        else:\n            y[i] = (x[i])\n  except TypeError: \n        print(\"Error: Should be a numeric value\") \n    \n  return y\n\nimport pandas as pd\nfrom random import choices\nxx = \"abc\"\nyy = fizzbuzz(x = xx)\n\nError: Should be a numeric value\n\nres = pd.DataFrame({\"x\": xx, \"result\": yy})\nres\n\n     x  result\n0  abc     NaN\n1  abc     NaN\n2  abc     NaN\n\nxx2 = np.array(choices(range(100), k = 10)) + 1\nyy2 = fizzbuzz(x = xx2)\nres2 = pd.DataFrame({\"x\": xx2, \"result\": yy2})\nres2\n\n    x    result\n0  10      Buzz\n1  75  FizzBuzz\n2  95      Buzz\n3  32        32\n4  58        58\n5  50      Buzz\n6  63      Fizz\n7  70      Buzz\n8  76        76\n9  54      Fizz\n\n\nThis code handles everything with an error, but still returns a reasonable result at the end. Very nice."
  },
  {
    "objectID": "homework/03.html",
    "href": "homework/03.html",
    "title": "Homework 3: Fizzbuzz",
    "section": "",
    "text": "Note: This assignment must be submitted in github classroom.\nInstructions:\n\nYou can answer the questions below in either R or Python. I will give you 50% extra credit if you provide answers in both languages. Otherwise, please feel free to delete the code chunks corresponding to the language you don‚Äôt wish to work in.\nOnce you have finished this assignment, render the document (Ctrl/Cmd-Shift-K or the Render button).\nCommit the qmd file and any other files you have changed to the repository and push your changes.\nIn Canvas, submit a link to your github repository containing the updated files.\n\n\nIntroduction to Fizzbuzz\nThe ‚ÄúFizzBuzz Test‚Äù is a famous programming interview question.\n\nWrite a program that prints the numbers from 1 to 30. But for multiples of three print ‚ÄúFizz‚Äù instead of the number and for the multiples of five print ‚ÄúBuzz‚Äù. For numbers which are multiples of both three and five print ‚ÄúFizzBuzz‚Äù\n\nStart by filling in the following table for the numbers 1:30 manually, to get a feel for the task.\n\nFizzbuzz for 1:30\n\n\nInput\nOutput\n\n\n\n\n1\n\n\n\n2\n\n\n\n3\n\n\n\n4\n\n\n\n5\n\n\n\n6\n\n\n\n7\n\n\n\n8\n\n\n\n9\n\n\n\n10\n\n\n\n11\n\n\n\n12\n\n\n\n13\n\n\n\n14\n\n\n\n15\n\n\n\n16\n\n\n\n17\n\n\n\n18\n\n\n\n19\n\n\n\n20\n\n\n\n21\n\n\n\n22\n\n\n\n23\n\n\n\n24\n\n\n\n25\n\n\n\n26\n\n\n\n27\n\n\n\n28\n\n\n\n29\n\n\n\n30\n\n\n\n\nOn paper or using a tool such as excalidraw.com, create a program flow map for the sequence of if-statements you need to evaluate for fizzbuzz. Add the picture to the folder containing this file, and name the picture flowchart.png. Add the picture to Git and commit/push your changes.\n\n\n\nProgram Flow map for FizzBuzz\n\n\nIn the chunk below, write code which will solve this problem for a single value x. You should be able to change the value of x at the top of the chunk and still get the correct answer.\n\nx &lt;- 3\n\n# FizzBuzz code goes here\n\n\nx = 3\n\n# FizzBuzz code goes here\n\nModify the code above so that the result is stored in a value y.\n\nx &lt;- 3\ny &lt;- NA\n# FizzBuzz code goes here\n\n\n\nprint(paste(\"For x = \", x, \" my code produces \", y, sep = \"\"))\n\n[1] \"For x = 3 my code produces NA\"\n\n\n\nimport numpy as np\nx = 3\ny = np.nan\n# FizzBuzz code goes here\n\n\n\nprint(\"For x = \"+ str(x)+ \" my code produces \"+ str(y))\n\nFor x = 3 my code produces nan\n\n\n\n\nA vector of FizzBuzz\nThe code in the previous problem only solves FizzBuzz for a single value of x. Extend your code using a loop so that it will work for all values in a vector xx, storing values in a corresponding vector yy.\nYou can copy/paste code from previous chunks to make this chunk easier.\n\nxx &lt;- 1:30\nyy &lt;- rep(NA, times = 30)\n\n# FizzBuzz code goes here\n\n\n# Printing the results in a data frame\nres &lt;- cbind(x = xx, result = yy)\nres\n\n       x result\n [1,]  1     NA\n [2,]  2     NA\n [3,]  3     NA\n [4,]  4     NA\n [5,]  5     NA\n [6,]  6     NA\n [7,]  7     NA\n [8,]  8     NA\n [9,]  9     NA\n[10,] 10     NA\n[11,] 11     NA\n[12,] 12     NA\n[13,] 13     NA\n[14,] 14     NA\n[15,] 15     NA\n[16,] 16     NA\n[17,] 17     NA\n[18,] 18     NA\n[19,] 19     NA\n[20,] 20     NA\n[21,] 21     NA\n[22,] 22     NA\n[23,] 23     NA\n[24,] 24     NA\n[25,] 25     NA\n[26,] 26     NA\n[27,] 27     NA\n[28,] 28     NA\n[29,] 29     NA\n[30,] 30     NA\n\n\n\nimport pandas as pd\nxx = np.array(range(30)) + 1\nyy = [np.nan]*30\n\n# FizzBuzz code goes here\n\n\n# Printing the results in a data frame\nres = pd.DataFrame({\"x\": xx, \"result\": yy})\nres\n\n     x  result\n0    1     NaN\n1    2     NaN\n2    3     NaN\n3    4     NaN\n4    5     NaN\n5    6     NaN\n6    7     NaN\n7    8     NaN\n8    9     NaN\n9   10     NaN\n10  11     NaN\n11  12     NaN\n12  13     NaN\n13  14     NaN\n14  15     NaN\n15  16     NaN\n16  17     NaN\n17  18     NaN\n18  19     NaN\n19  20     NaN\n20  21     NaN\n21  22     NaN\n22  23     NaN\n23  24     NaN\n24  25     NaN\n25  26     NaN\n26  27     NaN\n27  28     NaN\n28  29     NaN\n29  30     NaN\n\n\n\n\nFunctions and FizzBuzz\nIn the previous question, you extended your fizzbuzz code to iterate through a vector xx and produce a result yy. Can you generalize this, writing a function fizzbuzz that takes a variable x and returns a corresponding fizzbuzzified variable? Your function should be able to handle x that is a vector or a scalar value, and should store your solution in yy.\n\nxx &lt;- sample(1:100, 10) # get a random xx\nyy &lt;- rep(NA, 10)\n\nfizzbuzz &lt;- function(x) {\n  # Your code goes here\n}\n\nyy &lt;- fizzbuzz(x = xx)\n\n# Printing the results in a data frame\nres &lt;- cbind(x = xx, result = yy)\nres\n\n       x\n [1,] 45\n [2,] 83\n [3,]  7\n [4,]  1\n [5,] 56\n [6,] 27\n [7,] 42\n [8,] 70\n [9,] 96\n[10,] 69\n\n\n\nimport pandas as pd\nfrom random import choices\nxx = np.array(choices(range(100), k = 10)) + 1\n\n\ndef fizzbuzz(x):\n  y = [np.nan]*len(x) # this just defines something to return\n  # Your code goes here\n  return y\n\nyy = fizzbuzz(x = xx)\n\n# Printing the results in a data frame\nres = pd.DataFrame({\"x\": xx, \"result\": yy})\nres\n\n    x  result\n0  46     NaN\n1  48     NaN\n2  72     NaN\n3  15     NaN\n4  31     NaN\n5  14     NaN\n6   7     NaN\n7  89     NaN\n8  55     NaN\n9  97     NaN\n\n\n\n\nDefensive Programming\nYou cannot always assume that the person using your functions knows what they‚Äôre doing. Add a check to the function you wrote in the last question so that it will handle non-numeric input by issuing an error message.\nIn R, you can use the function stopifnot() to halt function execution if there is an error; this will give you a basic error message.\n\nstopifnot(2 &gt; 3)\n\nError: 2 &gt; 3 is not TRUE\n\n\nIn Python, you can use a try: statement with a except: clause. This functions like an if-else statement, where if no error occurs, the except statement is never executed.\n\ntry: \n  int(\"hello\")\nexcept ValueError: \n  print(\"Error: could not turn value into an integer\")\n\nError: could not turn value into an integer\n\n\nSee more examples of this in the Input Validation section of the textbook.\n\nxx &lt;- sample(1:100, 10) # get a random xx\nyy &lt;- rep(NA, 10)\n\nfizzbuzz &lt;- function(x) {\n  # Your code goes here\n}\n\nyy &lt;- fizzbuzz(x = xx)\n\n# Printing the results in a data frame\nres &lt;- cbind(x = xx, result = yy)\nres\n\n       x\n [1,] 23\n [2,] 17\n [3,] 90\n [4,] 64\n [5,] 63\n [6,] 85\n [7,] 87\n [8,] 73\n [9,]  9\n[10,] 54\n\n\n\nimport pandas as pd\nfrom random import choices\nxx = np.array(choices(range(100), k = 10)) + 1\n\n\ndef fizzbuzz(x):\n  y = [np.nan]*len(x) # this just defines something to return\n  # Your code goes here\n  return y\n\nyy = fizzbuzz(x = xx)\n\n# Printing the results in a data frame\nres = pd.DataFrame({\"x\": xx, \"result\": yy})\nres\n\n    x  result\n0  94     NaN\n1  94     NaN\n2  55     NaN\n3  84     NaN\n4   1     NaN\n5  20     NaN\n6  43     NaN\n7  56     NaN\n8  82     NaN\n9  94     NaN"
  },
  {
    "objectID": "homework/04.html",
    "href": "homework/04.html",
    "title": "Homework 4: Data Programming",
    "section": "",
    "text": "Note: This assignment must be submitted in github classroom.\nInstructions:"
  },
  {
    "objectID": "homework/04.html#r",
    "href": "homework/04.html#r",
    "title": "Homework 4: Data Programming",
    "section": "R",
    "text": "R\n\nmonth.name is a built-in vector containing month names that you can use to create a factor variable. Factor variables can be easily converted into numeric variables. This might help you get a numeric month, which might help you get to a fractional year.\nsubset() is a function that will subset a data frame based on a logical condition. It might be easier to use than logical indexing (though you can use either). You can also use the filter function in the dplyr package.\nTo get a line graph in ggplot2, use geom_line(). Using aes(color = varname) will color the lines by variable name.\nSome sample code to make a line graph in ggplot is provided below:\n\n\nlibrary(dplyr)\n# Get only January months so that there's one point a year\njan_data &lt;- subset(games, month == \"January\")\n\n# x axis is year, y axis is average players\n# group = gamename says draw one line for each game\nggplot(data = jan_data, \n       aes(x = year, y = avg, group = gamename)) + \n  geom_line()"
  },
  {
    "objectID": "homework/04.html#python",
    "href": "homework/04.html#python",
    "title": "Homework 4: Data Programming",
    "section": "Python",
    "text": "Python\n\nThe time module contains the strptime function, which may help you to get from month name to month number.\nPandas will let you sort a data frame in decreasing order of variable x using sort_values('x', ascending = False)\nYou can select rows of a python data frame that match a list using .isin() demo. Alternately, Pandas data frames have a method df.query() that allows you to pass a logical condition and select rows based on that. This may be easier to use than logical indexing (though you can use either).\nUsing the .assign() function to create new variables will reduce the number of errors you run into.\nTo get a line graph in plotnine, which is a clone of ggplot2 for python, use geom_line(). Using aes(color = 'varname') will color the lines by variable name. Some sample code to make a line graph in ggplot is provided below:\n\n\n# Get only January months so that there's one point a year\njan_data = games.query('month == \"January\"')\n\n# x axis is year, y axis is average players\n# group = gamename says draw one line for each game\n(\n  ggplot(jan_data, \n       aes(x = 'year', y = 'avg', group = 'gamename')) + \n  geom_line()\n)\n  \n\n&lt;ggplot: (8757209214415)&gt;"
  },
  {
    "objectID": "homework/05.html",
    "href": "homework/05.html",
    "title": "Chocolate Chip Cookies",
    "section": "",
    "text": "Note: This assignment must be submitted in github classroom."
  },
  {
    "objectID": "homework/05.html#reading-in-the-data",
    "href": "homework/05.html#reading-in-the-data",
    "title": "Chocolate Chip Cookies",
    "section": "Reading In the Data",
    "text": "Reading In the Data\nFirst, read in the CSV data of cookie ingredients. Make sure that your end-result data has appropriate types for each column - these should match the types provided in the documentation in the README.md file."
  },
  {
    "objectID": "homework/05.html#exploratory-data-analysis",
    "href": "homework/05.html#exploratory-data-analysis",
    "title": "Chocolate Chip Cookies",
    "section": "Exploratory Data Analysis",
    "text": "Exploratory Data Analysis\nExploratory data analysis is the process of getting familiar with your dataset. To get started, this blog post provides a nice checklist to get you thinking:\n\n\nWhat question(s) are you trying to solve (or prove wrong)?\nWhat kind of data do you have and how do you treat different types?\nWhat‚Äôs missing from the data and how do you deal with it?\nWhere are the outliers and why should you care about them?\nHow can you add, change or remove features to get more out of your data?\n\n\n\nGenerating Questions\nGenerate at least 5 questions you might explore using this database of cookie ingredients.\n\n\n\n\n\n\n\n\n\nSkimming the Data\nOne thing we often want to do during EDA is to examine the quality of the data - are there missing values? What quirks might exist in the dataset?\nThe skimr package in R, and the similar skimpy package in python (which has a much better name, in my opinion), can help provide visual summaries of the data.\nInstall both packages, and read the package documentation (R, Python).\n[Part 1] Use each package and generate summaries of your data that require the use of at least some non-default options in each package‚Äôs skim function.\n[Part 2] Write 1-2 sentences about what you can tell from each summary display you generate. Did you discover anything new about the data?\n\n\nGenerating Tables\nAnother useful technique for exploratory data analysis is to generate summary tables. You may want to use the dplyr package in R (group_by or count functions), as well as the groupby and count methods in Pandas. Python example, R example\n[Part 1] Using R and Python, generate a table that shows what proportion of recipes contain each type of ingredient, for the most common 20 ingredients.\n[Part 2] Print out a character string that lists all of the ingredients that do not appear in at least 20 recipes.\n(Delete this note, but you can include data values inline in markdown text by using backticks, at least in R. For instance, here is R‚Äôs built in value for pi: 3.1415927. Unfortunately, this doesn‚Äôt work in python using the knitr markdown engine, but you can print the list out in python anyways using a code chunk.)\n\n\nVisualization\nUsing whatever plotting system you are comfortable with in R or python, see if you can create a couple of useful exploratory data visualizations which address one of the questions you wrote above - or another question which you‚Äôve come up with as you‚Äôve worked on this assignment.\n[Part 1] Create at least one plot (it doesn‚Äôt have to be pretty) that showcases an interesting facet of the data.\n[Part 2] Write 2-3 sentences about what you can learn from that plot and what directions you might want to investigate from here."
  },
  {
    "objectID": "homework/06.html",
    "href": "homework/06.html",
    "title": "String Processing and Data Wrangling in R and Python",
    "section": "",
    "text": "Note: This assignment must be submitted in github classroom."
  },
  {
    "objectID": "homework/06.html#content-warning",
    "href": "homework/06.html#content-warning",
    "title": "String Processing and Data Wrangling in R and Python",
    "section": "Content Warning",
    "text": "Content Warning\nThese poems may address adult topics and/or use strong or vulgar language, as they are taken from Reddit. I have not censored them in any way because I want you to work with data that is realistic. You should find a few test cases which you are comfortable with to use to test out your code, but you do not need to read all of the poems (and in both cases, I‚Äôve provided you with approximately 1000 samples, so it‚Äôs probably too much to read in any case).\nHere are 5 indices (counting from 1) which are approximately G or PG in content for each poet, using the most recent snapshot CSV (20230806):\n\nSprog poems: 2, 6, 7, 8, 9\nSchnoodleDoodleDo poems: 1, 2, 3, 4, 5\n\nThese should be sufficient for you to test your code even if you are worried about being exposed to adult themes or language during this activity."
  },
  {
    "objectID": "homework/06.html#splitting-poems-into-lines",
    "href": "homework/06.html#splitting-poems-into-lines",
    "title": "String Processing and Data Wrangling in R and Python",
    "section": "Splitting Poems into Lines",
    "text": "Splitting Poems into Lines\nSplit the poem into lines and create a data frame that has\n\na new column called poem_id, numbered from one to the total number of poems by the poet in question\na new variable called line that contains the text of each line of the poem (one row per poem line). To get this, you may need to split the comment string by the endline character (\\n) and then unnest or expand your data frame.\na new variable called line_no that contains the line number of the poem. This should be computed per poem.\n\nEnsure that you are splitting lines by a string which makes sense. Some poems have multiple paragraphs (stanzas) and may have a blank line in between; you want to preserve this blank line as it will help you make sense of the poem. Some poems instead have blank lines between every line of the poem; in these cases, you may want to split by e.g.¬†\\n\\n instead of \\n.\nSee Part 1 Checkpoint for an example of what the output should look like from each poet."
  },
  {
    "objectID": "homework/06.html#summarizing-poems",
    "href": "homework/06.html#summarizing-poems",
    "title": "String Processing and Data Wrangling in R and Python",
    "section": "Summarizing Poems",
    "text": "Summarizing Poems\nFor each poem, create a summary data frame that contains:\n\nAverage number of words per line in the poem\nNumber of lines in the poem\nNumber of characters which are not letters or spaces (punctuation, numbers, and any non-ASCII characters)\nNumber of uppercase letters in the poem\nNumber of lowercase letters in the poem\n\nCreate a plot showing the distribution of the number of words per line across all poems you have in your dataset. Create another plot showing the number of lines in the poem for all poems in your dataset. What does this tell you about the ‚Äúaverage‚Äù style of the poet in question?\nSee Part 2 Checkpoint for an example of what the output should look like from each poet."
  },
  {
    "objectID": "homework/06.html#poetry-analysis",
    "href": "homework/06.html#poetry-analysis",
    "title": "String Processing and Data Wrangling in R and Python",
    "section": "Poetry Analysis",
    "text": "Poetry Analysis\nChoose some characteristic(s) of the poet‚Äôs style to explore graphically. If necessary, create a subset of the data with poems relevant to your question before you generate numerical summaries. You may want to clean up the data and remove lines which contain quotes (e.g.¬†start with a &gt; character) or horizontal lines in reddit markdown (e.g.¬†only have ----).\nSome ideas to get you started thinking:\n\nNumber of syllables per line may be used to infer rhyming scheme and/or poetry style. You can use the qdap package in R, which contains the syllable_sum function to count the number of syllables in a sentence. You may need to use a for-loop or program a custom function to use the syllables function on every entry in your data frame column.\nUse of non-alphabetic characters. Schnoodle often uses emoji and other text annotations to convey emotions and excitement - how often do these types of annotations appear in their poems?\nCommon characters and phrases. Sprog writes poems frequently about a character named Timmy (who often meets a horrible end). Do these poems have a common format/style/rhyme scheme?\nSprog often writes longer poems with multiple stanzas. Identify which poems have multiple stanzas (Hint, look for blank lines in a systematic pattern) and show the distribution of stanza length, stanza variation within poems, and number of stanzas in each poem.\nSchnoodle often misspells words intentionally (using e.g.¬†fren instead of friend) to convey that they are writing using an animal‚Äôs voice. What proportion of words are misspelled in each poem? How much does this proportion vary? Based on the distribution, how likely is it, in your opinion, that Schnoodle misspells words more often when speaking as one type of animal than another? You can use the hunspell package in R to detect whether words are likely misspelled."
  },
  {
    "objectID": "homework/06.html#splitting-poems-into-lines-1",
    "href": "homework/06.html#splitting-poems-into-lines-1",
    "title": "String Processing and Data Wrangling in R and Python",
    "section": "Splitting Poems into Lines",
    "text": "Splitting Poems into Lines\nSplit the poem into lines and create a data frame that has\n\na new column called poem_id, numbered from one to the total number of poems by the poet in question\na new variable called line that contains the text of each line of the poem (one row per poem line). To get this, you may need to split the comment string by the endline character (\\n) and then unnest or expand your data frame.\na new variable called line_no that contains the line number of the poem. This should be computed per poem.\n\nEnsure that you are splitting lines by a string which makes sense. Some poems have multiple paragraphs (stanzas) and may have a blank line in between; you want to preserve this blank line as it will help you make sense of the poem. Some poems instead have blank lines between every line of the poem; in these cases, you may want to split by e.g.¬†\\n\\n instead of \\n. See Part 1 Checkpoint for an example of what the output should look like from each poet."
  },
  {
    "objectID": "homework/06.html#summarizing-poems-1",
    "href": "homework/06.html#summarizing-poems-1",
    "title": "String Processing and Data Wrangling in R and Python",
    "section": "Summarizing Poems",
    "text": "Summarizing Poems\nFor each poem, create a summary data frame that contains:\n\nAverage number of words per line in the poem\nNumber of lines in the poem\nNumber of characters which are not letters or spaces (punctuation, numbers, and any non-ASCII characters)\nNumber of uppercase letters in the poem\nNumber of lowercase letters in the poem\n\nCreate a plot showing the distribution of the number of words per line across all poems you have in your dataset. Create another plot showing the number of lines in the poem for all poems in your dataset. What does this tell you about the ‚Äúaverage‚Äù style of the poet in question?"
  },
  {
    "objectID": "homework/06.html#poetry-analysis-1",
    "href": "homework/06.html#poetry-analysis-1",
    "title": "String Processing and Data Wrangling in R and Python",
    "section": "Poetry Analysis",
    "text": "Poetry Analysis\nChoose some characteristic(s) of the poet‚Äôs style to explore graphically. If necessary, create a subset of the data with poems relevant to your question before you generate numerical summaries. You may want to clean up the data and remove lines which contain quotes (e.g.¬†start with a &gt; character) or horizontal lines in reddit markdown (e.g.¬†only have ----).\nSome ideas to get you started thinking:\n\nNumber of syllables per line may be used to infer rhyming scheme and/or poetry style. You can use the syllables python package. You may need to use a for-loop or program a custom function to use the syllables function on every entry in your data frame column.\nUse of non-alphabetic characters. Schnoodle often uses emoji and other text annotations to convey emotions and excitement - how often do these types of annotations appear in their poems?\nCommon characters and phrases. Sprog writes poems frequently about a character named Timmy (who often meets a horrible end). Do these poems have a common format/style/rhyme scheme?\nSprog often writes longer poems with multiple stanzas. Identify which poems have multiple stanzas (Hint, look for blank lines in a systematic pattern) and show the distribution of stanza length, stanza variation within poems, and number of stanzas in each poem.\nSchnoodle often misspells words intentionally (using e.g.¬†fren instead of friend) to convey that they are writing using an animal‚Äôs voice. What proportion of words are misspelled in each poem? How much does this proportion vary? Based on the distribution, how likely is it, in your opinion, that Schnoodle misspells words more often when speaking as one type of animal than another? You can use one of the python packages discussed in this post to detect whether words are likely misspelled."
  },
  {
    "objectID": "homework/07.html",
    "href": "homework/07.html",
    "title": "Homework 07: Murder in SQL City",
    "section": "",
    "text": "Note: This assignment must be submitted in github classroom."
  },
  {
    "objectID": "homework/07.html#instructions",
    "href": "homework/07.html#instructions",
    "title": "Homework 07: Murder in SQL City",
    "section": "Instructions",
    "text": "Instructions\nNorthwestern University‚Äôs Knight lab created a SQL murder mystery to help users sharpen their database skills by solving the crime that happened at SQL city. There are tables with different pieces of information - social media checkins, people, drivers licenses, crime scene reports, police interviews, and more.\nPick R or Python, and solve the murder mystery, showing all of your work in this document.\nYour solution must be reproducible ‚Äì that is, you should use dplyr verbs, table joins, etc. to solve the mystery, rather than just looking through the tables yourselves.\nYou may work in groups of 2-4 people on this assignment. Each person should turn in their own assignment, but should list their group members as authors.\nMake sure you do your due diligence! You should double check your answer and print out the guilty party‚Äôs interview from the database.\nFor 5 bonus points, when you‚Äôre finished in one language, write equivalent code in the other language to solve the problem.\nWhen you are finished with the assignment:\n\nOnce you have finished this assignment, render the document (Ctrl/Cmd-Shift-K or the Render button).\nCommit the qmd file and any other files you have changed to the repository and push your changes.\nIn Canvas, submit a link to your github repository containing the updated files.\nProvide the name of the guilty party in the text input field on Canvas, and make sure all of your work is on GitHub to receive full credit.\n\nThe chunks below use the code to read in each of the 8 tables of data for this assignment.\nHints:\n\nYou can use a lot of filter statements, but it will in many cases be easier to use joins.\nSee if you can write code that doesn‚Äôt require you to type out knowledge gained from a previous clue (e.g.¬†pipe your results from one query into the next)\n\n\nA crime has taken place and the detective needs your help. The detective gave you the crime scene report, but you somehow lost it. You vaguely remember that the crime was a murder that occurred sometime on January 15, 2018 and that it took place in SQL City. All the clues to this mystery are buried in a huge database, and you need to use R and SAS to navigate through this network of information. Your first step to solving the mystery is to retrieve the corresponding crime scene report from the police department‚Äôs database.\nThis database schema may help you figure out how to navigate the database:\n\n\n\nsql-murder-mystery database schema diagram"
  },
  {
    "objectID": "homework/07.html#r",
    "href": "homework/07.html#r",
    "title": "Homework 07: Murder in SQL City",
    "section": "R",
    "text": "R\n\nlibrary(RSQLite)\nlibrary(DBI)\n\n# Your database connection code goes here. Store the connection as con \ncon &lt;- dbConnect(RSQLite::SQLite(), \"sql-murder-mystery.db\")\n\ntable_names &lt;- c(\"crime_scene_report\", \n                 \"drivers_license\", \n                 \"facebook_event_checkin\",\n                 \"get_fit_now_check_in\", \n                 \"get_fit_now_member\", \n                 \"income\", \n                 \"interview\",\n                 \"person\")\n\n# For each table name, read the tables in and store them as the name of the table\npurrr::walk(table_names, function(x) {\n  assign(x, dbReadTable(con, x), envir = .GlobalEnv)\n})\n\n# close the connection when you're done\ndbDisconnect(con)"
  },
  {
    "objectID": "homework/07.html#python",
    "href": "homework/07.html#python",
    "title": "Homework 07: Murder in SQL City",
    "section": "Python",
    "text": "Python\n\nimport pandas as pd\nimport sqlite3\n\n# Read sqlite query results into a pandas DataFrame\ncon = sqlite3.connect(\"sql-murder-mystery.db\")\n\ncrime_scene_report = pd.read_sql_query(\"SELECT * from crime_scene_report\", con)\ndrivers_license = pd.read_sql_query(\"SELECT * from drivers_license\", con)\nfacebook_event_checkin = pd.read_sql_query(\"SELECT * from facebook_event_checkin\", con)\nget_fit_now_check_in = pd.read_sql_query(\"SELECT * from get_fit_now_check_in\", con)\nget_fit_now_member = pd.read_sql_query(\"SELECT * from get_fit_now_member\", con)\nincome = pd.read_sql_query(\"SELECT * from income\", con)\ninterview = pd.read_sql_query(\"SELECT * from interview\", con)\nperson = pd.read_sql_query(\"SELECT * from person\", con)\n\n# Verify that result of SQL query is stored in the dataframe\nprint(crime_scene_report.head())\n\n       date  ...      city\n0  20180115  ...       NYC\n1  20180115  ...    Albany\n2  20180115  ...      Reno\n3  20180215  ...  SQL City\n4  20180215  ...  SQL City\n\n[5 rows x 4 columns]\n\n\ncon.close()"
  },
  {
    "objectID": "homework/08-results.html",
    "href": "homework/08-results.html",
    "title": "Ugly Charts- 2023 Results",
    "section": "",
    "text": "Click on the chart to maximize it!"
  },
  {
    "objectID": "homework/08.html",
    "href": "homework/08.html",
    "title": "Homework: Data Visualization",
    "section": "",
    "text": "Note: This assignment must be submitted in github classroom."
  },
  {
    "objectID": "homework/08.html#instructions",
    "href": "homework/08.html#instructions",
    "title": "Homework: Data Visualization",
    "section": "Instructions",
    "text": "Instructions\n\nOnce you have finished this assignment, render the document (Ctrl/Cmd-Shift-K or the Render button).\nCommit the qmd file and any other files you have changed to the repository and push your changes.\nIn Canvas, submit a link to your github repository containing the updated files."
  },
  {
    "objectID": "homework/08.html#swiss-banknotes",
    "href": "homework/08.html#swiss-banknotes",
    "title": "Homework: Data Visualization",
    "section": "Swiss Banknotes",
    "text": "Swiss Banknotes\nThe R package mclust contains a data set called banknote, consisting of (physical) measurements on 200 Swiss bank notes, 100 of which are genuine, while the other half is counterfeit. I‚Äôve saved this data as banknote.csv in this repository.\n\nUse one of the object inspecting functions and describe the data set - what do the variables appear to mean?\n\nHint: You can read about the dataset by running library(mclust) and then ?banknote - this will provide some additional context.\n\nDraw a barchart of Status. Also, map status to the fill color of the bars. (Yes, this plot is a bit simplistic, but what does it show?)\nDelete this ordered list and write something that includes the following details\n\nwhat type of plot is it?\nWhich variables are mapped to x, to y, and to the (fill) color?\nWhat is the main message of the plot: what is your main finding, i.e.¬†what do you want viewers to learn from the plot?\nAre there any anomalies or outliers?\n\nDraw a histogram of one of the variables in the dataset that shows a distinction between genuine and counterfeit banknotes. Use fill color to show this difference. Choose the binwidth such that there are no gaps in the middle range of the histogram.\nDelete this ordered list and write something that includes the following details\n\nwhat type of plot is it?\nWhich variables are mapped to x, to y, and to the (fill) color?\nWhat is the main message of the plot: what is your main finding, i.e.¬†what do you want viewers to learn from the plot?\nAre there any anomalies or outliers?\n\nDraw a scatterplot of two (continuous) measurements, color by whether the banknote is genuine or fake. Try to find a pair of measurements that provides as much separation as possible between the clusters of points for genuine and counterfeit banknotes.\nDelete this ordered list and write something that includes the following details\n\nwhat type of plot is it?\nWhich variables are mapped to x, to y, and to the (fill) color?\nWhat is the main message of the plot: what is your main finding, i.e.¬†what do you want viewers to learn from the plot?\nAre there any anomalies or outliers?"
  },
  {
    "objectID": "homework/08.html#take-everything-you-know-and-use-it-for-evil",
    "href": "homework/08.html#take-everything-you-know-and-use-it-for-evil",
    "title": "Homework: Data Visualization",
    "section": "Take everything you know, and use it for evil",
    "text": "Take everything you know, and use it for evil\nThe textbook spent lots of time showing you how to create different types of graphics, but I spent a lot less time showing you all of the different ways you could customize graphics in any plotting library. In this problem, I want you to create the ugliest graphs you can, and then explain why, exactly, you made the decisions you did, and which principles of good graphics you‚Äôve intentionally violated.\nUgliness is subjective, so the goal here is for you to explore the different ways you can customize the finer details of a plot.\nRequirements: - Your finished masterpiece must have appropriate axis labels and a title (after all, even ugly plots need to be correctly labeled!). - Your ugliness should not depend solely on color choices - there are many other ways to make things ugly!\nYou are free to add additional variables and layers, modify the aesthetics used, and leverage other packages. If you use packages I haven‚Äôt used in the book, please provide (commented out) installation code in your code chunks so that I know where the package is from (this is especially important if it‚Äôs from GitHub and not CRAN or pip).\nIf you need inspiration, look here.\nUse the palmerpenguins data, which has been exported into penguins.csv\nCreate the ugliest graph you can manage with each language. You can pick which variables to plot, what type of chart to make, and what aesthetic mappings to use.\n\nPart 1: R\nDelete this line and explain why your graph is ugly - what principles of good graphics have you violated?\n\n\nPart 2: Python\nDelete this line and explain why your graph is ugly - what principles of good graphics have you violated?"
  },
  {
    "objectID": "homework/08.html#useful-references",
    "href": "homework/08.html#useful-references",
    "title": "Homework: Data Visualization",
    "section": "Useful References",
    "text": "Useful References\n\nCustomizing ggplot2 graphics\nCustomizing Seaborn graphics\nA group-created slideshow of awful graphics"
  },
  {
    "objectID": "homework/09.html",
    "href": "homework/09.html",
    "title": "Week 9 Debugging Excercises",
    "section": "",
    "text": "In the following examples, evaluate each problem using the criteria of a minimal reproducible example from this StackOverflow post.\nSpecifically, address the following things:\n\nAre the question and problem description complete?\nIs the issue reproducible? Does it have a description of the problem, with code that reproduces the problem? What could improve it?\nIs the example minimal? Does it include extra code or information that is not necessary?\nDoes the question describe any attempted solutions?\n\nThen, using what you know about R and Python, try to debug the problem using the strategies in the debugging chapter. Once you are thoroughly stumped, or you believe you have solved the problem, compare your solutions to those given on StackOverflow using the link.\n\nWhy Doesn‚Äôt this R function work?\n\nI created the following function to append new strings on a vector of strings called ‚Äúmeals‚Äù. However, when I use this function to append an string input into my ‚Äúmeals‚Äù vector, it does not work.\n\n add &lt;- function(str) {\n      meals &lt;- append(meals, as.character(str))  \n    }\nLink to original SO post.\n\n\nFunction not working R\n\nI‚Äôve never programmed before and am trying to learn. I‚Äôm following that ‚Äúcoursera‚Äù course that I‚Äôve seen other people post about ‚Äî a course offered by Johns Hopkins on R programming.\n\n\nAnyway, this was supposed to be my first function. Yet, it doesn‚Äôt work! But when I type out all the steps individually, it runs just fine‚Ä¶ Can anyone tell me why?\n\npollutantmean &lt;- function(directory, pollutant, id = 1:332){\n    x&lt;- list.files(\"/Users/mike******/Desktop/directory\", full.names=TRUE)\n    y&lt;- lapply(x, read.csv)\n    z&lt;- do.call(rbind.data.frame, y[id])\n\n    mean(z$pollutant, na.rm=TRUE)\n}\npollutantmean(specdata,nitrate,1:10)\n[1] NA\nWarning message:\nIn mean.default(z$pollutant, na.rm = TRUE) :\n  argument is not numeric or logical: returning NA\n\n####\n\nx&lt;- list.files(\"/Users/mike******/Desktop/specdata\",full.names=TRUE)\ny&lt;- lapply(x,read.csv)\nz&lt;- do.call(rbind.data.frame,y[1:10])\nmean(z$nitrate,na.rm=TRUE)\n[1] 0.7976266\nLink\n\n\nInexplicable error when trying to export my R notebook\n\nGetting this error from R Markdown when trying to export my .RMD\n\n\"Error in filter(Gastropods, Species == \"Cellana\") :  object 'Species' not found Calls: &lt;Anonymous&gt; ... withCallingHandlers -&gt; withVisible -&gt; eval -&gt; eval -&gt; filter\"\n\nHowever, all my plots are coming out successfully. I can clearly see in the data that the species column is there and that Cellana is a species. No spelling errors or anything.\n\n\nMy first 20 or so lines of code are below\n\n---\ntitle: \" Lab Report 2 - z5016113\"\noutput: html_notebook\ni---\n\n#1. Gastropod abundance vs. height on the shore\n\n```{r}\nGastropods &lt;- read.csv(file = \"MaroubraZones.csv\", header = TRUE)\nlibrary(ggplot2, dplyr)\n```\n\n```{r}\nGastropods$Zone &lt;- factor(Gastropods$Zone, levels = c(\"Low\", \"Mid\", \"High\"))\n```\n\n```{r}\nCellana &lt;- filter(Gastropods, Species == \"Cellana\")  ------&gt; This line is causing the error\n```\n\n```{r}\nggplot(Cellana, aes(Zone, Abundance)) + geom_boxplot()\n```\nYou can find this sample file here\nLink\n\n\nPython if elif else statement\n\nI‚Äôm trying to create a program with python that calculate the cost for shipping.\n\n\nHowever, I can‚Äôt run the program to where it works properly.\n\n\nWhat ever my total is the same amount comes out as $6 for US and $8 for Canada. I can‚Äôt seem to get pass that.\n\n\nExample:\n\ntotal = raw_input('What is the total amount for your online shopping?')\ncountry = raw_input('Shipping within the US or Canada?')\n\nif country == \"US\":\n    if total &lt;= \"50\":\n        print \"Shipping Costs $6.00\"\n    elif total &lt;= \"100\":\n            print \"Shipping Costs $9.00\"\n    elif total &lt;= \"150\":\n            print \"Shipping Costs $12.00\"\n    else:\n        print \"FREE\"\n\nif country == \"Canada\":\n    if total &lt;= \"50\":\n        print \"Shipping Costs $8.00\"\n    elif total &lt;= \"100\":\n        print \"Shipping Costs $12.00\"\n    elif total &lt;= \"150\":\n        print \"Shipping Costs $15.00\"\n    else:\n        print \"FREE\"\nLink"
  },
  {
    "objectID": "homework/10.html",
    "href": "homework/10.html",
    "title": "Homework 10: Professional Communication",
    "section": "",
    "text": "Note: This assignment must be submitted in github classroom."
  },
  {
    "objectID": "homework/10.html#instructions",
    "href": "homework/10.html#instructions",
    "title": "Homework 10: Professional Communication",
    "section": "Instructions",
    "text": "Instructions\n\nPart 1\nFor this assignment, you will create a set of slides in at least two different programs ‚Äì one that requires beamer/LaTeX and one that is HTML-based (reveal.js, xaringan, etc.). You may pick any of the libraries mentioned in the textbook or any modules you discover online.\nIn your slides, I‚Äôd like you to introduce yourself, provide some basic biographical information (birthday, where you grew up, what program you‚Äôre in, and when you expect to graduate). On subsequent slides, you should provide:\n\nA picture of your favorite animal\nYour favorite plot (can be one you‚Äôve already generated in this class), which should be generated as part of your document (you can‚Äôt just include the picture).\nA link to your CV, which you will create in the next part.\n\nYou should not show any code, automatically generated error messages, etc. in your generated files - you should only show the end product.\nThese slide decks should have at most 5 slides (title, introduction, animal picture, plot, and CV link), so hopefully they won‚Äôt take too much time. The goal of the assignment is that you will be familiar with the advantages and disadvantages of each slide ecosystem.\n\n\nPart 2\nUse one of the CV packages mentioned in the textbook (or another LaTeX or markdown CV package that you want to try) to create a basic CV. I will not be grading the CV on how much content there is, so don‚Äôt worry if you don‚Äôt have publications, etc. You can add a fake publication if you want, just put the title as XXX sample XXX or something.\nYou can customize your CV as you like ‚Äì it‚Äôs a good idea to keep your CV up to date, so take the time to do that now if you want.\nAnother good source for CV templates is Overleaf\n\n\nPart 3\nUse a GitHub pages site (.github.io) to host your CV and slide decks.\nSteps: 1. Set up github pages for your user, as in the video. Make sure your repository is set to be public. 2. In your .github.io repository, upload your CV and slides. 3. In your .github.io repository, edit the README.md file to link to your CV and slides. You can use local links (e.g.¬†[link text](file.html)). This will allow you to navigate from .github.io to your slides and CV so that you can get good links.\nUpload the link to your .github.io page to Canvas to complete this assignment.\nNote, this assignment does not require you to make changes to this file or repository. All of your work will be done in your .github.io repository, which will be public.\nSome things to keep in mind:\n\nYou don‚Äôt need to commit every file latex/markdown generates: only commit the essentials:\n\nsource document,\nany file dependencies (like pictures or data), and\nthe final result (if you are planning to make the final result available online).\n\nWhen you ask for help, remember to make your question as reproducible as possible!\n\nUpload the link to the compiled index.html file to Canvas to complete this assignment."
  },
  {
    "objectID": "homework/11.html",
    "href": "homework/11.html",
    "title": "Homework: Simulation",
    "section": "",
    "text": "Note: This assignment must be submitted in github classroom."
  },
  {
    "objectID": "homework/11.html#is-it-in-the-cards",
    "href": "homework/11.html#is-it-in-the-cards",
    "title": "Homework: Simulation",
    "section": "Is it in the cards?",
    "text": "Is it in the cards?\nIn this task, you will create a simulation of Blackjack, a card game which is played with 52 cards.\nThis homework file is set up to demonstrate how this would be done with the game of hearts.\nYou don‚Äôt need to necessarily simulate the full game mechanism, but you do need to implement enough of the game mechanism that you can identify an interesting probability question and answer the question using a simulation.\n\nIdentify a Question\n\n\n\n\n\n\nNote\n\n\n\nGuidelines:\n\nYour question should be something that is not easily answerable with obviously constructed probability calculations.\nSome options include: - Compute the probability of going bust given that you have N cards in your hand. (You can ignore the rules about splitting your hand if you get two cards of the same denomination) - Compute the probability of going bust given that your original two cards total 9, 10, or 11 (doubling down) - Compare the probability of going bust with N cards in your hand if one of the cards you were originally dealt was an Ace (which can count as 1 or 11) vs.¬†if you know that you do not have an Ace. - Evaluate two competing strategies for Blackjack to see which one has a higher success probability. - Compare strategies for Blackjack with strategies for a similar card game (31), in which the player only goes bust when the cards total more than 31.\n\nYou are not limited to the options above, but your question must be complex enough that it would require a simulation of the game‚Äôs mechanics beyond the initial shuffle.\n\n\n\n\nSet up your objects\n\n\n\n\n\n\nCaution\n\n\n\nThink very carefully about how you want to set up your simulation. It is almost always easier to describe the position of all of the cards in the deck using a single data frame than it is to maintain separate data frames of multiple cards for each player and for the discard pile and undealt cards.\n\n\nFirst, you must set up a data frame describing all possible values of your playing items. A standard deck of 52 playing cards might be described using a data frame which has columns for suit and value, and you may want to make value a factor variable (your call on that one). If your game requires that players hold cards in their hand, you may also want to have a column indicating location (deck, discard, player_x).\nDelete this and write out some pseudocode (first) and then functions (after the pseudocode) to set up your deck for gameplay.\n\nPseudocode: Set up\n\n\nFunctions: Set up\n\n\n\nWrite Pseudocode to describe how your game will be played\n\n\n\n\n\n\nCaution\n\n\n\nNote that this pseudocode should be written focused on how you will record the game‚Äôs progression in a computer simulation. It‚Äôs relatively easy to write pseudo‚Äùcode‚Äù to describe the instructions for playing the game, but it‚Äôs entirely a different thing to write pseudocode for how to simulate gameplay computationally.\nSee hearts.qmd for an example of the level of detail I‚Äôm looking for here.\n\n\n\n\n\nWrite functions to play the game\n\nIf you are simulating a game where all cards are initially held by players, you need to have a function that randomly assigns 13 cards to each player.\nYou may want a function that controls the game play and functions for each separate step in game play (some of these functions may need to be called using a loop).\nIn Blackjack, I would expect that you would have a function for the initial deal, a function to determine what logic should be used under each condition, and a scoring function, at minimum.\n\nDescribe the main goal of your function with a header\nYour code chunk and any demonstration of the function‚Äôs use should go here.\n\n\nYou should have a couple of sub-headers\nEach sub-header should correspond to one or two steps of the pseudocode written above.\n\n\n\nUse your functions to simulate a game and evaluate your question\nRun your simulation with an increasing number of iterations and create one or more plots showing your results.\nDescribe any issues you encountered in your simulation, and how you addressed them (or where the whole thing went off the rails, if you couldn‚Äôt address everything in time)."
  },
  {
    "objectID": "homework/12.html",
    "href": "homework/12.html",
    "title": "Homework 12: Shiny",
    "section": "",
    "text": "Note: This assignment must be submitted in github classroom."
  },
  {
    "objectID": "homework/12.html#instructions",
    "href": "homework/12.html#instructions",
    "title": "Homework 12: Shiny",
    "section": "Instructions",
    "text": "Instructions\nUse the TidyTuesday Cocktail Data to create a shiny applet containing the following:\n\nA visual exploration of the cocktail data\nA way for a user to search through cocktail recipes by ingredient\n\nYour applet should make use of reactivity in both components, but the specifics of what you do and how you do it are up to you.\nOnce you‚Äôre satisfied with your applet, upload it to ShinyApps.io. You should be able to use the free hosting - you‚Äôre not creating any high-traffic applications yet.\nYou can find the instructions for deploying your application here.\nWhen you‚Äôve deployed your application, edit this README to contain a link to your applet."
  },
  {
    "objectID": "homework/hearts.html",
    "href": "homework/hearts.html",
    "title": "Homework 11: Simulation",
    "section": "",
    "text": "In this task, you will create a simulation of Hearts, a card game which is played with 52 cards.\nYou may also work with a different game if you get approval from me before you start. You may want to avoid games which require a large amount of strategy, skill, and bluffing, such as poker.\nThis homework file is set up to demonstrate how this would be done with the game of hearts.\nYou don‚Äôt need to necessarily simulate the full game mechanism, but you do need to implement enough of the game mechanism that you can identify an interesting probability question and answer the question using a simulation.\n\n\n\n\n\n\n\n\nNote\n\n\n\nGuidelines:\n\nYour question should be something that is not easily answerable with obviously constructed probability calculations.\nSome options include: - Compute the probability of going bust given that you have N cards in your hand. (You can ignore the rules about splitting your hand if you get two cards of the same denomination) - Compute the probability of going bust given that your original two cards total 9, 10, or 11 (doubling down) - Compare the probability of going bust with N cards in your hand if one of the cards you were originally dealt was an Ace (which can count as 1 or 11) vs.¬†if you know that you do not have an Ace. - Evaluate two competing strategies for Blackjack to see which one has a higher success probability. - Compare strategies for Blackjack with strategies for a similar card game (31), in which the player only goes bust when the cards total more than 31.\n\nYou are not limited to the options above, but your question must be complex enough that it would require a simulation of the game‚Äôs mechanics beyond the initial shuffle.\n\n\nBefore I explain my question, a quick story:\nWhen my parents taught us hearts (I was about 11, my sister would have been 9), the first time we played they taught us simplified rules:\n\ntry to get the fewest hearts\nthe person with the most hearts gets the highest score (low is good)\ntry to avoid the queen of spades, because that‚Äôs 13 points.\n\nThey didn‚Äôt mention the fact that if you got all the hearts and the queen of spades, you ‚Äúshot the moon‚Äù and scored 0, and everyone else got 26 points. During that first game, I was trying as hard as I could, and I kept getting hearts! By the end of the round, I was trying very hard not to cry, only to find out that I‚Äôd shot the moon and everyone else got all of the points - I was in the lead! It was a very confusing game.\nFundamentally, my question is: What is the probability that a player using relatively little (no) strategy accidentally ‚Äúshoots the moon‚Äù in a game of hearts?\n\n\n\n\n\n\n\n\n\nCaution\n\n\n\nThink very carefully about how you want to set up your simulation. It is almost always easier to describe the position of all of the cards in the deck using a single data frame than it is to maintain separate data frames of multiple cards for each player and for the discard pile and undealt cards.\n\n\nFirst, you must set up a data frame describing all possible values of your playing items. A standard deck of 52 playing cards might be described using a data frame which has columns for suit and value, and you may want to make value a factor variable (your call on that one). If your game requires that players hold cards in their hand, you may also want to have a column indicating location (deck, discard, player_x).\n\n\n\nPseudocode: Set up objects\n\nCreate a tibble with 4 suits and 13 values labeled \n    Ace, 2:10, J, Q, K\nAdd point values\nAdd card ID numbers\n(Eventually) add location column - defer to a later step\nRemove any cards from the deck not necessary for game play\n\n\n\n\ncreate_deck &lt;- function() {\n  # Set up cards\n  suits &lt;- c(\"hearts\", \"diamonds\", \"spades\", \"clubs\")\n  \n  values &lt;- factor(1:13, labels = c(2:10, \"Jack\", \"Queen\", \"King\", \"Ace\"))\n  deck &lt;- crossing(suit = suits, value = values)\n\n  # Set up points\n  # This will change depending on which game you want to simulate\n  # I have demonstrated this using hearts \n  deck %&gt;%\n    mutate(points = (suit == \"hearts\") +\n             13*(suit == \"spades\" & value == \"Queen\")) %&gt;%\n    # add a card ID\n    mutate(id = 1:n())\n}\n\ncreate_deck()\n\n# A tibble: 52 √ó 4\n   suit  value points    id\n   &lt;chr&gt; &lt;fct&gt;  &lt;dbl&gt; &lt;int&gt;\n 1 clubs 2          0     1\n 2 clubs 3          0     2\n 3 clubs 4          0     3\n 4 clubs 5          0     4\n 5 clubs 6          0     5\n 6 clubs 7          0     6\n 7 clubs 8          0     7\n 8 clubs 9          0     8\n 9 clubs 10         0     9\n10 clubs Jack       0    10\n# ‚Ñπ 42 more rows\n\n\nI‚Äôve created a standard deck of cards, and assigned each card the point value it has when scoring a game of hearts.\nIn the Bicycle rules, there are specific cards which are removed if there are 3 or 5 players (to make sure there are an even number of cards for each player). I‚Äôm deviating slightly from those rules so that the 2 of clubs is always available (this makes my life easier), but the fundamentals are the same.\n\ndeck_fix &lt;- function(deck = create_deck(), n_players = 4) {\n\n  # Remove cards from deck to make the game playable by 3 or 5 players\n  if (n_players == 4) {\n    # do nothing special\n  } else if (n_players == 3) {\n    deck &lt;- deck %&gt;%\n      filter(!(suit == \"diamonds\" & value == \"2\"))\n  } else if (n_players == 5) {\n    deck &lt;- deck %&gt;%\n      filter(!(suit %in% c(\"diamonds\", \"spades\") & value == \"2\"))\n  } else {\n    stop(\"Hearts is playable by between 3 and 5 players\")\n  }\n\n  deck\n}\n\ncreate_deck() %&gt;%\n  deck_fix(n_players = 3) %&gt;%\n  arrange(value, suit)\n\n# A tibble: 51 √ó 4\n   suit     value points    id\n   &lt;chr&gt;    &lt;fct&gt;  &lt;dbl&gt; &lt;int&gt;\n 1 clubs    2          0     1\n 2 hearts   2          1    27\n 3 spades   2          0    40\n 4 clubs    3          0     2\n 5 diamonds 3          0    15\n 6 hearts   3          1    28\n 7 spades   3          0    41\n 8 clubs    4          0     3\n 9 diamonds 4          0    16\n10 hearts   4          1    29\n# ‚Ñπ 41 more rows\n\n\n\n\n\n\n\n\n\n\n\n\nCaution\n\n\n\nNote that this pseudocode should be written focused on how you will record the game‚Äôs progression in a computer simulation. It‚Äôs relatively easy to write pseudo‚Äùcode‚Äù to describe the instructions for playing the game, but it‚Äôs entirely a different thing to write pseudocode for how to simulate gameplay computationally.\nSee hearts.qmd for an example of the level of detail I‚Äôm looking for here.\n\n\n\nFull game: \n1. Deal Cards\n2. Play the first trick\n    1. The player with the 2 of clubs starts\n    2. Each player must select a card (see function below)\n3. Play 12 more tricks (mostly, this is a repeat of step 2, but the first player selects a random card instead of the 2 of clubs)\n    1. Each player must select a card\n    2. The trick must be evaluated to determine which player keeps the cards\n4. Determine the game score by counting up the value of the hearts and queen of spades cards in each hand. Lowest score wins.\n\nCard selection: \n1. If the player has any cards in suit, they must select one of those cards\n2. If a card in suit isn't available, the player may select an out of suit card. Hearts cannot be played until the suit is \"broken\" or there is no other option.\n    1. Determine set of cards available to select from (see Available card function)\n    2. Randomly select a card from available options\n    \nAvailable cards: \n    1. Check if hearts have been broken \n        - if not, check if other cards are available\n            - if other cards are available, remove all hearts from the \"options\"\n        - return available cards data frame\n\n\n\n\n\n\n\n\n\n\ndeal_cards &lt;- function(deck, players = 1:4) {\n  deck %&gt;%\n    # Fix the deck\n    deck_fix(n_players = length(players)) %&gt;%\n    # shuffle the rows\n    slice_sample(n = nrow(deck)) %&gt;%\n    # Assign cards to players one-by-one\n    mutate(player = rep(players, length.out = n())) %&gt;%\n    # Sort deck by player, suit, and value\n    arrange(player, suit, value)\n}\n\ncreate_deck() %&gt;%\n  deal_cards(players = c(\"Amy\", \"Joe\", \"Sarah\", \"Bill\")) %&gt;%\n  group_by(player) %&gt;%\n  count()\n\n# A tibble: 4 √ó 2\n# Groups:   player [4]\n  player     n\n  &lt;chr&gt;  &lt;int&gt;\n1 Amy       13\n2 Bill      13\n3 Joe       13\n4 Sarah     13\n\n\n\n\n\nNext, we need to handle how a player would select a card. We‚Äôre going to ignore any sort of logic that would depend on cards played by previous players in the same trick (or previous tricks).\nI‚Äôm simulating my siblings and I playing this game when I was at most 11 (and I was the oldest), so it‚Äôs a 100% safe assumption that our logical skills were ‚Ä¶ sub optimal.\nIn Hearts, like in many other trick-based games, you have certain rules that must be followed, like matching suits.\n\n# Check whether there's a card in the selected suit\npick_card_in_suit &lt;- function(cards, sel_suit = NA) {\n  # if sel_suit is NA, this will return nothing\n  valid &lt;- filter(cards, suit == sel_suit) \n  \n  if (nrow(valid) &gt; 0) {\n    slice_sample(valid, n = 1)\n  } else {\n    valid\n  }\n}\n\nIn addition, hearts requires that if no point cards have been played yet, you must select a card which is not a point card (so something other than a heart or the queen of spades) if you have the option to do so.\nWe handle this using the hearts_available parameter, which describes whether point cards have been played. If hearts aren‚Äôt available, and there are other suits in the set of cards, we will pick a non-heart card.\n\n# Check whether there's a card in another suit\npick_card_out_suit &lt;- function(cards, hearts_avail = F) {\n  if (is.na(hearts_avail)) stop(\"hearts_avail cannot be NA\")\n  card_options &lt;- cards\n\n  nonhearts &lt;- any(cards$suit != \"hearts\")\n\n  # If hearts aren't available and there are other suits,\n  # filter out the hearts\n  # Note that this still allows the Queen of Spades to \n  # be played at any time (which then makes hearts available)\n  if (nonhearts & !hearts_avail) {\n    card_options &lt;- cards %&gt;% filter(suit != \"hearts\")\n  }\n\n  # print(card_options)\n  slice_sample(card_options, n = 1)\n}\n\n(This logic caused 90% of the trouble I had with this game simulation)\nNow that we have that, we can write a function that will take a set of cards, and pick a card for a given player in the selected suit (if provided).\n\npick_card &lt;- function(deck,\n                      this_player = NA,\n                      sel_suit = NA,\n                      hearts_avail = F) {\n  if (!is.na(this_player)) {\n    options &lt;- filter(deck, player %in% this_player)\n  } else {\n    options &lt;- deck\n  }\n\n  play &lt;- bind_rows(\n    # First, try to pick something in suit\n    pick_card_in_suit(options, sel_suit = sel_suit),\n    # Then if that fails pick something out of suit\n    pick_card_out_suit(options, hearts_avail = hearts_avail)\n  )\n\n  # Take the first row - in-suit if it's available, out-of-suit otherwise\n  play[1,]\n}\n\n\n\n\nThe first trick is a bit different, logic wise. The person with the 2 of clubs leads (in other tricks, it‚Äôs the person who took the previous trick).\nTo make this function a bit easier to use, I‚Äôve created a couple of helper functions that can be re-used in any trick:\n\n# Evaluate a played trick, adding columns for trick_order, in_suit, player_win, and trick number\neval_trick &lt;- function(cards, spec_suit, trick_num = NA) {\n  # Note that trick order is likely to be wrong for the first trick,\n  # but this isn't critical - it just helps keep track of things.\n  cards %&gt;%\n    mutate(trick_order = 1:n()) %&gt;%\n    mutate(in_suit = suit == spec_suit) %&gt;%\n    arrange(desc(in_suit), desc(value)) %&gt;%\n    mutate(player_win = .$player[1]) %&gt;%\n    arrange(trick_order) %&gt;%\n    mutate(trick = trick_num)\n}\n\n# Remove cards from deck that have been played and bind on as a played trick\nfix_deck &lt;- function(dealt, trick) {\n  dealt %&gt;%\n    anti_join(trick, by = c(\"suit\", \"value\", \"player\", \"id\")) %&gt;%\n    bind_rows(trick)\n}\n\nThis leads to the code for the first trick:\n\nfirst_trick &lt;- function(dealt) {\n  # Which player has 2 of clubs?\n  first_card &lt;- dealt %&gt;%\n    filter(suit == \"clubs\" & value == \"2\")\n\n  remaining_players &lt;- unique(dealt$player) %&gt;%\n    setdiff(first_card$player)\n\n  play &lt;- first_card\n  for (i in remaining_players) {\n    play &lt;- dealt %&gt;%\n      filter(player == i) %&gt;%\n      pick_card(sel_suit = \"clubs\") %&gt;%\n      bind_rows(play)\n  }\n  play &lt;- play %&gt;%\n    eval_trick(spec_suit = \"clubs\",\n               trick_num = 1)\n\n  if (!all(dealt$player %in% play$player)) {\n    stop(\"Not all players picked cards?\")\n  }\n\n  fix_deck(dealt, play)\n}\n\n\n\n\nThe same basic logic applies in any trick - the first card is picked, and then all other players throw in a card. We do need a hearts_playable function that will evaluate our deck to see if hearts is an option; once we have that, we can write a general trick-playing function.\n\nhearts_playable &lt;- function(df) {\n  sum(df$points, na.rm = T) &gt; 0\n}\n\nNotice that we‚Äôre calling the first_trick function within the more general play_trick function - this makes it much easier to remember the syntax.\n\nplay_trick &lt;- function(dealt) {\n  if (!\"trick\" %in% names(dealt)) {\n    return(first_trick(dealt))\n  }\n\n  # get empty df\n  play &lt;- filter(dealt, id &lt; 0)\n\n  # get trick number\n  trick_num &lt;- (1 + dealt$trick) %&gt;% max(na.rm = T)\n\n  # get player to lead\n  avail &lt;- filter(dealt, is.na(trick))\n  last_player &lt;- filter(dealt, trick == max(trick, na.rm = T)) %&gt;%\n    pluck(\"player_win\") %&gt;%\n    unique()\n\n  # get already played cards and see if hearts can be played\n  already_played &lt;- anti_join(dealt, avail, by = c(\"suit\", \"value\"))\n  can_play_hearts &lt;- bind_rows(already_played, play) %&gt;%\n    hearts_playable()\n\n  # pick first card\n  play &lt;- pick_card(avail,\n                    this_player = last_player,\n                    sel_suit = NA,\n                    hearts_avail = can_play_hearts)\n\n  # pick remaining cards\n  remaining_players &lt;- unique(dealt$player) %&gt;%\n    setdiff(last_player)\n  for (i in remaining_players) {\n    can_play_hearts &lt;- bind_rows(already_played, play) %&gt;%\n      hearts_playable()\n    play &lt;- bind_rows(\n      play,\n      pick_card(avail, this_player = i,\n                sel_suit = play$suit[1],\n                hearts_avail = can_play_hearts)\n    )\n  }\n\n  # evaluate the trick\n  play &lt;- play %&gt;%\n    eval_trick(spec_suit = play$suit[1], trick_num)\n\n  # remove trick from deck and add it back in as a played trick\n  fix_deck(dealt, play)\n}\n\ncreate_deck() %&gt;%\ndeal_cards(players = c(\"Amy\", \"Joe\", \"Sarah\", \"Bill\")) %&gt;%\nplay_trick() %&gt;%\nplay_trick() %&gt;%\nfilter(!is.na(trick)) # first 2 tricks in a game\n\n# A tibble: 8 √ó 9\n  suit     value points    id player trick_order in_suit player_win trick\n  &lt;chr&gt;    &lt;fct&gt;  &lt;dbl&gt; &lt;int&gt; &lt;chr&gt;        &lt;int&gt; &lt;lgl&gt;   &lt;chr&gt;      &lt;dbl&gt;\n1 clubs    10         0     9 Sarah            1 TRUE    Sarah          1\n2 clubs    3          0     2 Bill             2 TRUE    Sarah          1\n3 clubs    4          0     3 Amy              3 TRUE    Sarah          1\n4 clubs    2          0     1 Joe              4 TRUE    Sarah          1\n5 diamonds 3          0    15 Sarah            1 TRUE    Amy            2\n6 diamonds 8          0    20 Amy              2 TRUE    Amy            2\n7 spades   Jack       0    49 Bill             3 FALSE   Amy            2\n8 diamonds 6          0    18 Joe              4 TRUE    Amy            2\n\n\n\n\n\nNow, we can play a full game of hearts by repeatedly calling the play_trick function. All of the cards stay in the same data frame, and we keep track of who won each trick and who played each card - this allows us to calculate the score for each player at the end.\n\nhearts &lt;- function(players) {\n  deck &lt;- create_deck() %&gt;%\n    deal_cards(players)\n\n  number_of_rounds &lt;- nrow(deck)/length(players)\n\n  for (i in 1:number_of_rounds) {\n    # print(i)\n    deck &lt;- play_trick(deck)\n    # print(filter(deck, trick == i))\n  }\n\n  return(deck)\n}\n\nhearts(c(\"Amy\", \"Beth\", \"Cara\", \"Dawn\"))\n\n# A tibble: 52 √ó 9\n   suit   value points    id player trick_order in_suit player_win trick\n   &lt;chr&gt;  &lt;fct&gt;  &lt;dbl&gt; &lt;int&gt; &lt;chr&gt;        &lt;int&gt; &lt;lgl&gt;   &lt;chr&gt;      &lt;dbl&gt;\n 1 clubs  5          0     4 Dawn             1 TRUE    Cara           1\n 2 clubs  6          0     5 Cara             2 TRUE    Cara           1\n 3 clubs  4          0     3 Amy              3 TRUE    Cara           1\n 4 clubs  2          0     1 Beth             4 TRUE    Cara           1\n 5 spades Jack       0    49 Cara             1 TRUE    Beth           2\n 6 spades 5          0    43 Amy              2 TRUE    Beth           2\n 7 spades Ace        0    52 Beth             3 TRUE    Beth           2\n 8 spades Queen     13    50 Dawn             4 TRUE    Beth           2\n 9 spades 3          0    41 Beth             1 TRUE    Cara           3\n10 spades 7          0    45 Amy              2 TRUE    Cara           3\n# ‚Ñπ 42 more rows\n\n\n\n\n\nIt‚Äôs pretty easy given our setup to calculate each player‚Äôs score:\n\ncalc_score &lt;- function(data) {\n  game &lt;- data %&gt;%\n    group_by(player) %&gt;%\n    summarize(score = sum(points), .groups = \"drop\")\n  \n  # Handle the \"shoot the moon\" scenario \n  # where one player has all the points\n  if (any(game$score == 26)) {\n    game &lt;- game %&gt;%\n      mutate(score = 26 - score)\n  }\n  game\n}\n\n\nhearts(c(\"Amy\", \"Beth\", \"Cara\", \"Dawn\")) %&gt;%\n  calc_score()\n\n# A tibble: 4 √ó 2\n  player score\n  &lt;chr&gt;  &lt;dbl&gt;\n1 Amy        5\n2 Beth      14\n3 Cara       4\n4 Dawn       3\n\n\n\n\n\nIn a shoot the moon scenario, the total game points will be (n-1) times normal, where \\(n\\) is the number of players. This function returns a logical indicator of whether or not the total number of points generated is more than 26 (indicating that someone shot the moon)\n\nshoot_the_moon &lt;- function(data) {\n  sum(data$score) &gt; 26\n}\n\n\n\n\n\n\n\n\n# I'm saving the results of this so that I only \n# have to run it once...\n\n# This uses parallel processing to take advantage of the \n# fact that I wrote this on a server with 16 cores and \n# a lot of memory.\n# May as well use the power if you have the option!\nlibrary(parallel)\nset.seed(34029)\n#... then parallel replicate...\ngames &lt;- mclapply(1:10000, FUN = function(i) { hearts(c(\"Susan\", \"Caroline\", \"Mom\", \"Dad\")) }, mc.preschedule = F, mc.set.seed = T, mc.cores = 16, mc.cleanup = T)\n\nsave(games, file = \"games.Rdata\")\n\n\nload(\"games.Rdata\")\nres &lt;- tibble(\n  full_game = games, \n  score = purrr::map(full_game, calc_score),\n  stm = purrr::map_lgl(score, shoot_the_moon)\n)\n\nFrom this assessment, one player shoots the moon in approximately 0.00% of games played using the naive strategy. My parents were probably pretty reasonably assuming that they could explain that part of the strategy later, once we‚Äôd grasped the fundamentals of the game.\nThere are a couple of other options to consider - my simulation may not exactly model reality because of the assumption that all players were acting randomly:\n\n(The most likely) I‚Äôve simulated 4 players randomly playing hearts, but in the game that motivated the question, my parents actually knew what they were doing. If two players were strategizing, and two players were playing randomly, it might be more likely for someone to end up with all of the high point cards because two of the players were good enough to avoid them; the remaining point cards were randomly distributed. This seems like a more likely scenario to me.\n(Less likely) By trying to strategize (and failing) I unintentionally shot the moon - that is, I‚Äôve simulated randomness, but that‚Äôs not necessarily accurate - my strategy could have been worse than random guessing, making this simulation somewhat useless.\n\nI wish I had time to add in some strategy component, but I think at this point that would be excessive. While the simulation is a useful benchmark, it doesn‚Äôt completely describe the whole situation ‚Äì which is pretty typical!\nNote that we can compute other interesting quantities from our simulated set of games, such as the total proportion of points on the board once there \\(x\\) tricks played.\n\npoints_trick_cumulative &lt;- function(game) {\n  game %&gt;%\n    group_by(trick) %&gt;%\n    summarize(points = sum(points))\n}\n\nlibrary(parallel)\npoints_cumulative &lt;- res %&gt;%\n  select(full_game) %&gt;%\n  mutate(tmp = mclapply(full_game, points_trick_cumulative, mc.cores = 16)) \n\npoints_cumulative %&gt;%\n  mutate(id = 1:n()) %&gt;%\n  unnest(tmp) %&gt;%\n  group_by(id) %&gt;%\n  mutate(points_played = cumsum(points),\n         point_pct = points_played/sum(points)) %&gt;%\n  ggplot(aes(x = factor(trick), y = points_played)) + \n  geom_violin(scale = \"width\") + \n  xlab(\"Trick\") + ylab(\"Points played\") + \n  geom_smooth(aes(x = trick), method = \"gam\", se = F)\n\n`geom_smooth()` using formula = 'y ~ s(x, bs = \"cs\")'\n\n\n\n\n\nIn most games, the Queen of Spades is played first, resulting in a 13-point jump. Then, the remaining hearts are played. By the end of the game, there are usually only a few hearts remaining, leading to very interesting looking violin plots."
  },
  {
    "objectID": "homework/hearts.html#is-it-in-the-cards",
    "href": "homework/hearts.html#is-it-in-the-cards",
    "title": "Homework 11: Simulation",
    "section": "",
    "text": "In this task, you will create a simulation of Hearts, a card game which is played with 52 cards.\nYou may also work with a different game if you get approval from me before you start. You may want to avoid games which require a large amount of strategy, skill, and bluffing, such as poker.\nThis homework file is set up to demonstrate how this would be done with the game of hearts.\nYou don‚Äôt need to necessarily simulate the full game mechanism, but you do need to implement enough of the game mechanism that you can identify an interesting probability question and answer the question using a simulation.\n\n\n\n\n\n\n\n\nNote\n\n\n\nGuidelines:\n\nYour question should be something that is not easily answerable with obviously constructed probability calculations.\nSome options include: - Compute the probability of going bust given that you have N cards in your hand. (You can ignore the rules about splitting your hand if you get two cards of the same denomination) - Compute the probability of going bust given that your original two cards total 9, 10, or 11 (doubling down) - Compare the probability of going bust with N cards in your hand if one of the cards you were originally dealt was an Ace (which can count as 1 or 11) vs.¬†if you know that you do not have an Ace. - Evaluate two competing strategies for Blackjack to see which one has a higher success probability. - Compare strategies for Blackjack with strategies for a similar card game (31), in which the player only goes bust when the cards total more than 31.\n\nYou are not limited to the options above, but your question must be complex enough that it would require a simulation of the game‚Äôs mechanics beyond the initial shuffle.\n\n\nBefore I explain my question, a quick story:\nWhen my parents taught us hearts (I was about 11, my sister would have been 9), the first time we played they taught us simplified rules:\n\ntry to get the fewest hearts\nthe person with the most hearts gets the highest score (low is good)\ntry to avoid the queen of spades, because that‚Äôs 13 points.\n\nThey didn‚Äôt mention the fact that if you got all the hearts and the queen of spades, you ‚Äúshot the moon‚Äù and scored 0, and everyone else got 26 points. During that first game, I was trying as hard as I could, and I kept getting hearts! By the end of the round, I was trying very hard not to cry, only to find out that I‚Äôd shot the moon and everyone else got all of the points - I was in the lead! It was a very confusing game.\nFundamentally, my question is: What is the probability that a player using relatively little (no) strategy accidentally ‚Äúshoots the moon‚Äù in a game of hearts?\n\n\n\n\n\n\n\n\n\nCaution\n\n\n\nThink very carefully about how you want to set up your simulation. It is almost always easier to describe the position of all of the cards in the deck using a single data frame than it is to maintain separate data frames of multiple cards for each player and for the discard pile and undealt cards.\n\n\nFirst, you must set up a data frame describing all possible values of your playing items. A standard deck of 52 playing cards might be described using a data frame which has columns for suit and value, and you may want to make value a factor variable (your call on that one). If your game requires that players hold cards in their hand, you may also want to have a column indicating location (deck, discard, player_x).\n\n\n\nPseudocode: Set up objects\n\nCreate a tibble with 4 suits and 13 values labeled \n    Ace, 2:10, J, Q, K\nAdd point values\nAdd card ID numbers\n(Eventually) add location column - defer to a later step\nRemove any cards from the deck not necessary for game play\n\n\n\n\ncreate_deck &lt;- function() {\n  # Set up cards\n  suits &lt;- c(\"hearts\", \"diamonds\", \"spades\", \"clubs\")\n  \n  values &lt;- factor(1:13, labels = c(2:10, \"Jack\", \"Queen\", \"King\", \"Ace\"))\n  deck &lt;- crossing(suit = suits, value = values)\n\n  # Set up points\n  # This will change depending on which game you want to simulate\n  # I have demonstrated this using hearts \n  deck %&gt;%\n    mutate(points = (suit == \"hearts\") +\n             13*(suit == \"spades\" & value == \"Queen\")) %&gt;%\n    # add a card ID\n    mutate(id = 1:n())\n}\n\ncreate_deck()\n\n# A tibble: 52 √ó 4\n   suit  value points    id\n   &lt;chr&gt; &lt;fct&gt;  &lt;dbl&gt; &lt;int&gt;\n 1 clubs 2          0     1\n 2 clubs 3          0     2\n 3 clubs 4          0     3\n 4 clubs 5          0     4\n 5 clubs 6          0     5\n 6 clubs 7          0     6\n 7 clubs 8          0     7\n 8 clubs 9          0     8\n 9 clubs 10         0     9\n10 clubs Jack       0    10\n# ‚Ñπ 42 more rows\n\n\nI‚Äôve created a standard deck of cards, and assigned each card the point value it has when scoring a game of hearts.\nIn the Bicycle rules, there are specific cards which are removed if there are 3 or 5 players (to make sure there are an even number of cards for each player). I‚Äôm deviating slightly from those rules so that the 2 of clubs is always available (this makes my life easier), but the fundamentals are the same.\n\ndeck_fix &lt;- function(deck = create_deck(), n_players = 4) {\n\n  # Remove cards from deck to make the game playable by 3 or 5 players\n  if (n_players == 4) {\n    # do nothing special\n  } else if (n_players == 3) {\n    deck &lt;- deck %&gt;%\n      filter(!(suit == \"diamonds\" & value == \"2\"))\n  } else if (n_players == 5) {\n    deck &lt;- deck %&gt;%\n      filter(!(suit %in% c(\"diamonds\", \"spades\") & value == \"2\"))\n  } else {\n    stop(\"Hearts is playable by between 3 and 5 players\")\n  }\n\n  deck\n}\n\ncreate_deck() %&gt;%\n  deck_fix(n_players = 3) %&gt;%\n  arrange(value, suit)\n\n# A tibble: 51 √ó 4\n   suit     value points    id\n   &lt;chr&gt;    &lt;fct&gt;  &lt;dbl&gt; &lt;int&gt;\n 1 clubs    2          0     1\n 2 hearts   2          1    27\n 3 spades   2          0    40\n 4 clubs    3          0     2\n 5 diamonds 3          0    15\n 6 hearts   3          1    28\n 7 spades   3          0    41\n 8 clubs    4          0     3\n 9 diamonds 4          0    16\n10 hearts   4          1    29\n# ‚Ñπ 41 more rows\n\n\n\n\n\n\n\n\n\n\n\n\nCaution\n\n\n\nNote that this pseudocode should be written focused on how you will record the game‚Äôs progression in a computer simulation. It‚Äôs relatively easy to write pseudo‚Äùcode‚Äù to describe the instructions for playing the game, but it‚Äôs entirely a different thing to write pseudocode for how to simulate gameplay computationally.\nSee hearts.qmd for an example of the level of detail I‚Äôm looking for here.\n\n\n\nFull game: \n1. Deal Cards\n2. Play the first trick\n    1. The player with the 2 of clubs starts\n    2. Each player must select a card (see function below)\n3. Play 12 more tricks (mostly, this is a repeat of step 2, but the first player selects a random card instead of the 2 of clubs)\n    1. Each player must select a card\n    2. The trick must be evaluated to determine which player keeps the cards\n4. Determine the game score by counting up the value of the hearts and queen of spades cards in each hand. Lowest score wins.\n\nCard selection: \n1. If the player has any cards in suit, they must select one of those cards\n2. If a card in suit isn't available, the player may select an out of suit card. Hearts cannot be played until the suit is \"broken\" or there is no other option.\n    1. Determine set of cards available to select from (see Available card function)\n    2. Randomly select a card from available options\n    \nAvailable cards: \n    1. Check if hearts have been broken \n        - if not, check if other cards are available\n            - if other cards are available, remove all hearts from the \"options\"\n        - return available cards data frame\n\n\n\n\n\n\n\n\n\n\ndeal_cards &lt;- function(deck, players = 1:4) {\n  deck %&gt;%\n    # Fix the deck\n    deck_fix(n_players = length(players)) %&gt;%\n    # shuffle the rows\n    slice_sample(n = nrow(deck)) %&gt;%\n    # Assign cards to players one-by-one\n    mutate(player = rep(players, length.out = n())) %&gt;%\n    # Sort deck by player, suit, and value\n    arrange(player, suit, value)\n}\n\ncreate_deck() %&gt;%\n  deal_cards(players = c(\"Amy\", \"Joe\", \"Sarah\", \"Bill\")) %&gt;%\n  group_by(player) %&gt;%\n  count()\n\n# A tibble: 4 √ó 2\n# Groups:   player [4]\n  player     n\n  &lt;chr&gt;  &lt;int&gt;\n1 Amy       13\n2 Bill      13\n3 Joe       13\n4 Sarah     13\n\n\n\n\n\nNext, we need to handle how a player would select a card. We‚Äôre going to ignore any sort of logic that would depend on cards played by previous players in the same trick (or previous tricks).\nI‚Äôm simulating my siblings and I playing this game when I was at most 11 (and I was the oldest), so it‚Äôs a 100% safe assumption that our logical skills were ‚Ä¶ sub optimal.\nIn Hearts, like in many other trick-based games, you have certain rules that must be followed, like matching suits.\n\n# Check whether there's a card in the selected suit\npick_card_in_suit &lt;- function(cards, sel_suit = NA) {\n  # if sel_suit is NA, this will return nothing\n  valid &lt;- filter(cards, suit == sel_suit) \n  \n  if (nrow(valid) &gt; 0) {\n    slice_sample(valid, n = 1)\n  } else {\n    valid\n  }\n}\n\nIn addition, hearts requires that if no point cards have been played yet, you must select a card which is not a point card (so something other than a heart or the queen of spades) if you have the option to do so.\nWe handle this using the hearts_available parameter, which describes whether point cards have been played. If hearts aren‚Äôt available, and there are other suits in the set of cards, we will pick a non-heart card.\n\n# Check whether there's a card in another suit\npick_card_out_suit &lt;- function(cards, hearts_avail = F) {\n  if (is.na(hearts_avail)) stop(\"hearts_avail cannot be NA\")\n  card_options &lt;- cards\n\n  nonhearts &lt;- any(cards$suit != \"hearts\")\n\n  # If hearts aren't available and there are other suits,\n  # filter out the hearts\n  # Note that this still allows the Queen of Spades to \n  # be played at any time (which then makes hearts available)\n  if (nonhearts & !hearts_avail) {\n    card_options &lt;- cards %&gt;% filter(suit != \"hearts\")\n  }\n\n  # print(card_options)\n  slice_sample(card_options, n = 1)\n}\n\n(This logic caused 90% of the trouble I had with this game simulation)\nNow that we have that, we can write a function that will take a set of cards, and pick a card for a given player in the selected suit (if provided).\n\npick_card &lt;- function(deck,\n                      this_player = NA,\n                      sel_suit = NA,\n                      hearts_avail = F) {\n  if (!is.na(this_player)) {\n    options &lt;- filter(deck, player %in% this_player)\n  } else {\n    options &lt;- deck\n  }\n\n  play &lt;- bind_rows(\n    # First, try to pick something in suit\n    pick_card_in_suit(options, sel_suit = sel_suit),\n    # Then if that fails pick something out of suit\n    pick_card_out_suit(options, hearts_avail = hearts_avail)\n  )\n\n  # Take the first row - in-suit if it's available, out-of-suit otherwise\n  play[1,]\n}\n\n\n\n\nThe first trick is a bit different, logic wise. The person with the 2 of clubs leads (in other tricks, it‚Äôs the person who took the previous trick).\nTo make this function a bit easier to use, I‚Äôve created a couple of helper functions that can be re-used in any trick:\n\n# Evaluate a played trick, adding columns for trick_order, in_suit, player_win, and trick number\neval_trick &lt;- function(cards, spec_suit, trick_num = NA) {\n  # Note that trick order is likely to be wrong for the first trick,\n  # but this isn't critical - it just helps keep track of things.\n  cards %&gt;%\n    mutate(trick_order = 1:n()) %&gt;%\n    mutate(in_suit = suit == spec_suit) %&gt;%\n    arrange(desc(in_suit), desc(value)) %&gt;%\n    mutate(player_win = .$player[1]) %&gt;%\n    arrange(trick_order) %&gt;%\n    mutate(trick = trick_num)\n}\n\n# Remove cards from deck that have been played and bind on as a played trick\nfix_deck &lt;- function(dealt, trick) {\n  dealt %&gt;%\n    anti_join(trick, by = c(\"suit\", \"value\", \"player\", \"id\")) %&gt;%\n    bind_rows(trick)\n}\n\nThis leads to the code for the first trick:\n\nfirst_trick &lt;- function(dealt) {\n  # Which player has 2 of clubs?\n  first_card &lt;- dealt %&gt;%\n    filter(suit == \"clubs\" & value == \"2\")\n\n  remaining_players &lt;- unique(dealt$player) %&gt;%\n    setdiff(first_card$player)\n\n  play &lt;- first_card\n  for (i in remaining_players) {\n    play &lt;- dealt %&gt;%\n      filter(player == i) %&gt;%\n      pick_card(sel_suit = \"clubs\") %&gt;%\n      bind_rows(play)\n  }\n  play &lt;- play %&gt;%\n    eval_trick(spec_suit = \"clubs\",\n               trick_num = 1)\n\n  if (!all(dealt$player %in% play$player)) {\n    stop(\"Not all players picked cards?\")\n  }\n\n  fix_deck(dealt, play)\n}\n\n\n\n\nThe same basic logic applies in any trick - the first card is picked, and then all other players throw in a card. We do need a hearts_playable function that will evaluate our deck to see if hearts is an option; once we have that, we can write a general trick-playing function.\n\nhearts_playable &lt;- function(df) {\n  sum(df$points, na.rm = T) &gt; 0\n}\n\nNotice that we‚Äôre calling the first_trick function within the more general play_trick function - this makes it much easier to remember the syntax.\n\nplay_trick &lt;- function(dealt) {\n  if (!\"trick\" %in% names(dealt)) {\n    return(first_trick(dealt))\n  }\n\n  # get empty df\n  play &lt;- filter(dealt, id &lt; 0)\n\n  # get trick number\n  trick_num &lt;- (1 + dealt$trick) %&gt;% max(na.rm = T)\n\n  # get player to lead\n  avail &lt;- filter(dealt, is.na(trick))\n  last_player &lt;- filter(dealt, trick == max(trick, na.rm = T)) %&gt;%\n    pluck(\"player_win\") %&gt;%\n    unique()\n\n  # get already played cards and see if hearts can be played\n  already_played &lt;- anti_join(dealt, avail, by = c(\"suit\", \"value\"))\n  can_play_hearts &lt;- bind_rows(already_played, play) %&gt;%\n    hearts_playable()\n\n  # pick first card\n  play &lt;- pick_card(avail,\n                    this_player = last_player,\n                    sel_suit = NA,\n                    hearts_avail = can_play_hearts)\n\n  # pick remaining cards\n  remaining_players &lt;- unique(dealt$player) %&gt;%\n    setdiff(last_player)\n  for (i in remaining_players) {\n    can_play_hearts &lt;- bind_rows(already_played, play) %&gt;%\n      hearts_playable()\n    play &lt;- bind_rows(\n      play,\n      pick_card(avail, this_player = i,\n                sel_suit = play$suit[1],\n                hearts_avail = can_play_hearts)\n    )\n  }\n\n  # evaluate the trick\n  play &lt;- play %&gt;%\n    eval_trick(spec_suit = play$suit[1], trick_num)\n\n  # remove trick from deck and add it back in as a played trick\n  fix_deck(dealt, play)\n}\n\ncreate_deck() %&gt;%\ndeal_cards(players = c(\"Amy\", \"Joe\", \"Sarah\", \"Bill\")) %&gt;%\nplay_trick() %&gt;%\nplay_trick() %&gt;%\nfilter(!is.na(trick)) # first 2 tricks in a game\n\n# A tibble: 8 √ó 9\n  suit     value points    id player trick_order in_suit player_win trick\n  &lt;chr&gt;    &lt;fct&gt;  &lt;dbl&gt; &lt;int&gt; &lt;chr&gt;        &lt;int&gt; &lt;lgl&gt;   &lt;chr&gt;      &lt;dbl&gt;\n1 clubs    10         0     9 Sarah            1 TRUE    Sarah          1\n2 clubs    3          0     2 Bill             2 TRUE    Sarah          1\n3 clubs    4          0     3 Amy              3 TRUE    Sarah          1\n4 clubs    2          0     1 Joe              4 TRUE    Sarah          1\n5 diamonds 3          0    15 Sarah            1 TRUE    Amy            2\n6 diamonds 8          0    20 Amy              2 TRUE    Amy            2\n7 spades   Jack       0    49 Bill             3 FALSE   Amy            2\n8 diamonds 6          0    18 Joe              4 TRUE    Amy            2\n\n\n\n\n\nNow, we can play a full game of hearts by repeatedly calling the play_trick function. All of the cards stay in the same data frame, and we keep track of who won each trick and who played each card - this allows us to calculate the score for each player at the end.\n\nhearts &lt;- function(players) {\n  deck &lt;- create_deck() %&gt;%\n    deal_cards(players)\n\n  number_of_rounds &lt;- nrow(deck)/length(players)\n\n  for (i in 1:number_of_rounds) {\n    # print(i)\n    deck &lt;- play_trick(deck)\n    # print(filter(deck, trick == i))\n  }\n\n  return(deck)\n}\n\nhearts(c(\"Amy\", \"Beth\", \"Cara\", \"Dawn\"))\n\n# A tibble: 52 √ó 9\n   suit   value points    id player trick_order in_suit player_win trick\n   &lt;chr&gt;  &lt;fct&gt;  &lt;dbl&gt; &lt;int&gt; &lt;chr&gt;        &lt;int&gt; &lt;lgl&gt;   &lt;chr&gt;      &lt;dbl&gt;\n 1 clubs  5          0     4 Dawn             1 TRUE    Cara           1\n 2 clubs  6          0     5 Cara             2 TRUE    Cara           1\n 3 clubs  4          0     3 Amy              3 TRUE    Cara           1\n 4 clubs  2          0     1 Beth             4 TRUE    Cara           1\n 5 spades Jack       0    49 Cara             1 TRUE    Beth           2\n 6 spades 5          0    43 Amy              2 TRUE    Beth           2\n 7 spades Ace        0    52 Beth             3 TRUE    Beth           2\n 8 spades Queen     13    50 Dawn             4 TRUE    Beth           2\n 9 spades 3          0    41 Beth             1 TRUE    Cara           3\n10 spades 7          0    45 Amy              2 TRUE    Cara           3\n# ‚Ñπ 42 more rows\n\n\n\n\n\nIt‚Äôs pretty easy given our setup to calculate each player‚Äôs score:\n\ncalc_score &lt;- function(data) {\n  game &lt;- data %&gt;%\n    group_by(player) %&gt;%\n    summarize(score = sum(points), .groups = \"drop\")\n  \n  # Handle the \"shoot the moon\" scenario \n  # where one player has all the points\n  if (any(game$score == 26)) {\n    game &lt;- game %&gt;%\n      mutate(score = 26 - score)\n  }\n  game\n}\n\n\nhearts(c(\"Amy\", \"Beth\", \"Cara\", \"Dawn\")) %&gt;%\n  calc_score()\n\n# A tibble: 4 √ó 2\n  player score\n  &lt;chr&gt;  &lt;dbl&gt;\n1 Amy        5\n2 Beth      14\n3 Cara       4\n4 Dawn       3\n\n\n\n\n\nIn a shoot the moon scenario, the total game points will be (n-1) times normal, where \\(n\\) is the number of players. This function returns a logical indicator of whether or not the total number of points generated is more than 26 (indicating that someone shot the moon)\n\nshoot_the_moon &lt;- function(data) {\n  sum(data$score) &gt; 26\n}\n\n\n\n\n\n\n\n\n# I'm saving the results of this so that I only \n# have to run it once...\n\n# This uses parallel processing to take advantage of the \n# fact that I wrote this on a server with 16 cores and \n# a lot of memory.\n# May as well use the power if you have the option!\nlibrary(parallel)\nset.seed(34029)\n#... then parallel replicate...\ngames &lt;- mclapply(1:10000, FUN = function(i) { hearts(c(\"Susan\", \"Caroline\", \"Mom\", \"Dad\")) }, mc.preschedule = F, mc.set.seed = T, mc.cores = 16, mc.cleanup = T)\n\nsave(games, file = \"games.Rdata\")\n\n\nload(\"games.Rdata\")\nres &lt;- tibble(\n  full_game = games, \n  score = purrr::map(full_game, calc_score),\n  stm = purrr::map_lgl(score, shoot_the_moon)\n)\n\nFrom this assessment, one player shoots the moon in approximately 0.00% of games played using the naive strategy. My parents were probably pretty reasonably assuming that they could explain that part of the strategy later, once we‚Äôd grasped the fundamentals of the game.\nThere are a couple of other options to consider - my simulation may not exactly model reality because of the assumption that all players were acting randomly:\n\n(The most likely) I‚Äôve simulated 4 players randomly playing hearts, but in the game that motivated the question, my parents actually knew what they were doing. If two players were strategizing, and two players were playing randomly, it might be more likely for someone to end up with all of the high point cards because two of the players were good enough to avoid them; the remaining point cards were randomly distributed. This seems like a more likely scenario to me.\n(Less likely) By trying to strategize (and failing) I unintentionally shot the moon - that is, I‚Äôve simulated randomness, but that‚Äôs not necessarily accurate - my strategy could have been worse than random guessing, making this simulation somewhat useless.\n\nI wish I had time to add in some strategy component, but I think at this point that would be excessive. While the simulation is a useful benchmark, it doesn‚Äôt completely describe the whole situation ‚Äì which is pretty typical!\nNote that we can compute other interesting quantities from our simulated set of games, such as the total proportion of points on the board once there \\(x\\) tricks played.\n\npoints_trick_cumulative &lt;- function(game) {\n  game %&gt;%\n    group_by(trick) %&gt;%\n    summarize(points = sum(points))\n}\n\nlibrary(parallel)\npoints_cumulative &lt;- res %&gt;%\n  select(full_game) %&gt;%\n  mutate(tmp = mclapply(full_game, points_trick_cumulative, mc.cores = 16)) \n\npoints_cumulative %&gt;%\n  mutate(id = 1:n()) %&gt;%\n  unnest(tmp) %&gt;%\n  group_by(id) %&gt;%\n  mutate(points_played = cumsum(points),\n         point_pct = points_played/sum(points)) %&gt;%\n  ggplot(aes(x = factor(trick), y = points_played)) + \n  geom_violin(scale = \"width\") + \n  xlab(\"Trick\") + ylab(\"Points played\") + \n  geom_smooth(aes(x = trick), method = \"gam\", se = F)\n\n`geom_smooth()` using formula = 'y ~ s(x, bs = \"cs\")'\n\n\n\n\n\nIn most games, the Queen of Spades is played first, resulting in a 13-point jump. Then, the remaining hearts are played. By the end of the game, there are usually only a few hearts remaining, leading to very interesting looking violin plots."
  },
  {
    "objectID": "slides/01a-intro.html#goals-for-today",
    "href": "slides/01a-intro.html#goals-for-today",
    "title": "Stat 850 Introduction",
    "section": "Goals for Today",
    "text": "Goals for Today\n\nSyllabus Q&A\nInstall software:\n\nR\nPython\nquarto\nRStudio\ngit\n\nStretch goal: set up Git"
  },
  {
    "objectID": "slides/01a-intro.html#preview-thursday",
    "href": "slides/01a-intro.html#preview-thursday",
    "title": "Stat 850 Introduction",
    "section": "Preview: Thursday",
    "text": "Preview: Thursday\n\nSet up Git\nHow to submit homework with Github Classroom\nGit concepts: Push/Pull"
  },
  {
    "objectID": "slides/01a-intro.html#reminders",
    "href": "slides/01a-intro.html#reminders",
    "title": "Stat 850 Introduction",
    "section": "Reminders",
    "text": "Reminders\n\nRegister for hypothes.is\nAnnotate the syllabus for this week‚Äôs reading assignment\n\ndue Friday at 8pm\n\nHomework due Friday at 8pm"
  },
  {
    "objectID": "slides/01b-intro.html#goals-for-today",
    "href": "slides/01b-intro.html#goals-for-today",
    "title": "Stat 850: Git and Github",
    "section": "Goals for Today",
    "text": "Goals for Today\n\nSet up Git\nHow to submit homework with Github Classroom\nGit concepts: Push/Pull"
  },
  {
    "objectID": "slides/01b-intro.html#preview-next-week",
    "href": "slides/01b-intro.html#preview-next-week",
    "title": "Stat 850: Git and Github",
    "section": "Preview: Next Week",
    "text": "Preview: Next Week\n\nFinding your way in R and Python\n\nNavigating RStudio\nExecution modes: script, console, interactive\nPython vs.¬†R code\n\nIntroduction to Programming"
  },
  {
    "objectID": "slides/01b-intro.html#reminders",
    "href": "slides/01b-intro.html#reminders",
    "title": "Stat 850: Git and Github",
    "section": "Reminders",
    "text": "Reminders\n\nRegister for hypothes.is\nAnnotate the syllabus for this week‚Äôs reading assignment\n\ndue Friday at 8pm\n\nHomework due Friday at 8pm\nRead the assigned chapters in the textbook (7, 8) for class next week!"
  },
  {
    "objectID": "slides/02a-Finding-Your-Way.html#todays-goals",
    "href": "slides/02a-Finding-Your-Way.html#todays-goals",
    "title": "Finding your way in R and Python",
    "section": "Today‚Äôs Goals:",
    "text": "Today‚Äôs Goals:\n\nKnow the 3 different ways to execute code from within RStudio\n\nTerminal (Command Line)\nSource Script (RStudio Button)\nInteractive Mode (line by line)\n\nDifferentiate between the Console and the Terminal\nDifferentiate between R and Python in the Console"
  },
  {
    "objectID": "slides/02a-Finding-Your-Way.html#rstudio-projects",
    "href": "slides/02a-Finding-Your-Way.html#rstudio-projects",
    "title": "Finding your way in R and Python",
    "section": "RStudio Projects",
    "text": "RStudio Projects\nRStudio projects are a way to keep your work organized.\nLet‚Äôs create one for this week‚Äôs class work.\n\nCreating an RStudio Project"
  },
  {
    "objectID": "slides/02a-Finding-Your-Way.html#ways-to-execute-code",
    "href": "slides/02a-Finding-Your-Way.html#ways-to-execute-code",
    "title": "Finding your way in R and Python",
    "section": "Ways to Execute Code",
    "text": "Ways to Execute Code\nDownload madlibs.py and place it in your newly created project."
  },
  {
    "objectID": "slides/02a-Finding-Your-Way.html#command-line",
    "href": "slides/02a-Finding-Your-Way.html#command-line",
    "title": "Finding your way in R and Python",
    "section": "Command Line",
    "text": "Command Line\n\nRunning madlibs.py at the command line"
  },
  {
    "objectID": "slides/02a-Finding-Your-Way.html#source-script",
    "href": "slides/02a-Finding-Your-Way.html#source-script",
    "title": "Finding your way in R and Python",
    "section": "Source Script",
    "text": "Source Script\n\nRunning madlibs.py using Source Script in RStudio"
  },
  {
    "objectID": "slides/02a-Finding-Your-Way.html#next-class",
    "href": "slides/02a-Finding-Your-Way.html#next-class",
    "title": "Finding your way in R and Python",
    "section": "Next Class",
    "text": "Next Class\n\nBasic Data Types\nCreating Variables\nUsing R/Python as a calculator\nIntro to Debugging"
  },
  {
    "objectID": "slides/09a-debugging-exercise.html",
    "href": "slides/09a-debugging-exercise.html",
    "title": "Debugging Excercises",
    "section": "",
    "text": "In the following examples, evaluate each problem using the criteria of a minimal reproducible example from this StackOverflow post.\nSpecifically, address the following things:\n\nAre the question and problem description complete?\nIs the issue reproducible? Does it have a description of the problem, with code that reproduces the problem? What could improve it?\nIs the example minimal? Does it include extra code or information that is not necessary?\nDoes the question describe any attempted solutions?\n\nThen, using what you know about R and Python, try to debug the problem using the strategies in the debugging chapter. Once you are thoroughly stumped, or you believe you have solved the problem, compare your solutions to those given on StackOverflow using the link.\n\nWhy Doesn‚Äôt this R function work?\n\nI created the following function to append new strings on a vector of strings called ‚Äúmeals‚Äù. However, when I use this function to append an string input into my ‚Äúmeals‚Äù vector, it does not work.\n\n add &lt;- function(str) {\n      meals &lt;- append(meals, as.character(str))  \n    }\nLink to original SO post.\n\n\nFunction not working R\n\nI‚Äôve never programmed before and am trying to learn. I‚Äôm following that ‚Äúcoursera‚Äù course that I‚Äôve seen other people post about ‚Äî a course offered by Johns Hopkins on R programming.\n\n\nAnyway, this was supposed to be my first function. Yet, it doesn‚Äôt work! But when I type out all the steps individually, it runs just fine‚Ä¶ Can anyone tell me why?\n\npollutantmean &lt;- function(directory, pollutant, id = 1:332){\n    x&lt;- list.files(\"/Users/mike******/Desktop/directory\", full.names=TRUE)\n    y&lt;- lapply(x, read.csv)\n    z&lt;- do.call(rbind.data.frame, y[id])\n\n    mean(z$pollutant, na.rm=TRUE)\n}\npollutantmean(specdata,nitrate,1:10)\n[1] NA\nWarning message:\nIn mean.default(z$pollutant, na.rm = TRUE) :\n  argument is not numeric or logical: returning NA\n\n####\n\nx&lt;- list.files(\"/Users/mike******/Desktop/specdata\",full.names=TRUE)\ny&lt;- lapply(x,read.csv)\nz&lt;- do.call(rbind.data.frame,y[1:10])\nmean(z$nitrate,na.rm=TRUE)\n[1] 0.7976266\nLink\n\n\nInexplicable error when trying to export my R notebook\n\nGetting this error from R Markdown when trying to export my .RMD\n\n\"Error in filter(Gastropods, Species == \"Cellana\") :  object 'Species' not found Calls: &lt;Anonymous&gt; ... withCallingHandlers -&gt; withVisible -&gt; eval -&gt; eval -&gt; filter\"\n\nHowever, all my plots are coming out successfully. I can clearly see in the data that the species column is there and that Cellana is a species. No spelling errors or anything.\n\n\nMy first 20 or so lines of code are below\n\n`r paste(readLines(\"https://raw.githubusercontent.com/srvanderplas/unl-stat850/main/files/debugging_3.txt\"), collapse = '\\n')`\nYou can find this sample file here\nLink\n\n\nPython if elif else statement\n\nI‚Äôm trying to create a program with python that calculate the cost for shipping.\n\n\nHowever, I can‚Äôt run the program to where it works properly.\n\n\nWhat ever my total is the same amount comes out as $6 for US and $8 for Canada. I can‚Äôt seem to get pass that.\n\n\nExample:\n\ntotal = raw_input('What is the total amount for your online shopping?')\ncountry = raw_input('Shipping within the US or Canada?')\n\nif country == \"US\":\n    if total &lt;= \"50\":\n        print \"Shipping Costs $6.00\"\n    elif total &lt;= \"100\":\n            print \"Shipping Costs $9.00\"\n    elif total &lt;= \"150\":\n            print \"Shipping Costs $12.00\"\n    else:\n        print \"FREE\"\n\nif country == \"Canada\":\n    if total &lt;= \"50\":\n        print \"Shipping Costs $8.00\"\n    elif total &lt;= \"100\":\n        print \"Shipping Costs $12.00\"\n    elif total &lt;= \"150\":\n        print \"Shipping Costs $15.00\"\n    else:\n        print \"FREE\"\nLink"
  },
  {
    "objectID": "slides/10a-latex-markdown.html#contents",
    "href": "slides/10a-latex-markdown.html#contents",
    "title": "LaTeX and Markdown",
    "section": "Contents",
    "text": "Contents\n(in chronological order)\n\nLaTeX\nMarkdown and Pandoc\nAdding in R\n\nSweave/knitr\nRmarkdown/quarto\n\nSpecial Document Types"
  },
  {
    "objectID": "slides/10a-latex-markdown.html#latex-is-a-document-preparation-system",
    "href": "slides/10a-latex-markdown.html#latex-is-a-document-preparation-system",
    "title": "LaTeX and Markdown",
    "section": "LaTeX is a document preparation system",
    "text": "LaTeX is a document preparation system\n\n\nThink of it as the digital version of a printing press.\nYou will use tags to control the formatting of your document, and then compile it to PDF. - \\emph{} for italic text - \\textbf{} for bold text - {\\HUGE }, {\\footnotesize }\nThe LaTeX system lays out your document according to a set of rules for spacing, margins, figure captions, cross-references, ‚Ä¶\n\n\n\n\nPrinting press"
  },
  {
    "objectID": "slides/10a-latex-markdown.html#latex-editors",
    "href": "slides/10a-latex-markdown.html#latex-editors",
    "title": "LaTeX and Markdown",
    "section": "LaTeX Editors",
    "text": "LaTeX Editors\nWhile a .tex file is just a text file, it can help to use a dedicated editor that will compile your document for you.\nSome options:\n\nOverleaf.com (real-time compilation, collaboration)\nTeXWorks\nLyX - What-you-see-is-what-you-get (WYSIWYG) LaTeX editor\nRStudio\n\nOf these, Lyx and Rstudio support integrating your code with your document using knitr/Sweave.\nLaTeX cheatsheet\nLearn LaTeX in 30 minutes"
  },
  {
    "objectID": "slides/10a-latex-markdown.html#basic-latex",
    "href": "slides/10a-latex-markdown.html#basic-latex",
    "title": "LaTeX and Markdown",
    "section": "Basic LaTeX",
    "text": "Basic LaTeX\n\n\n\\documentclass{article}     % 1\n\\usepackage[utf8]{inputenc} % 2\n\n\\usepackage{natbib}         % 3 \n\\usepackage{graphicx}       % 4\n\n\\title{Demo}                % 5\n\\author{Susan VanderPlas}\n\\date{October 2020}\n\n\\begin{document}            % 6\n\n\\maketitle                  % 7\n\n\\section{Introduction}      % 8\n\\citet{adams1995hitchhiker}\n\\section{Conclusion}\n\n\\bibliographystyle{plain}   % 9\n\\bibliography{refs}\n\\end{document}\nBasic LaTeX document\n\n\ntype of document (article)\nallow UTF-8 characters\nuse a bibliography\nallow pictures\nDocument header information\nActual document content\nCreate document title/header\nCreate introduction section\n(with a citation)\nCreate the bibliography\n\nOverleaf Gallery of possibilities\n\n\n\nLink to edit document"
  },
  {
    "objectID": "slides/10a-latex-markdown.html#bibtex",
    "href": "slides/10a-latex-markdown.html#bibtex",
    "title": "LaTeX and Markdown",
    "section": "BibTeX",
    "text": "BibTeX\nOne of the most wonderful parts of LaTeX is BibTeX, which handles your citations for you.\n\nYou type your references in only once (in a markup style called bibtex)\nCitations in your paper are or or \nYou set the reference type at the top of the document (numeric, alphabetical, etc.)\nAt the end of the document you add a command for where the bibliography goes\n\nBibtex does all of the hard work of cross-linking your references with the bibliography, formatting the bibliography correctly, etc.\nZotero, Mendeley, etc. have BibTeX export functions so you can still use a reference manager."
  },
  {
    "objectID": "slides/10a-latex-markdown.html#typesetting-math",
    "href": "slides/10a-latex-markdown.html#typesetting-math",
    "title": "LaTeX and Markdown",
    "section": "Typesetting math",
    "text": "Typesetting math\nMath mode: $x + 2$ for inline math: \\(x + 2\\)\n$$ x+2 $$ for centered paragraph math \\[x + 2\\]\n\\begin {align} x &= a + b\\\\ y &= c + d \\end{align}\nfor systems of equations\n\\(\\begin{align} x &= a + b\\\\ y &= c + d\\end{align}\\)\n\\alpha, \\beta, \\gamma, \\infty, \\rightarrow, \\int,\\frac{a}{b} \\[\\alpha,\\beta,\\gamma,\\infty,\\rightarrow,\\int,\\frac{a}{b}\\]\nCheatsheet for math mode"
  },
  {
    "objectID": "slides/10a-latex-markdown.html#try-it-out",
    "href": "slides/10a-latex-markdown.html#try-it-out",
    "title": "LaTeX and Markdown",
    "section": "Try it out!",
    "text": "Try it out!\nMinimal LaTeX document:\n\\documentclass{article}\n\\begin{document}\nHello \\LaTeX!\n\\end{document}\n\nAdd an image\nAdd the quadratic formula and the PDF of a normal distribution to the document\nIn extremely large text, print LaTeX using the \\LaTeX command\nIn extremely small, italic text, print your name"
  },
  {
    "objectID": "slides/10a-latex-markdown.html#pandoc",
    "href": "slides/10a-latex-markdown.html#pandoc",
    "title": "LaTeX and Markdown",
    "section": "Pandoc",
    "text": "Pandoc\nLaTeX only creates PDF files (and PostScript files, but nevermind those).\nEnter pandoc, which was supposed to be a ‚Äúuniversal translator‚Äù of markup formats.\nMarkdown document -&gt;\n\nhtml\nepub\ndocx\nLaTeX\nother markdown flavors\n‚Ä¶\n\nWith pandoc, the goal is to transfer the content; the exact formatting is less of a priority. Thus, only a small set of formatting options are supported.\nYou can use the same BibTeX files in markdown with Pandoc!"
  },
  {
    "objectID": "slides/10a-latex-markdown.html#try-it-out-1",
    "href": "slides/10a-latex-markdown.html#try-it-out-1",
    "title": "LaTeX and Markdown",
    "section": "Try it out!",
    "text": "Try it out!\n\n\nMinimal markdown document:\n---\ntitle: \"Demo\"\nauthor: \"Me\"\ndate: \"October 2020\"\noutput: \n  word_document: default\n  html_document: default\n  pdf_document: default\n---\n\n# Introduction\n\n# Conclusion\n\n# References\nmarkdown cheatsheet\n\n\nAdd an image from the internet\nAdd the quadratic formula and the PDF of a normal distribution to the document\nMath mode works the same in markdown as in LaTeX (mostly)\nAdd a citation to the Hitchhiker‚Äôs Guide using this references file"
  },
  {
    "objectID": "slides/10a-latex-markdown.html#latex-r",
    "href": "slides/10a-latex-markdown.html#latex-r",
    "title": "LaTeX and Markdown",
    "section": "LaTeX + R?",
    "text": "LaTeX + R?\nSweave was the original document compilation system for combining LaTeX and R (created circa 2002)\n\nBasic structure was great\nCaching was terrible (so all code re-ran each time you changed formatting a bit)\n\nknitr: created in 2012 by Yihui Xie to be a better version of Sweave\n\nSame basic syntax\nbetter caching & dependency management\nAll Sweave features + some\nSupport for Python, Perl, C++, shell scripts"
  },
  {
    "objectID": "slides/10a-latex-markdown.html#latex-r-1",
    "href": "slides/10a-latex-markdown.html#latex-r-1",
    "title": "LaTeX and Markdown",
    "section": "LaTeX + R?",
    "text": "LaTeX + R?\nknitr reference manual\nTo add R code to your .tex file,\n\nChange the file extension from .tex to .Rnw (Rnw = R no weave, a holdover from Sweave)\nAdd R code chunks\nCompile your document\n\n&lt;&lt;chunk-name, chunk-options&gt;&gt;=\n\nR code here\n\n@"
  },
  {
    "objectID": "slides/10a-latex-markdown.html#rmarkdown",
    "href": "slides/10a-latex-markdown.html#rmarkdown",
    "title": "LaTeX and Markdown",
    "section": "Markdown + R?",
    "text": "Markdown + R?\nYou‚Äôve been using quarto for the entire semester, but it works essentially the same way as adding R to LaTeX:\n\nRmarkdown WorkflowQuarto is similar, but supports even more formats and allows you to use even more programming languages in code chunks."
  },
  {
    "objectID": "slides/10a-latex-markdown.html#code-chunk-options",
    "href": "slides/10a-latex-markdown.html#code-chunk-options",
    "title": "LaTeX and Markdown",
    "section": "Code Chunk Options",
    "text": "Code Chunk Options\nCommon chunk options:\n\neval = (T/F): whether the code is evaluated by R\ninclude = (T/F): should code or output from the code be included in the document?\necho = (T/F): should code be printed in the document, or just the output?\nfig.width, fig.height =: size of the saved image, in inches\nout.width =: width of the output image IN THE DOCUMENT\nfig.cap =: Set a figure caption\ncache = (T/F): Cache the chunk, so that it is only re-run if it changes?\n\nAll of these chunk options also work in rmarkdown"
  },
  {
    "objectID": "slides/10a-latex-markdown.html#try-it-out-2",
    "href": "slides/10a-latex-markdown.html#try-it-out-2",
    "title": "LaTeX and Markdown",
    "section": "Try it out!",
    "text": "Try it out!\nTurn your .tex file into an .Rnw file and add some more stuff!\n\nAdd a histogram of 100 draws from a normal distribution\n\n\nCompute the mean of 15 draws from a binomial(10, .5) distribution and print it inline using \\Sexpr{}\n\n\nUse knitr::kable() to print out the first 6 rows of the cars dataframe."
  },
  {
    "objectID": "slides/10a-latex-markdown.html#table-upgrades",
    "href": "slides/10a-latex-markdown.html#table-upgrades",
    "title": "LaTeX and Markdown",
    "section": "Table Upgrades",
    "text": "Table Upgrades\nTable Packages\n\nkableExtra\nflextable\nhuxtable\ngt\nexpss\n\nOther packages\n\n(for HTML) papaja - use APA formatting throughout the whole html document"
  },
  {
    "objectID": "slides/10a-latex-markdown.html#special-document-types",
    "href": "slides/10a-latex-markdown.html#special-document-types",
    "title": "LaTeX and Markdown",
    "section": "Special Document Types",
    "text": "Special Document Types\nBoth LaTeX and quarto/Rmarkdown make use of other libraries to expand the types of documents available.\n\n\n\nDocument Type\nLibrary\nCompiler\nEnd Result\n\n\n\n\n\nSlides\nBeamer\nLaTeX or Markdown + LaTeX\nPDF\n\n\n\nReveal.js\nMarkdown\nHTML\n\n\n\n\nIOSlides\nMarkdown\nHTML\n\n\n\n\nSlidy\nMarkdown\nHTML\n\n\n\n\nPowerPoint\nMarkdown\nPowerPoint\n\n\n\n\nXaringan\nMarkdown + JS\nHTML/markdown hybrid\n\n\n\n\nPoster\nBeamer\nLaTeX\nPDF\n\n\n\nPosterdown\nMarkdown\nHTML\n\n\n\n\nPagedown\nMarkdown\nHTML\n\n\n\n\n\nThese documents use the same basic markdown or LaTeX syntax, but render differently."
  },
  {
    "objectID": "reading/01-SignUp-Syllabus.html",
    "href": "reading/01-SignUp-Syllabus.html",
    "title": "Setup and Syllabus Annotation",
    "section": "",
    "text": "In this class, we will have weekly readings that are intended to broaden your horizons, introduce you to new ideas related to computing and reproducibility, and highlight important ethical considerations that we won‚Äôt discuss directly in class but that have implications for computing.\nI haven‚Äôt yet found a great tool for ‚Äúsocial annotation‚Äù, but the idea is to allow you to read an article, make snarky (or insightful) comments, and see how your classmates react, ideally starting discussions and enriching everyone‚Äôs experiences.\nThis semester I‚Äôve decided to try Hypothes.is. I haven‚Äôt used this before, so we‚Äôll see how it goes."
  },
  {
    "objectID": "reading/01-SignUp-Syllabus.html#setup",
    "href": "reading/01-SignUp-Syllabus.html#setup",
    "title": "Setup and Syllabus Annotation",
    "section": "Setup",
    "text": "Setup\n\nCreate a free Hypothes.is account using your UNL email address\nJoin the Class Group\nInstall the browser addon in Chrome/Edge or the bookmarklet in your browser of choice."
  },
  {
    "objectID": "reading/01-SignUp-Syllabus.html#annotate-the-syllabus",
    "href": "reading/01-SignUp-Syllabus.html#annotate-the-syllabus",
    "title": "Setup and Syllabus Annotation",
    "section": "Annotate the Syllabus",
    "text": "Annotate the Syllabus\nOpen the syllabus in your browser.\n\nActivate hypothes.is using the addon or the bookmarklet.\nLog in (if necessary)\nMake sure you are posting your annotations to the 2023-Stat850 group.\nHighlight some text and make a comment. Ask a question about something you don‚Äôt understand, or complain about something you find unfair - I‚Äôm totally fine with that, I can take it.\nRead through the remainder of the syllabus and comment/highlight important points, things that need clarification, etc.\nRespond to your classmates‚Äô comments before Friday at 8pm."
  },
  {
    "objectID": "reading/01-SignUp-Syllabus.html#evaluation",
    "href": "reading/01-SignUp-Syllabus.html#evaluation",
    "title": "Setup and Syllabus Annotation",
    "section": "Evaluation",
    "text": "Evaluation\nI will grade this assignment (and future assignments) by looking at your annotations in the 2023-Stat850 group. If you annotate articles and post the comments to ‚ÄúPublic‚Äù instead of our group, I have no way to give you credit for the assignment.\nYou will get credit both for your own annotations and for responses to classmates‚Äô comments/questions. These responses should be organic, not formulaic - I expect you to engage with interesting thoughts/comments, but you are not required to make a specific number of comments each week. I will instead track your overall engagement over the course of the semester."
  },
  {
    "objectID": "reading/02-Decoding-Confusion.html",
    "href": "reading/02-Decoding-Confusion.html",
    "title": "Decoding Your Confusion",
    "section": "",
    "text": "This week‚Äôs reading assignment is from The Programmer‚Äôs Brain: What Every Programmer Needs to Know About Cognition by Felienne Hermans.\nLink to chapter\nRemember to use hypothes.is for annotation and to make sure you‚Äôre posting your annotations in the course group!\nNote that the examples in this book are given in unfamiliar programming languages. That‚Äôs ok - read the code as best as you can, but part of the content of this chapter is that reading code can be hard!"
  },
  {
    "objectID": "reading/03-Good-Enough-Computing.html",
    "href": "reading/03-Good-Enough-Computing.html",
    "title": "Good Enough Practices in Scientific Computing",
    "section": "",
    "text": "Read: - Good Enough Practices in Scientific Computing\nThink about/comment on:\n\nWhat basic computing skills were you taught? Which ones were you not taught?\nWhich workflows do you think will be useful to you? Which ones do you plan to ignore for now? Why?"
  },
  {
    "objectID": "reading/04-TidyTuesday-Doctor-Who.html",
    "href": "reading/04-TidyTuesday-Doctor-Who.html",
    "title": "Tidy Tuesday Screencast: Doctor Who",
    "section": "",
    "text": "Watch the following screencast:\n\n\nThink about/comment on:\n\nYou might try to follow along with the data, but pay attention to how the analysis proceeds over time.\nWhat did you learn from watching someone else do data analysis in realtime?\n\nSubmit your answers to the Canvas quiz. If you want to annotate the YouTube page, that is fine, but I will grade the Canvas quiz."
  },
  {
    "objectID": "reading/05-EDA.html",
    "href": "reading/05-EDA.html",
    "title": "Exploratory Data Analysis",
    "section": "",
    "text": "Read: - Chapter 1 of Exploratory Data Analysis by John Tukey (available on Canvas)\nAnnotate using hypothes.is (not the built in annotation tool)\nThink about/comment on:\n\nWhat do you think about Tukey‚Äôs approach to exploratory data analysis?\nWhat new ways to use Stem and Leaf plots did you learn?\nHow has the use of computers made EDA easier? harder?"
  },
  {
    "objectID": "reading/06-tidy-prog.html",
    "href": "reading/06-tidy-prog.html",
    "title": "Tidy Programming",
    "section": "",
    "text": "Read:\n\nTidy Tools Manifesto - Hadley Wickham\nReddit discussion: Pandas vs.¬†dplyr\nI include one of these for reading purposes, but they‚Äôre all over reddit and similar discussion boards. I‚Äôm interested to see what you think about them after a brief introduction to each one - the transition is harder for those of us who learned dplyr well first and then tried to use pandas (or vice versa). Can you see the difference between the python ‚Äúgeneral programming language‚Äù design and the R domain specific language design and how those play out in practice?\nMethod chaining in pandas - writing readable python code by chaining methods together\n\nAnnotate with hypothes.is\nThink about/comment on:\n\nWhat do you think the strengths and weaknesses are of the dplyr approach to tidy code compared to pandas?\nWhat do you need to focus on when writing code if you want to make your code tidy?\nWhich approach to data manipulation do you prefer? Why? Is there a case where you would prefer the other program?"
  },
  {
    "objectID": "reading/07-data-context.html",
    "href": "reading/07-data-context.html",
    "title": "Data Context",
    "section": "",
    "text": "Read:\n\nChapter 6 of Data Feminism: The Numbers Don‚Äôt Speak for Themselves (available on Canvas via Library Materials)\n\nAnnotate with hypothes.is\nNote: I assign chapters from Data Feminism because the authors made me think differently about data. I don‚Äôt necessarily agree with everything they say, and I certainly don‚Äôt expect you to agree with them either - I want you to stretch your brains and consider things from a different perspective.\nThink about/comment on:\n\nDo you agree/disagree with the assertion that the context of the data matters?\nHow does maintaining good data documentation contribute to data context? What problems does it not solve?\nDo you prefer working with raw data? cooked data? What are the advantages and disadvantages of each approach?"
  },
  {
    "objectID": "reading/08-graphics.html",
    "href": "reading/08-graphics.html",
    "title": "Data Visualization",
    "section": "",
    "text": "Read:\n\nChapter 3 of Data Feminism: On Rational, Scientific, Objective Viewpoints from Mythical, Imaginary, Impossible Standpoints\n\nAnnotate with hypothes.is\nNote: I assign chapters from Data Feminism because the authors made me think differently about data. I don‚Äôt necessarily agree with everything they say, and I certainly don‚Äôt expect you to agree with them either - I want you to stretch your brains and consider things from a different perspective.\nContent warning: This chapter contains an image of a largely unclothed body (PG or PG13 at most).\nThink about/comment on:\n\nWhen do you think it is appropriate to create graphics which inspire and elevate emotion in viewers? When is this not appropriate?\nWhen you see a chart, do you think of it as a rhetorical tool or an objective display? What factors contribute to viewing the chart as one or the other?\nWhat ways do you think are effective for showing uncertainty in data? Have you seen any effective ways of visualizing uncertainty or missing data which are not mentioned in this chapter?"
  },
  {
    "objectID": "reading/09-development.html",
    "href": "reading/09-development.html",
    "title": "Errors and Development",
    "section": "",
    "text": "Read:\n\nOpinionated Analysis Development (Annotate the embedded PDF. I know, this is less than ideal.)\nCommon errors in R: An Empirical Investigation\n\nAnnotate with hypothes.is\nThink about/comment on:\n\nWhat good practices do the authors recommend?\nWhat do you agree/disagree with?\nWhat suggestions seem strange/impractical?"
  },
  {
    "objectID": "reading/10-reproducibility.html",
    "href": "reading/10-reproducibility.html",
    "title": "Reproducibility",
    "section": "",
    "text": "Read:\n\nFramed! Reproducing and Revisiting 150-Year-Old Charts\nA Study in Reproducibility: The Congruent Matching Cells Algorithm and cmcR Package\n\nAnnotate with hypothes.is\nThink about/comment on:\n\nWhat attempts at reproducibility worked and didn‚Äôt work in each article?\nHow important is long-term reproducibility?\nHow do the two articles differ with respect to types of reproducibility?\nWhat important factors must exist for reproducibility?"
  },
  {
    "objectID": "reading/11-simulation.html",
    "href": "reading/11-simulation.html",
    "title": "Simulation",
    "section": "",
    "text": "Read:\n\nFree Wifi with Randomness\nSeductions of Sim - Policy as a Simulation Game\n\nAnnotate with hypothes.is\nThink about/comment on:\n\nSeductions of Sim\n\nWhat are the consequences of simulation?\nHow useful is simulation as a model exploration tool?\n\nFree Wifi with Randomness\n\nWhat did you learn about Monte Carlo methods?\nAre there any interesting tricks you‚Äôve learned from this blog post?"
  },
  {
    "objectID": "reading/12-ethics.html",
    "href": "reading/12-ethics.html",
    "title": "Ethics in Algorithms",
    "section": "",
    "text": "Read:\n\nThe Tiger Mom Tax\nRent Going Up? One Company‚Äôs Algorithm Could Be Why\nRacial Discrimination in Face Recognition Technology\nMachine Bias\n\nAnnotate with hypothes.is\nThink about/comment on:\n\nWhen is it ethical to use an algorithm to make decisions?\nWhen is it unethical to use an algorithm to make decisions?\nWhat conditions need to exist for an algorithm to be trustworthy?\nHow do you, as a statistician, ensure that you understand the biases in your models?"
  },
  {
    "objectID": "reading/13-data-sketches.html",
    "href": "reading/13-data-sketches.html",
    "title": "Data Sketches",
    "section": "",
    "text": "Read 3 of the following chapters from Data Sketches by Shirley Wu and Nadieh Bremer:\n\nFilm Flowers\nMy Life in Vacations\nPutting Emojis on the President‚Äôs Face\nMagic is Everywhere\nBeautiful in English\n\nAnnotate with hypothes.is (use the O‚ÄôReilly link through the library, please, so we all annotate the same thing.)\nThink about/comment on:\n\nHow do these data visualizations differ from graphs made with e.g.¬†ggplot2 or seaborn?\nDo you find these types of visualizations useful? aesthetically pleasing? fun?"
  },
  {
    "objectID": "project/guidelines.html",
    "href": "project/guidelines.html",
    "title": "Project Guidelines",
    "section": "",
    "text": "Your final project consists of a written report and a presentation (uploaded to YouTube), to be turned in instead of a final exam. In this project, you will select a topic, acquire data from one or more sources, and present any interesting findings you might come across as you explore your data."
  },
  {
    "objectID": "project/guidelines.html#general-rules",
    "href": "project/guidelines.html#general-rules",
    "title": "Project Guidelines",
    "section": "General rules",
    "text": "General rules\n\nYou may work in teams of up to 3 people, but each member of the team should contribute approximately evenly (I will measure this using your git contributions)\nYour work should be reproducible from start to finish. Do not modify the data by hand! I should be able to take the original data and your repository and go through your analysis from start to finish on my own machine.\nYou should not have to do any complicated statistical modeling for this project. If you want to fit a model, you need to be able to explain it to the rest of the class - but other members of the class may have had different statistics classes than you‚Äôve had. In general, this project should focus on exploratory data analysis; any model results should be explained using graphs, not statistical tests.\nYour project should use what you have learned (and what you will learn) about data visualization, data wrangling, programming, functions, interactive graphics, and dynamic documents. Your ultimate goal is to demonstrate the class objectives and your ability to conduct reproducible analyses and produce professional products using markdown and R/Python code."
  },
  {
    "objectID": "project/guidelines.html#datasets",
    "href": "project/guidelines.html#datasets",
    "title": "Project Guidelines",
    "section": "Datasets",
    "text": "Datasets\nYour dataset(s)\n\nshould be fun and interesting to you.\nPast classes have worked on data covering witch trials, Super Mario competitive times, personal music databases, and many other topics. You can choose something serious, or something decidedly not serious and be successful with the analysis. The best predictor of success is that the data you‚Äôre working with is something you find interesting and want to explore.\nshould be on a topic of general interest - something you could discuss with your parents or grandparents\nIf you use a technical dataset, you need to write your report with the more general audience in mind, which means you will need to explain any jargon you use, and provide diagrams of e.g.¬†plant anatomy, etc. to get the reader up to speed. If you work with sports data, you should provide an explanation like this as well, because I have no background knowledge about sports at all.\nmust have at least 1000 records (rows) and at least 5 variables\nmust include at least one meaningful categorical variable and one meaningful numeric variable (these can be derived, if you are e.g.¬†working with text or image data)\nmust not be published in a textbook or have a published analysis unless\n\nyou get prior permission and\nyour analysis is very different from what has previously been published\n\nmust be something that you can make available to the entire class (so e.g.¬†proprietary datasets from work or other sources aren‚Äôt acceptable)\nmust be traceable to the original source of the data. You MAY NOT use data uploaded to Kaggle - go back to the data source. If you need help assembling your data, come talk to me about it and I may be able to help.\n\nHere are some potential sources of interesting and/or fun data that explain how the data was acquired/sourced and (usually) have adequate data documentation:\n\nData is Plural archive\nTidyTuesday Archive\nData.gov The US government data archive"
  },
  {
    "objectID": "project/guidelines.html#version-control",
    "href": "project/guidelines.html#version-control",
    "title": "Project Guidelines",
    "section": "Version Control",
    "text": "Version Control\nYou should use GitHub to track your project throughout its life cycle. Some tips:\n\nPull before you start working, and after each commit.\nWorking in teams on github means that you have to allow for merge conflicts and become skilled at resolving them. This is part of my goal for making you work in groups - forcing you to develop these skills. See https://www.youtube.com/watch?v=97m0N4zIvOs for a demonstration of how to work with merge conflicts in rstudio.\nI do not expect you to work on branches for this project, unless you really want to - with 3 people and a defined scope, you should be able to work out of the main branch with few problems.\nCommit your changes in small, task-oriented batches. Try to work on small tasks and commit as soon as you finish the task. This will reduce merge conflicts.\nMinimize merge conflicts:\nPut each sentence on a different line in your document - this makes it much easier for git to resolve the changes, as git works line-by-line. I make all of my graduate students do this with their papers, and it makes things much easier to work around.\nREAD THE ERROR MESSAGE FROM GIT.\nSeriously, this will help you figure out about 90% of the things that go wrong. Git actually has good error messages that help you know what to do next.\nOnly commit the essential files necessary to compile your project report to github. This will reduce merge conflicts and save you a ton of time in the long run.\n\nDon‚Äôt commit pictures generated by R/python, .tex files generated as an intermediate stage, or even html/pdf files that are the final product until the very end. I have set this repository up in such a way that each of the quarto files renders to the _output folder, and git ignores everything in this folder, in the hopes that this will be enough to help you out.\nDo commit any R/python source files you need to e.g.¬†define a shiny application or do some data processing. Organize these in a code folder, and create a header in each code file that describes what the file does and how it relates to other code files in the project.\nDon‚Äôt commit any files you didn‚Äôt personally create. Be selective in what you add to git. Use the .gitignore file to keep git from tracking files that shouldn‚Äôt be added to the repository.\n\n\nI will track your contributions to the project using the python git-fame package, which you can install with the command pip install git-fame.\nI will typically use some variant of the following command to track your group contributions:\ngit fame . --incl=\".(q|R)md\"\nThis only counts modifications to the markdown files, which ensures that whoever adds a dataset to the repository doesn‚Äôt get credit for doing a ton of work by just uploading a file. This also ensures that people committing intermediate files don‚Äôt get credit for making the repository a mess."
  },
  {
    "objectID": "project/guidelines.html#project-report",
    "href": "project/guidelines.html#project-report",
    "title": "Project Guidelines",
    "section": "Project Report",
    "text": "Project Report\nYour project report should:\n\nbe approximately \\(450\\times(2n + 1)\\) words, where \\(n\\) is the number of people in your group. The extra length is to allow you space to describe your dataset, methods, and conclusions; everyone will need to do that regardless of group size.\nIf you want to know what the wordcount of your report is, you can run the following command in your terminal (in the project directory, assuming you‚Äôve cloned it from github classroom):\n\npandoc --lua-filter wordcount.lua report.qmd\n\nbe grammatically correct. Please feel free to make use of the writing center for editing, so that your report has appropriate grammar and structure.\nbe factually correct, and should reference outside sources appropriately (see below)\nhave a references section, using markdown‚Äôs references functionality. You should not manually compile your bibliography - it should be created automatically using a bib file.\nreference the software packages you‚Äôve used in your analysis/report and cite them appropriately. Software is a scholarly work, and deserves to be cited. The citation() R command can help you assemble appropriate references for software packages.\ncontain an introduction and a conclusion, written in paragraphs. The ‚Äúmeat‚Äù of the report should tell a story.\nuse figures. Figures must have appropriate captions, and each figure should be referenced within the body of the paper using markdown reference syntax.\nuse the report.qmd template file provided in the project repository to assemble your report. It contains demonstrations of all of the requirements above."
  },
  {
    "objectID": "project/guidelines.html#presentation",
    "href": "project/guidelines.html#presentation",
    "title": "Project Guidelines",
    "section": "Presentation",
    "text": "Presentation\nYour project presentation should:\n\ninclude a visual aid (slides or a poster) that highlight(s) the findings you have presented in your report. The visual aid must be created using LaTeX or markdown.\ninclude participation from each member of your group\nbe approximately \\(4\\times(n+1)\\) minutes long.\nbe uploaded to YouTube (you can set the link such that people with the link can view the presentation but where it is not searchable) or YuJa (but YouTube is easier for your classmates to work with). You will submit the link to the presentation on Canvas.\n\nYou will be expected to peer-evaluate two other groups presentations and/or reports, using the rubric."
  },
  {
    "objectID": "project/proposal.html",
    "href": "project/proposal.html",
    "title": "Stat 850 Project Proposal",
    "section": "",
    "text": "Each member of your team should modify this document in some way and push their modifications to the repository in a separate commit. This will ensure that you have set your repository up in a way that ensures all group members are working with the same repository.\nPlease ensure that you have set your git name and email address on your computer by modifying the following commands and running them in the terminal:\ngit config --global user.name \"Mona Lisa\"\ngit config --global user.email \"mona@lisa.com\"\nIn the proposal as in the final report, all of your code chunks should be set so that echo = F, which prevents the code from being printed in the report. You should also set message = F, warning = F, which will reduce the amount of additional output which is present in the report. You can customize the execution of code in quarto by using additional options, some of which are detailed here."
  },
  {
    "objectID": "project/proposal.html#instructions",
    "href": "project/proposal.html#instructions",
    "title": "Stat 850 Project Proposal",
    "section": "",
    "text": "Each member of your team should modify this document in some way and push their modifications to the repository in a separate commit. This will ensure that you have set your repository up in a way that ensures all group members are working with the same repository.\nPlease ensure that you have set your git name and email address on your computer by modifying the following commands and running them in the terminal:\ngit config --global user.name \"Mona Lisa\"\ngit config --global user.email \"mona@lisa.com\"\nIn the proposal as in the final report, all of your code chunks should be set so that echo = F, which prevents the code from being printed in the report. You should also set message = F, warning = F, which will reduce the amount of additional output which is present in the report. You can customize the execution of code in quarto by using additional options, some of which are detailed here."
  },
  {
    "objectID": "project/proposal.html#data",
    "href": "project/proposal.html#data",
    "title": "Stat 850 Project Proposal",
    "section": "Data",
    "text": "Data\n\nSource\nThe data we are using in this project comes from [link to web site].\nIf you cannot link directly to the data file, then you need to additionally describe how someone could acquire the same data:\n\nYou can download the data directly using [process]\n\nProvide some code to read in the data (either stored in the repository or read in directly from the source).\n\n\nDescription\nThis dataset contains information about ‚Ä¶\nIt was collected from ‚Ä¶\nHere is a data dictionary showing each variable, the type of variable, units, and range of values that are possible:\nNote: this is an example table, please modify to actually match your data. Ensure that all of the same information is represented.\n\n\n\n\n\n\n\n\n\n\nName\nDescription\nType\nUnits\nRange/Values\n\n\n\n\nday_of_week\nThe day of the week on which the observation took place\ncategorical\nNA\n0 = Sunday\n1 = Monday\n‚Ä¶\n6 = Saturday\n7 = Unknown\n\n\nweight\nThe weight of the individual\nnumeric\nlbs\n0 - 300 (max weight measurable on the scale used)\nNA indicates missing data\n\n\ntime\nThe time of the observation\nnumeric\nHHMM\n0000 corresponds to midnight,\n2359 corresponds to 1 minute before midnight on the same day."
  },
  {
    "objectID": "project/proposal.html#project-goals",
    "href": "project/proposal.html#project-goals",
    "title": "Stat 850 Project Proposal",
    "section": "Project Goals",
    "text": "Project Goals\nDescribe why this data is interesting and what you hope to do with it.\nWe will use [dataset] to explore the following topics:\n\ninteresting thing 1\ninteresting thing 2\n‚Ä¶\n\nWe expect to create\n\ndescription of some of the graphs you might create\na shiny application\na statistical model\n‚Ä¶"
  },
  {
    "objectID": "project/proposal.html#division-of-labor",
    "href": "project/proposal.html#division-of-labor",
    "title": "Stat 850 Project Proposal",
    "section": "Division of Labor",
    "text": "Division of Labor\nDescribe how you plan to work together as a team. Set intermediate deadlines - what do you plan to have done by the project check-in? The more you have done (report/slides/code), the better feedback I can give you."
  },
  {
    "objectID": "project/proposal.html#additional-comments",
    "href": "project/proposal.html#additional-comments",
    "title": "Stat 850 Project Proposal",
    "section": "Additional Comments",
    "text": "Additional Comments\nWhat concerns do you have about this project? This is your place to provide feedback about the project guidelines and ask clarifying questions for me to address either individually or in class, if the question is relevant to everyone."
  },
  {
    "objectID": "project/report.html",
    "href": "project/report.html",
    "title": "Sample Report",
    "section": "",
    "text": "# This code chunk contains code to install all of the dependencies\n# necessary to compile and run your report, using if-statements to\n# reduce install time for unnecessary code.\n# It should be set to eval = F by default, so you aren't installing\n# software on someone's computer without their consent.\n\n# This works for packages that are on CRAN\nif (!\"dplyr\" %in% installed.packages()) {\n  install.packages(\"dplyr\")\n}\nif (!\"remotes\" %in% installed.packages()) {\n  install.packages(\"remotes\")\n}\n\n# This is how to do it for a package that's only on github\nif (!\"emo\" %in% installed.packages()) {\n  remotes::install_github(\"hadley/emo\")"
  },
  {
    "objectID": "project/report.html#introduction",
    "href": "project/report.html#introduction",
    "title": "Sample Report",
    "section": "Introduction",
    "text": "Introduction\nIntroduce your dataset and basic questions for exploration. Explain any unique approaches you will take or any interesting features of your dataset that you have to overcome. Cite the source of your dataset, and briefly discuss how it was collected.\nDiscuss the variables in the dataset and if there are anomalies in the variables, provide some visual assessment of the anomalies and explain how they may have arisen. You should cover most of the information in your proposal data section, but should primarily use paragraphs and not lists/tables (the exception may be a list of e.g.¬†items which were measured)."
  },
  {
    "objectID": "project/report.html#methods",
    "href": "project/report.html#methods",
    "title": "Sample Report",
    "section": "Methods",
    "text": "Methods\nDescribe any data cleaning and rearranging you needed to do to get your dataset into a workable form. Make sure to cite any packages which were important in your data cleaning process in this section. For instance, if you used dplyr, then it would be appropriate to say something like\n\nwe used the group-apply-combine paradigm with the dplyr functions group_by and summarize [@dplyr-package] to generate a dataset for each day of the observation period from the 15-minute interval observations in the raw data set."
  },
  {
    "objectID": "project/report.html#topic-of-exploration",
    "href": "project/report.html#topic-of-exploration",
    "title": "Sample Report",
    "section": "Topic of Exploration",
    "text": "Topic of Exploration\nHere, you want to introduce the first topic you want to explore with your (newly cleaned up) data. Code to process data should be contained in chunks above this point, and those chunks should not be included in the report.\nYou can add options to executable code like this\n\n\n[1] 4\n\n\nThe echo: false option disables the printing of code (only output is displayed).\nIf you generate a figure, it should have a caption. Here‚Äôs a demonstration of how to do that:\n\n\n\n\n\nFigure¬†1: This figure shows the relationship between sepal width and petal width in irises. I‚Äôve used geom_jitter to combat overplotting, as the data are measured in relatively consistent increments. The figure is drawn with ggplot2 [@ggplot2-package].\n\n\n\n\nThen, you can reference Figure¬†1 in the text and the appropriate cross-reference will be generated.\nYou can find additional information about formatting figures generated from code in the quarto documentation."
  },
  {
    "objectID": "project/report.html#additional-exploration-topic",
    "href": "project/report.html#additional-exploration-topic",
    "title": "Sample Report",
    "section": "Additional Exploration topic",
    "text": "Additional Exploration topic\nAdd another topic here‚Ä¶ as many as you desire, really. Make sure to include a transition between the two sections that connects the two with some sort of logical train of thought."
  },
  {
    "objectID": "project/report.html#conclusion",
    "href": "project/report.html#conclusion",
    "title": "Sample Report",
    "section": "Conclusion",
    "text": "Conclusion\nHere, you want to summarize the main points of what you‚Äôve learned from this investigation, in paragraph form."
  },
  {
    "objectID": "project/report.html#tips",
    "href": "project/report.html#tips",
    "title": "Sample Report",
    "section": "Tips",
    "text": "Tips\n(delete this section from your report!)\nAlmost anything you might want to know about how to format output in quarto can be found here. Feel free to email/come to office hours to figure out how to do XYZ - part of the goal of making you write this report is that I want you to know how to write e.g.¬†a journal paper in Quarto as well, so now‚Äôs the time to experiment.\nIf you want to know what the wordcount of your report is, you can run the following command in your terminal:\npandoc --lua-filter wordcount.lua report.qmd\nNotice that I have not pushed _output/report.html or the _output/report_files/ folder to github - this is intentional. I have actually set _output to not show up in git, to encourage you all to NOT push the rendered files to github and to instead work from the markdown files directly.\nYou may find it cleaner to create a figure subdirectory and store any figures that aren‚Äôt created by R/Python in that folder. I encourage you to organize this repository in a sensible way."
  }
]