[
  {
    "objectID": "project/report.html",
    "href": "project/report.html",
    "title": "Sample Report",
    "section": "",
    "text": "# This code chunk contains code to install all of the dependencies\n# necessary to compile and run your report, using if-statements to\n# reduce install time for unnecessary code.\n# It should be set to eval = F by default, so you aren't installing\n# software on someone's computer without their consent.\n\n# This works for packages that are on CRAN\nif (!\"dplyr\" %in% installed.packages()) {\n  install.packages(\"dplyr\")\n}\nif (!\"remotes\" %in% installed.packages()) {\n  install.packages(\"remotes\")\n}\n\n# This is how to do it for a package that's only on github\nif (!\"emo\" %in% installed.packages()) {\n  remotes::install_github(\"hadley/emo\")"
  },
  {
    "objectID": "project/report.html#introduction",
    "href": "project/report.html#introduction",
    "title": "Sample Report",
    "section": "Introduction",
    "text": "Introduction\nIntroduce your dataset and basic questions for exploration. Explain any unique approaches you will take or any interesting features of your dataset that you have to overcome. Cite the source of your dataset, and briefly discuss how it was collected.\nDiscuss the variables in the dataset and if there are anomalies in the variables, provide some visual assessment of the anomalies and explain how they may have arisen. You should cover most of the information in your proposal data section, but should primarily use paragraphs and not lists/tables (the exception may be a list of e.g. items which were measured)."
  },
  {
    "objectID": "project/report.html#methods",
    "href": "project/report.html#methods",
    "title": "Sample Report",
    "section": "Methods",
    "text": "Methods\nDescribe any data cleaning and rearranging you needed to do to get your dataset into a workable form. Make sure to cite any packages which were important in your data cleaning process in this section. For instance, if you used dplyr, then it would be appropriate to say something like\n\nwe used the group-apply-combine paradigm with the dplyr functions group_by and summarize [@dplyr-package] to generate a dataset for each day of the observation period from the 15-minute interval observations in the raw data set."
  },
  {
    "objectID": "project/report.html#topic-of-exploration",
    "href": "project/report.html#topic-of-exploration",
    "title": "Sample Report",
    "section": "Topic of Exploration",
    "text": "Topic of Exploration\nHere, you want to introduce the first topic you want to explore with your (newly cleaned up) data. Code to process data should be contained in chunks above this point, and those chunks should not be included in the report.\nYou can add options to executable code like this\n\n\n[1] 4\n\n\nThe echo: false option disables the printing of code (only output is displayed).\nIf you generate a figure, it should have a caption. Here’s a demonstration of how to do that:\n\n\n\n\n\nFigure 1: This figure shows the relationship between sepal width and petal width in irises. I’ve used geom_jitter to combat overplotting, as the data are measured in relatively consistent increments. The figure is drawn with ggplot2 [@ggplot2-package].\n\n\n\n\nThen, you can reference Figure 1 in the text and the appropriate cross-reference will be generated.\nYou can find additional information about formatting figures generated from code in the quarto documentation."
  },
  {
    "objectID": "project/report.html#additional-exploration-topic",
    "href": "project/report.html#additional-exploration-topic",
    "title": "Sample Report",
    "section": "Additional Exploration topic",
    "text": "Additional Exploration topic\nAdd another topic here… as many as you desire, really. Make sure to include a transition between the two sections that connects the two with some sort of logical train of thought."
  },
  {
    "objectID": "project/report.html#conclusion",
    "href": "project/report.html#conclusion",
    "title": "Sample Report",
    "section": "Conclusion",
    "text": "Conclusion\nHere, you want to summarize the main points of what you’ve learned from this investigation, in paragraph form."
  },
  {
    "objectID": "project/report.html#tips",
    "href": "project/report.html#tips",
    "title": "Sample Report",
    "section": "Tips",
    "text": "Tips\n(delete this section from your report!)\nAlmost anything you might want to know about how to format output in quarto can be found here. Feel free to email/come to office hours to figure out how to do XYZ - part of the goal of making you write this report is that I want you to know how to write e.g. a journal paper in Quarto as well, so now’s the time to experiment.\nIf you want to know what the wordcount of your report is, you can run the following command in your terminal:\npandoc --lua-filter wordcount.lua report.qmd\nNotice that I have not pushed _output/report.html or the _output/report_files/ folder to github - this is intentional. I have actually set _output to not show up in git, to encourage you all to NOT push the rendered files to github and to instead work from the markdown files directly.\nYou may find it cleaner to create a figure subdirectory and store any figures that aren’t created by R/Python in that folder. I encourage you to organize this repository in a sensible way."
  },
  {
    "objectID": "project/guidelines.html",
    "href": "project/guidelines.html",
    "title": "Project Guidelines",
    "section": "",
    "text": "Your final project consists of a written report and a presentation (uploaded to YouTube), to be turned in instead of a final exam. In this project, you will select a topic, acquire data from one or more sources, and present any interesting findings you might come across as you explore your data."
  },
  {
    "objectID": "project/guidelines.html#general-rules",
    "href": "project/guidelines.html#general-rules",
    "title": "Project Guidelines",
    "section": "General rules",
    "text": "General rules\n\nYou may work in teams of up to 3 people, but each member of the team should contribute approximately evenly (I will measure this using your git contributions)\nYour work should be reproducible from start to finish. Do not modify the data by hand! I should be able to take the original data and your repository and go through your analysis from start to finish on my own machine.\nYou should not have to do any complicated statistical modeling for this project. If you want to fit a model, you need to be able to explain it to the rest of the class - but other members of the class may have had different statistics classes than you’ve had. In general, this project should focus on exploratory data analysis; any model results should be explained using graphs, not statistical tests.\nYour project should use what you have learned (and what you will learn) about data visualization, data wrangling, programming, functions, interactive graphics, and dynamic documents. Your ultimate goal is to demonstrate the class objectives and your ability to conduct reproducible analyses and produce professional products using markdown and R/Python code."
  },
  {
    "objectID": "project/guidelines.html#datasets",
    "href": "project/guidelines.html#datasets",
    "title": "Project Guidelines",
    "section": "Datasets",
    "text": "Datasets\nYour dataset(s)\n\nshould be fun and interesting to you.\nPast classes have worked on data covering witch trials, Super Mario competitive times, personal music databases, and many other topics. You can choose something serious, or something decidedly not serious and be successful with the analysis. The best predictor of success is that the data you’re working with is something you find interesting and want to explore.\nshould be on a topic of general interest - something you could discuss with your parents or grandparents\nIf you use a technical dataset, you need to write your report with the more general audience in mind, which means you will need to explain any jargon you use, and provide diagrams of e.g. plant anatomy, etc. to get the reader up to speed. If you work with sports data, you should provide an explanation like this as well, because I have no background knowledge about sports at all.\nmust have at least 1000 records (rows) and at least 5 variables\nmust include at least one meaningful categorical variable and one meaningful numeric variable (these can be derived, if you are e.g. working with text or image data)\nmust not be published in a textbook or have a published analysis unless\n\nyou get prior permission and\nyour analysis is very different from what has previously been published\n\nmust be something that you can make available to the entire class (so e.g. proprietary datasets from work or other sources aren’t acceptable)\nmust be traceable to the original source of the data. You MAY NOT use data uploaded to Kaggle - go back to the data source. If you need help assembling your data, come talk to me about it and I may be able to help.\n\nHere are some potential sources of interesting and/or fun data that explain how the data was acquired/sourced and (usually) have adequate data documentation:\n\nData is Plural archive\nTidyTuesday Archive\nData.gov The US government data archive"
  },
  {
    "objectID": "project/guidelines.html#version-control",
    "href": "project/guidelines.html#version-control",
    "title": "Project Guidelines",
    "section": "Version Control",
    "text": "Version Control\nYou should use GitHub to track your project throughout its life cycle. Some tips:\n\nPull before you start working, and after each commit.\nWorking in teams on github means that you have to allow for merge conflicts and become skilled at resolving them. This is part of my goal for making you work in groups - forcing you to develop these skills. See https://www.youtube.com/watch?v=97m0N4zIvOs for a demonstration of how to work with merge conflicts in rstudio.\nI do not expect you to work on branches for this project, unless you really want to - with 3 people and a defined scope, you should be able to work out of the main branch with few problems.\nCommit your changes in small, task-oriented batches. Try to work on small tasks and commit as soon as you finish the task. This will reduce merge conflicts.\nMinimize merge conflicts:\nPut each sentence on a different line in your document - this makes it much easier for git to resolve the changes, as git works line-by-line. I make all of my graduate students do this with their papers, and it makes things much easier to work around.\nREAD THE ERROR MESSAGE FROM GIT.\nSeriously, this will help you figure out about 90% of the things that go wrong. Git actually has good error messages that help you know what to do next.\nOnly commit the essential files necessary to compile your project report to github. This will reduce merge conflicts and save you a ton of time in the long run.\n\nDon’t commit pictures generated by R/python, .tex files generated as an intermediate stage, or even html/pdf files that are the final product until the very end. I have set this repository up in such a way that each of the quarto files renders to the _output folder, and git ignores everything in this folder, in the hopes that this will be enough to help you out.\nDo commit any R/python source files you need to e.g. define a shiny application or do some data processing. Organize these in a code folder, and create a header in each code file that describes what the file does and how it relates to other code files in the project.\nDon’t commit any files you didn’t personally create. Be selective in what you add to git. Use the .gitignore file to keep git from tracking files that shouldn’t be added to the repository.\n\n\nI will track your contributions to the project using the python git-fame package, which you can install with the command pip install git-fame.\nI will typically use some variant of the following command to track your group contributions:\ngit fame . --incl=\".(q|R)md\"\nThis only counts modifications to the markdown files, which ensures that whoever adds a dataset to the repository doesn’t get credit for doing a ton of work by just uploading a file. This also ensures that people committing intermediate files don’t get credit for making the repository a mess."
  },
  {
    "objectID": "project/guidelines.html#project-report",
    "href": "project/guidelines.html#project-report",
    "title": "Project Guidelines",
    "section": "Project Report",
    "text": "Project Report\nYour project report should:\n\nbe approximately \\(450\\times(2n + 1)\\) words, where \\(n\\) is the number of people in your group. The extra length is to allow you space to describe your dataset, methods, and conclusions; everyone will need to do that regardless of group size.\nIf you want to know what the wordcount of your report is, you can run the following command in your terminal (in the project directory, assuming you’ve cloned it from github classroom):\n\npandoc --lua-filter wordcount.lua report.qmd\n\nbe grammatically correct. Please feel free to make use of the writing center for editing, so that your report has appropriate grammar and structure.\nbe factually correct, and should reference outside sources appropriately (see below)\nhave a references section, using markdown’s references functionality. You should not manually compile your bibliography - it should be created automatically using a bib file.\nreference the software packages you’ve used in your analysis/report and cite them appropriately. Software is a scholarly work, and deserves to be cited. The citation() R command can help you assemble appropriate references for software packages.\ncontain an introduction and a conclusion, written in paragraphs. The “meat” of the report should tell a story.\nuse figures. Figures must have appropriate captions, and each figure should be referenced within the body of the paper using markdown reference syntax.\nuse the report.qmd template file provided in the project repository to assemble your report. It contains demonstrations of all of the requirements above."
  },
  {
    "objectID": "project/guidelines.html#presentation",
    "href": "project/guidelines.html#presentation",
    "title": "Project Guidelines",
    "section": "Presentation",
    "text": "Presentation\nYour project presentation should:\n\ninclude a visual aid (slides or a poster) that highlight(s) the findings you have presented in your report. The visual aid must be created using LaTeX or markdown.\ninclude participation from each member of your group\nbe approximately \\(4\\times(n+1)\\) minutes long.\nbe uploaded to YouTube (you can set the link such that people with the link can view the presentation but where it is not searchable) or YuJa (but YouTube is easier for your classmates to work with). You will submit the link to the presentation on Canvas.\n\nYou will be expected to peer-evaluate two other groups presentations and/or reports, using the rubric."
  },
  {
    "objectID": "reading/01-SignUp-Syllabus.html",
    "href": "reading/01-SignUp-Syllabus.html",
    "title": "Setup and Syllabus Annotation",
    "section": "",
    "text": "In this class, we will have weekly readings that are intended to broaden your horizons, introduce you to new ideas related to computing and reproducibility, and highlight important ethical considerations that we won’t discuss directly in class but that have implications for computing.\nI haven’t yet found a great tool for “social annotation”, but the idea is to allow you to read an article, make snarky (or insightful) comments, and see how your classmates react, ideally starting discussions and enriching everyone’s experiences.\nThis semester I’ve decided to try Hypothes.is. I haven’t used this before, so we’ll see how it goes."
  },
  {
    "objectID": "reading/01-SignUp-Syllabus.html#setup",
    "href": "reading/01-SignUp-Syllabus.html#setup",
    "title": "Setup and Syllabus Annotation",
    "section": "Setup",
    "text": "Setup\n\nCreate a free Hypothes.is account using your UNL email address\nJoin the Class Group\nInstall the browser addon in Chrome/Edge or the bookmarklet in your browser of choice."
  },
  {
    "objectID": "reading/01-SignUp-Syllabus.html#annotate-the-syllabus",
    "href": "reading/01-SignUp-Syllabus.html#annotate-the-syllabus",
    "title": "Setup and Syllabus Annotation",
    "section": "Annotate the Syllabus",
    "text": "Annotate the Syllabus\nOpen the syllabus in your browser.\n\nActivate hypothes.is using the addon or the bookmarklet.\nLog in (if necessary)\nMake sure you are posting your annotations to the 2023-Stat850 group.\nHighlight some text and make a comment. Ask a question about something you don’t understand, or complain about something you find unfair - I’m totally fine with that, I can take it.\nRead through the remainder of the syllabus and comment/highlight important points, things that need clarification, etc.\nRespond to your classmates’ comments before Friday at 8pm."
  },
  {
    "objectID": "reading/01-SignUp-Syllabus.html#evaluation",
    "href": "reading/01-SignUp-Syllabus.html#evaluation",
    "title": "Setup and Syllabus Annotation",
    "section": "Evaluation",
    "text": "Evaluation\nI will grade this assignment (and future assignments) by looking at your annotations in the 2023-Stat850 group. If you annotate articles and post the comments to “Public” instead of our group, I have no way to give you credit for the assignment.\nYou will get credit both for your own annotations and for responses to classmates’ comments/questions. These responses should be organic, not formulaic - I expect you to engage with interesting thoughts/comments, but you are not required to make a specific number of comments each week. I will instead track your overall engagement over the course of the semester."
  },
  {
    "objectID": "homework/02.html",
    "href": "homework/02.html",
    "title": "Homework 2: Finding Your Way in R and Python",
    "section": "",
    "text": "Note: This assignment must be submitted in github classroom.\nInstructions: Once you have finished this assignment, render the document (Ctrl/Cmd-Shift-K or the Render button). Commit the qmd file and any other files you have changed to the repository and push your changes.\nIn Canvas, submit a link to your github repository containing the updated files.\nNote: Submitting your link in Canvas lets me know that you are ready for me to grade your homework. You can commit half-finished or not-working homework to GitHub, and it is good practice to commit frequently (at least at the end of each work session)."
  },
  {
    "objectID": "homework/02.html#pythagorean-theorem-in-r",
    "href": "homework/02.html#pythagorean-theorem-in-r",
    "title": "Homework 2: Finding Your Way in R and Python",
    "section": "Pythagorean Theorem in R",
    "text": "Pythagorean Theorem in R\n\\[a^2 + b^2 = c^2\\]\nUse the chunk below to define variables \\(a\\), \\(b\\), and \\(c\\), where you define the values of \\(a\\) and \\(b\\), and \\(c\\) is determined mathematically. You may need to find the square root function in R to make this work.\n\n# Your pythagorean theorem code goes here"
  },
  {
    "objectID": "homework/02.html#quadratic-formula-in-python",
    "href": "homework/02.html#quadratic-formula-in-python",
    "title": "Homework 2: Finding Your Way in R and Python",
    "section": "Quadratic Formula in Python",
    "text": "Quadratic Formula in Python\n\\[x = \\frac{-b \\pm \\sqrt{b^2 - 4ac}}{2a}\\]\nUse the chunk below to define variables \\(a\\), \\(b\\), and \\(c\\), and then define \\(x1\\) and \\(x2\\), the possible values for \\(x\\). You may find it helpful to define a few additional variables, such as the value of the discriminant \\(\\sqrt{b^2 - 4ac}\\), to make it easier to calculate the results.\n\n# Your quadratic formula code goes here"
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Stat 850: Computing Tools for Statistics",
    "section": "",
    "text": "Course Materials\nDates shown are due dates (for homework, projects) and dates by which initial comments/annotations should be made (reading).\nMost classes will not contain slide presentations, but when there are slides to share, they will be provided here.\n\n\n   \n     \n     \n       Order By\n       Default\n         \n          Date - Oldest\n        \n         \n          Date - Newest\n        \n         \n          Title\n        \n     \n  \n    \n      \n      \n    \n\n\n\n\n\n\nDate\n\n\n\n\nTitle\n\n\n\n\n\n\nDec 8, 2023\n\n\n\n\n\nSample Report\n\n\n\n\nOct 30, 2023\n\n\n\n\n\nSample Proposal\n\n\n\n\nOct 6, 2023\n\n\n\n\n\nProject Guidelines\n\n\n\n\nSep 1, 2023\n\n\n\n\n\nHomework 2: Finding Your Way in R and Python\n\n\n\n\nAug 29, 2023\n\n\n\n\n\nFinding your way in R and Python\n\n\n\n\nAug 28, 2023\n\n\n\n\n\nDecoding Your Confusion\n\n\n\n\nAug 25, 2023\n\n\n\n\n\nHomework 1: Git and Github\n\n\n\n\nAug 21, 2023\n\n\n\n\n\nSetup and Syllabus Annotation\n\n\n\n\n\n\nNo matching items"
  },
  {
    "objectID": "homework/01.html",
    "href": "homework/01.html",
    "title": "Homework 1: Git and Github",
    "section": "",
    "text": "Note: This assignment must be submitted in github classroom."
  },
  {
    "objectID": "homework/01.html#course-overview-and-learning-outcomes",
    "href": "homework/01.html#course-overview-and-learning-outcomes",
    "title": "Homework 1: Git and Github",
    "section": "🤓 Course overview and learning outcomes",
    "text": "🤓 Course overview and learning outcomes\nThe goal of this course is to give you a brief introduction to GitHub. We’ll also provide you with materials for further learning and a few ideas to get you started on our platform. 🚀"
  },
  {
    "objectID": "homework/01.html#git-and-github",
    "href": "homework/01.html#git-and-github",
    "title": "Homework 1: Git and Github",
    "section": "Git and GitHub",
    "text": "Git and GitHub\nGit is a distributed Version Control System (VCS), which means it is a useful tool for easily tracking changes to your code, collaborating, and sharing. With Git you can track the changes you make to your project so you always have a record of what you’ve worked on and can easily revert back to an older version if need be. It also makes working with others easier—groups of people can work together on the same project and merge their changes into one final source!\nGitHub is a way to use the same power of Git all online with an easy-to-use interface. It’s used across the software world and beyond to collaborate and maintain the history of projects.\nGitHub is home to some of the most advanced technologies in the world. Whether you’re visualizing data or building a new game, there’s a whole community and set of tools on GitHub that can get you to the next step. This course starts with the basics of GitHub, but we’ll dig into the rest later."
  },
  {
    "objectID": "homework/01.html#understanding-the-github-flow",
    "href": "homework/01.html#understanding-the-github-flow",
    "title": "Homework 1: Git and Github",
    "section": "Understanding the GitHub flow",
    "text": "Understanding the GitHub flow\nThe GitHub flow is a lightweight workflow that allows you to experiment and collaborate on your projects easily, without the risk of losing your previous work.\n\nRepositories\nA repository is where your project work happens–think of it as your project folder. It contains all of your project’s files and revision history. You can work within a repository alone or invite others to collaborate with you on those files.\n\n\nCloning\nWhen a repository is created with GitHub, it’s stored remotely in the ☁️. You can clone a repository to create a local copy on your computer and then use Git to sync the two. This makes it easier to fix issues, add or remove files, and push larger commits. You can also use the editing tool of your choice as opposed to the GitHub UI. Cloning a repository also pulls down all the repository data that GitHub has at that point in time, including all versions of every file and folder for the project! This can be helpful if you experiment with your project and then realize you liked a previous version more. To learn more about cloning, read “Cloning a Repository”.\n\n\nCommitting and pushing\nCommitting and pushing are how you can add the changes you made on your local machine to the remote repository in GitHub. That way your instructor and/or teammates can see your latest work when you’re ready to share it. You can make a commit when you have made changes to your project that you want to “checkpoint.” You can also add a helpful commit message to remind yourself or your teammates what work you did (e.g. “Added a README with information about our project”).\nOnce you have a commit or multiple commits that you’re ready to add to your repository, you can use the push command to add those changes to your remote repository. Committing and pushing may feel new at first, but we promise you’ll get used to it 🙂"
  },
  {
    "objectID": "homework/01.html#github-terms-to-know",
    "href": "homework/01.html#github-terms-to-know",
    "title": "Homework 1: Git and Github",
    "section": "💻 GitHub terms to know",
    "text": "💻 GitHub terms to know\n\nRepositories\nWe mentioned repositories already, they are where your project work happens, but let’s talk a bit more about the details of them! As you work more on GitHub you will have many repositories which may feel confusing at first. Fortunately, your “GitHub dashboard” helps to easily navigate to your repositories and see useful information about them. Make sure you’re logged in to see it!\nRepositories also contain READMEs. You can add a README file to your repository to tell other people why your project is useful, what they can do with your project, and how they can use it. We are using this README to communicate how to learn Git and GitHub with you. 😄 To learn more about repositories read “Creating, Cloning, and Archiving Repositories and “About README’s”.\n\n\nBranches\nYou can use branches on GitHub to isolate work that you do not want merged into your final project just yet. Branches allow you to develop features, fix bugs, or safely experiment with new ideas in a contained area of your repository. Typically, you might create a new branch from the default branch of your repository—main. This makes a new working copy of your repository for you to experiment with. Once your new changes have been reviewed by a teammate, or you are satisfied with them, you can merge your changes into the default branch of your repository. To learn more about branching, read “About Branches”.\nNote: In this class, you will not be required to use branches.\n\n\nForks\nA fork is another way to copy a repository, but is usually used when you want to contribute to someone else’s project. Forking a repository allows you to freely experiment with changes without affecting the original project and is very popular when contributing to open source software projects! To learn more about forking, read “Fork a repo”\nNote: In this class, you will not be required to use forks.\n\n\nPull requests\nWhen working with branches, you can use a pull request to tell others about the changes you want to make and ask for their feedback. Once a pull request is opened, you can discuss and review the potential changes with collaborators and add more changes if need be. You can add specific people as reviewers of your pull request which shows you want their feedback on your changes! Once a pull request is ready-to-go, it can be merged into your main branch. To learn more about pull requests, read “About Pull Requests”.\nNote: In this course, you will not be required to use pull requests.\n\n\nIssues\nIssues are a way to track enhancements, tasks, or bugs for your work on GitHub. Issues are a great way to keep track of all the tasks you want to work on for your project and let others know what you plan to work on. You can also use issues to tell a favorite open source project about a bug you found or a feature you think would be great to add!\nFor larger projects, you can keep track of many issues on a project board. GitHub Projects help you organize and prioritize your work and you can read more about them in this “About Project boards document. You likely won’t need a project board for your assignments, but once you move on to even bigger projects, they’re a great way to organize your team’s work! You can also link together pull requests and issues to show that a fix is in progress and to automatically close the issue when someone merges the pull request. To learn more about issues and linking them to your pull requests, read “About Issues”.\n\n\nYour user profile\nYour profile page tells people the story of your work through the repositories you’re interested in, the contributions you’ve made, and the conversations you’ve had. You can also give the world a unique view into who you are with your profile README. You can use your profile to let future employers know all about you! To learn more about your user profile and adding and updating your profile README, read “Managing Your Profile README”.\n\n\nUsing markdown on GitHub\nYou might have noticed already, but you can add some fun styling to your issues, pull requests, and files. “Markdown” is an easy way to style your issues, pull requests, and files with some simple syntax. This can be helpful to organize your information and make it easier for others to read. You can also drop in gifs and images to help convey your point! To learn more about using GitHub’s flavor of markdown, read “Basic Writing and Formatting Syntax”.\n\n\nEngaging with the GitHub community\nThe GitHub community is vast. There are many types of people who use GitHub in their day to day—students like you, professional developers, hobbyists working on open source projects, and explorers who are just jumping into the world of software development on their own. There are many ways you can interact with the larger GitHub community, but here are three places where you can start.\n\nStarring repositories\nIf you find a repository interesting or you want to keep track of it, star it! When you star a repository it’s also used as a signal to surface better recommendations on github.com/explore. If you’d like to get back to your starred repositories you can do so via your user profile. To learn more about starring repositories, read “Saving Repositories with Stars”.\n\n\nFollowing users\nYou can follow people on GitHub to receive notifications about their activity and discover projects in their communities. When you follow a user, their public GitHub activity will show up on your dashboard so you can see all the cool things they are working on. To learn more about following users, read “Following People”.\n\n\nBrowsing GitHub Explore\nGitHub Explore is a great place to do just that … explore :smile: You can find new projects, events, and developers to interact with.\nYou can check out the GitHub Explore website at github.com/explore. The more you intereact with GitHub the more tailored your Explore view will be."
  },
  {
    "objectID": "homework/01.html#next-steps",
    "href": "homework/01.html#next-steps",
    "title": "Homework 1: Git and Github",
    "section": "📝 Next steps",
    "text": "📝 Next steps\n\nClone this repository to your local machine\nOn your local machine, create a new markdown file in this repository named ‘About_Me.md’. Provide a short biography/introduction for yourself and use markdown formatting\n\nMarkdown Basics provides an overview of different formatting options in markdown.\nYou must use at least the following formatting elements: header, subheader, bold, italic, bulleted list, and an image.\n\nCommit your changes to your new file locally and push them back to your github repository. Check on Github to make sure the new file appears.\nTo get full credit for your assignment, you will need to have worked with your git repository locally. I will be able to see if you have used the github editor to make your changes instead :)."
  },
  {
    "objectID": "homework/01.html#resources",
    "href": "homework/01.html#resources",
    "title": "Homework 1: Git and Github",
    "section": "📚 Resources",
    "text": "📚 Resources\n\nA short video explaining what GitHub is\nGit and GitHub learning resources\nUnderstanding the GitHub flow\nHow to use GitHub branches\nInteractive Git training materials\nGitHub’s Learning Lab\nEducation community forum\nGitHub community forum"
  },
  {
    "objectID": "homework/01.html#optional-extra-steps",
    "href": "homework/01.html#optional-extra-steps",
    "title": "Homework 1: Git and Github",
    "section": "Optional extra steps",
    "text": "Optional extra steps\n\nOpen a pull request and let your teacher know that you’ve finished this course.\n\nCreate your profile README. Let the world know a little bit more about you! What are you interested in learning? What are you working on? What’s your favorite hobby? Learn more about creating your profile README in the document, “Managing Your Profile README”.\nGo to your user dashboard and create a new repository. Experiment with the features within that repository to familiarize yourself with them.\nLet us know what you liked or didn’t like about the content of this course. What would you like to see more of? What would be interesting or helpful to your learning journey?"
  },
  {
    "objectID": "slides/02a-Finding-Your-Way.html#rstudio-projects",
    "href": "slides/02a-Finding-Your-Way.html#rstudio-projects",
    "title": "Finding your way in R and Python",
    "section": "",
    "text": "RStudio projects are a way to keep your work organized.\nLet’s create one for this week’s class work.\n\n\n\nCreating an RStudio Project"
  },
  {
    "objectID": "slides/02a-Finding-Your-Way.html#ways-to-execute-code",
    "href": "slides/02a-Finding-Your-Way.html#ways-to-execute-code",
    "title": "Finding your way in R and Python",
    "section": "Ways to Execute Code",
    "text": "Ways to Execute Code\nDownload madlibs.py and place it in your newly created project."
  },
  {
    "objectID": "slides/02a-Finding-Your-Way.html#command-line",
    "href": "slides/02a-Finding-Your-Way.html#command-line",
    "title": "Finding your way in R and Python",
    "section": "Command Line",
    "text": "Command Line\n\n\n\nRunning madlibs.py at the command line"
  },
  {
    "objectID": "slides/02a-Finding-Your-Way.html#source-script",
    "href": "slides/02a-Finding-Your-Way.html#source-script",
    "title": "Finding your way in R and Python",
    "section": "Source Script",
    "text": "Source Script\n\n\n\nRunning madlibs.py using Source Script in RStudio"
  },
  {
    "objectID": "reading/02-Decoding-Confusion.html",
    "href": "reading/02-Decoding-Confusion.html",
    "title": "Decoding Your Confusion",
    "section": "",
    "text": "This week’s assignment is in a book available through O’Reilly Safari Online Learning. UNL’s library provides access to these resources for free, if you follow these instructions:\n\nO’Reilly Media page\nEnter your UNL email address when prompted. Log in with your UNL credentials.\nGo to The Programmer’s Brain by Felienne Hermans, Chapter 1.\nStart annotating! Don’t forget to post your annotations to the class group!\n\n\nNote that the examples in this book are given in unfamiliar programming languages. That’s ok - read the code as best as you can, but part of the content of this chapter is that reading code can be hard!"
  },
  {
    "objectID": "project/proposal.html",
    "href": "project/proposal.html",
    "title": "Stat 850 Project Proposal",
    "section": "",
    "text": "Each member of your team should modify this document in some way and push their modifications to the repository in a separate commit. This will ensure that you have set your repository up in a way that ensures all group members are working with the same repository.\nPlease ensure that you have set your git name and email address on your computer by modifying the following commands and running them in the terminal:\ngit config --global user.name \"Mona Lisa\"\ngit config --global user.email \"mona@lisa.com\"\nIn the proposal as in the final report, all of your code chunks should be set so that echo = F, which prevents the code from being printed in the report. You should also set message = F, warning = F, which will reduce the amount of additional output which is present in the report. You can customize the execution of code in quarto by using additional options, some of which are detailed here."
  },
  {
    "objectID": "project/proposal.html#instructions",
    "href": "project/proposal.html#instructions",
    "title": "Stat 850 Project Proposal",
    "section": "",
    "text": "Each member of your team should modify this document in some way and push their modifications to the repository in a separate commit. This will ensure that you have set your repository up in a way that ensures all group members are working with the same repository.\nPlease ensure that you have set your git name and email address on your computer by modifying the following commands and running them in the terminal:\ngit config --global user.name \"Mona Lisa\"\ngit config --global user.email \"mona@lisa.com\"\nIn the proposal as in the final report, all of your code chunks should be set so that echo = F, which prevents the code from being printed in the report. You should also set message = F, warning = F, which will reduce the amount of additional output which is present in the report. You can customize the execution of code in quarto by using additional options, some of which are detailed here."
  },
  {
    "objectID": "project/proposal.html#data",
    "href": "project/proposal.html#data",
    "title": "Stat 850 Project Proposal",
    "section": "Data",
    "text": "Data\n\nSource\nThe data we are using in this project comes from [link to web site].\nIf you cannot link directly to the data file, then you need to additionally describe how someone could acquire the same data:\n\nYou can download the data directly using [process]\n\nProvide some code to read in the data (either stored in the repository or read in directly from the source).\n\n\nDescription\nThis dataset contains information about …\nIt was collected from …\nHere is a data dictionary showing each variable, the type of variable, units, and range of values that are possible:\nNote: this is an example table, please modify to actually match your data. Ensure that all of the same information is represented.\n\n\n\n\n\n\n\n\n\n\nName\nDescription\nType\nUnits\nRange/Values\n\n\n\n\nday_of_week\nThe day of the week on which the observation took place\ncategorical\nNA\n0 = Sunday\n1 = Monday\n…\n6 = Saturday\n7 = Unknown\n\n\nweight\nThe weight of the individual\nnumeric\nlbs\n0 - 300 (max weight measurable on the scale used)\nNA indicates missing data\n\n\ntime\nThe time of the observation\nnumeric\nHHMM\n0000 corresponds to midnight,\n2359 corresponds to 1 minute before midnight on the same day."
  },
  {
    "objectID": "project/proposal.html#project-goals",
    "href": "project/proposal.html#project-goals",
    "title": "Stat 850 Project Proposal",
    "section": "Project Goals",
    "text": "Project Goals\nDescribe why this data is interesting and what you hope to do with it.\nWe will use [dataset] to explore the following topics:\n\ninteresting thing 1\ninteresting thing 2\n…\n\nWe expect to create\n\ndescription of some of the graphs you might create\na shiny application\na statistical model\n…"
  },
  {
    "objectID": "project/proposal.html#division-of-labor",
    "href": "project/proposal.html#division-of-labor",
    "title": "Stat 850 Project Proposal",
    "section": "Division of Labor",
    "text": "Division of Labor\nDescribe how you plan to work together as a team. Set intermediate deadlines - what do you plan to have done by the project check-in? The more you have done (report/slides/code), the better feedback I can give you."
  },
  {
    "objectID": "project/proposal.html#additional-comments",
    "href": "project/proposal.html#additional-comments",
    "title": "Stat 850 Project Proposal",
    "section": "Additional Comments",
    "text": "Additional Comments\nWhat concerns do you have about this project? This is your place to provide feedback about the project guidelines and ask clarifying questions for me to address either individually or in class, if the question is relevant to everyone."
  },
  {
    "objectID": "syllabus.html",
    "href": "syllabus.html",
    "title": "Stat 850: Computing Tools for Statisticians",
    "section": "",
    "text": "Introductions to statistical computing packages and document preparation software. Topics include: graphical techniques, data management, Monte Carlo simulation, dynamic document preparation, presentation software."
  },
  {
    "objectID": "syllabus.html#attendance",
    "href": "syllabus.html#attendance",
    "title": "Stat 850: Computing Tools for Statisticians",
    "section": "Attendance",
    "text": "Attendance\nYou are expected to attend class and participate in online discussions. Consistent, repeated failure to attend class or actively participate in the online portions of the course will affect the participation portion of your grade.\nIf you are feeling ill, please do not come to class. Instead, review the material and work on the homework assignment, and then schedule an appointment with me to meet virtually. Feel free to contact me and let me know if you are having trouble - it is much easier to communicate early and often than to fix problems that arise later in the semester."
  },
  {
    "objectID": "syllabus.html#expectations",
    "href": "syllabus.html#expectations",
    "title": "Stat 850: Computing Tools for Statisticians",
    "section": "Expectations",
    "text": "Expectations\nYou can expect me to:\n\nreply to emails within 48 hours during the week (72 hours on weekends)\nbe available in class to assist with assignments\nbe available by appointment for additional help or discussion\n\nI expect you to:\n\nRead the module material and homework assignment before coming to class\nEngage with the material and your classmates during class\nSeek help when you do not understand the material\nCommunicate promptly if you anticipate that you will have trouble meeting deadlines or participating in a portion of the course.\nDo your own troubleshooting before contacting me for help (and mention things you’ve already tried when you do ask for help!)\nBe respectful and considerate of everyone in the class\n\n\nMake Mistakes!\nProgramming is the process of making a series of silly or stupid mistakes, and then slowly fixing each mistake (while adding a few more). The only way to know how to fix these mistakes (and avoid them in the future) is to make them. (Sometimes, you have to make the same mistake a few dozen times before you can avoid it in the future). At some point during the class, you will find that you’ve spent 30 minutes staring at an error caused by a typo, a space, a parenthesis in the wrong place. You may ask for help debugging this weird error, only to have someone immediately point out the problem… it is always easier to see these things in someone else’s code. This is part of programming, it is normal, and you shouldn’t feel embarrassed or sorry (unless you put no effort into troubleshooting the problem before you asked for help)\nIf you manage to produce an error I haven’t seen before, then congratulations. You have achieved something special, and that achievement should be celebrated. Each new and bizarre error is an opportunity to learn a bit more about the programming language, the operating system, or the interaction between the two."
  },
  {
    "objectID": "syllabus.html#inclement-weather",
    "href": "syllabus.html#inclement-weather",
    "title": "Stat 850: Computing Tools for Statisticians",
    "section": "Inclement Weather",
    "text": "Inclement Weather\nIf in-person classes are canceled, you will be notified of the instructional continuity plan for this class by Canvas Announcement. In most circumstances where there is power in the Lincoln area, we will continue to hold class via Zoom."
  },
  {
    "objectID": "syllabus.html#academic-integrity-and-class-conduct",
    "href": "syllabus.html#academic-integrity-and-class-conduct",
    "title": "Stat 850: Computing Tools for Statisticians",
    "section": "Academic Integrity and Class Conduct",
    "text": "Academic Integrity and Class Conduct\nYou will be engaging with your classmates and me through in-person discussions and collaborative activities. It is expected that everyone will engage in these interactions civilly and in good faith. Discussion and disagreement are important parts of the learning process, but it is important that mutual respect prevail. Individuals who detract from an atmosphere of civility and respect will be removed from the conversation.\nStudents are expected to adhere to guidelines concerning academic dishonesty outlined in Article III B.1 of the University’s Student Code of Conduct. The Statistics Department academic integrity and grade appeal policy is available here.\nYou must be able to explain how the logic works for any code you turn in. This means that code you obtained from e.g. StackOverflow or ChatGPT is fine to use if you can explain it and modify it for the purposes of this class, but if you cannot explain your code you will not get credit for the assignment. This is in line with what is generally considered acceptable behavior in programming - reuse is fine (subject to the code’s license) but you must be able to fully explain and modify any code you did not write yourself. I reserve the right to replace the grade on any assignment with an oral exam over that assignment’s content and key concepts."
  },
  {
    "objectID": "slides/02a-Finding-Your-Way.html",
    "href": "slides/02a-Finding-Your-Way.html",
    "title": "Finding your way in R and Python",
    "section": "",
    "text": "RStudio projects are a way to keep your work organized.\nLet’s create one for this week’s class work.\n\n\n\nCreating an RStudio Project"
  }
]